/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LayerUpdate } from './LayerUpdate';
import {
    LayerUpdateFromJSON,
    LayerUpdateFromJSONTyped,
    LayerUpdateToJSON,
} from './LayerUpdate';
import type { PlotUpdate } from './PlotUpdate';
import {
    PlotUpdateFromJSON,
    PlotUpdateFromJSONTyped,
    PlotUpdateToJSON,
} from './PlotUpdate';
import type { STRectangle } from './STRectangle';
import {
    STRectangleFromJSON,
    STRectangleFromJSONTyped,
    STRectangleToJSON,
} from './STRectangle';
import type { TimeStep } from './TimeStep';
import {
    TimeStepFromJSON,
    TimeStepFromJSONTyped,
    TimeStepToJSON,
} from './TimeStep';

/**
 * 
 * @export
 * @interface UpdateProject
 */
export interface UpdateProject {
    /**
     * 
     * @type {STRectangle}
     * @memberof UpdateProject
     */
    bounds?: STRectangle | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    id: string;
    /**
     * 
     * @type {Array<LayerUpdate>}
     * @memberof UpdateProject
     */
    layers?: Array<LayerUpdate> | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    name?: string | null;
    /**
     * 
     * @type {Array<PlotUpdate>}
     * @memberof UpdateProject
     */
    plots?: Array<PlotUpdate> | null;
    /**
     * 
     * @type {TimeStep}
     * @memberof UpdateProject
     */
    timeStep?: TimeStep | null;
}

/**
 * Check if a given object implements the UpdateProject interface.
 */
export function instanceOfUpdateProject(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpdateProjectFromJSON(json: any): UpdateProject {
    return UpdateProjectFromJSONTyped(json, false);
}

export function UpdateProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateProject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bounds': !exists(json, 'bounds') ? undefined : STRectangleFromJSON(json['bounds']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': json['id'],
        'layers': !exists(json, 'layers') ? undefined : (json['layers'] === null ? null : (json['layers'] as Array<any>).map(LayerUpdateFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'plots': !exists(json, 'plots') ? undefined : (json['plots'] === null ? null : (json['plots'] as Array<any>).map(PlotUpdateFromJSON)),
        'timeStep': !exists(json, 'timeStep') ? undefined : TimeStepFromJSON(json['timeStep']),
    };
}

export function UpdateProjectToJSON(value?: UpdateProject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bounds': STRectangleToJSON(value.bounds),
        'description': value.description,
        'id': value.id,
        'layers': value.layers === undefined ? undefined : (value.layers === null ? null : (value.layers as Array<any>).map(LayerUpdateToJSON)),
        'name': value.name,
        'plots': value.plots === undefined ? undefined : (value.plots === null ? null : (value.plots as Array<any>).map(PlotUpdateToJSON)),
        'timeStep': TimeStepToJSON(value.timeStep),
    };
}

