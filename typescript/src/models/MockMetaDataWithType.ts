/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MockDatasetDataSourceLoadingInfo } from './MockDatasetDataSourceLoadingInfo';
import {
    MockDatasetDataSourceLoadingInfoFromJSON,
    MockDatasetDataSourceLoadingInfoFromJSONTyped,
    MockDatasetDataSourceLoadingInfoToJSON,
} from './MockDatasetDataSourceLoadingInfo';
import type { VectorResultDescriptor } from './VectorResultDescriptor';
import {
    VectorResultDescriptorFromJSON,
    VectorResultDescriptorFromJSONTyped,
    VectorResultDescriptorToJSON,
} from './VectorResultDescriptor';

/**
 * 
 * @export
 * @interface MockMetaDataWithType
 */
export interface MockMetaDataWithType {
    /**
     * 
     * @type {MockDatasetDataSourceLoadingInfo}
     * @memberof MockMetaDataWithType
     */
    loadingInfo: MockDatasetDataSourceLoadingInfo;
    /**
     * 
     * @type {VectorResultDescriptor}
     * @memberof MockMetaDataWithType
     */
    resultDescriptor: VectorResultDescriptor;
    /**
     * 
     * @type {string}
     * @memberof MockMetaDataWithType
     */
    type: MockMetaDataWithTypeTypeEnum;
}


/**
 * @export
 */
export const MockMetaDataWithTypeTypeEnum = {
    MockMetaData: 'MockMetaData',
    OgrMetaData: 'OgrMetaData',
    GdalMetaDataRegular: 'GdalMetaDataRegular',
    GdalStatic: 'GdalStatic',
    GdalMetadataNetCdfCf: 'GdalMetadataNetCdfCf',
    GdalMetaDataList: 'GdalMetaDataList'
} as const;
export type MockMetaDataWithTypeTypeEnum = typeof MockMetaDataWithTypeTypeEnum[keyof typeof MockMetaDataWithTypeTypeEnum];


/**
 * Check if a given object implements the MockMetaDataWithType interface.
 */
export function instanceOfMockMetaDataWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "loadingInfo" in value;
    isInstance = isInstance && "resultDescriptor" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function MockMetaDataWithTypeFromJSON(json: any): MockMetaDataWithType {
    return MockMetaDataWithTypeFromJSONTyped(json, false);
}

export function MockMetaDataWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MockMetaDataWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'loadingInfo': MockDatasetDataSourceLoadingInfoFromJSON(json['loadingInfo']),
        'resultDescriptor': VectorResultDescriptorFromJSON(json['resultDescriptor']),
        'type': json['type'],
    };
}

export function MockMetaDataWithTypeToJSON(value?: MockMetaDataWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'loadingInfo': MockDatasetDataSourceLoadingInfoToJSON(value.loadingInfo),
        'resultDescriptor': VectorResultDescriptorToJSON(value.resultDescriptor),
        'type': value.type,
    };
}

