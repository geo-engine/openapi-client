/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RasterColorizerMultiBand
 */
export interface RasterColorizerMultiBand {
    /**
     * The band index of the blue channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    blueBand: number;
    /**
     * The maximum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    blueMax: number;
    /**
     * The minimum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    blueMin: number;
    /**
     * A scaling factor for the blue channel between 0 and 1.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    blueScale?: number;
    /**
     * The band index of the green channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    greenBand: number;
    /**
     * The maximum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    greenMax: number;
    /**
     * The minimum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    greenMin: number;
    /**
     * A scaling factor for the green channel between 0 and 1.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    greenScale?: number;
    /**
     * The band index of the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    redBand: number;
    /**
     * The maximum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    redMax: number;
    /**
     * The minimum value for the red channel.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    redMin: number;
    /**
     * A scaling factor for the red channel between 0 and 1.
     * @type {number}
     * @memberof RasterColorizerMultiBand
     */
    redScale?: number;
    /**
     * 
     * @type {string}
     * @memberof RasterColorizerMultiBand
     */
    type: RasterColorizerMultiBandTypeEnum;
}


/**
 * @export
 */
export const RasterColorizerMultiBandTypeEnum = {
    MultiBand: 'multiBand'
} as const;
export type RasterColorizerMultiBandTypeEnum = typeof RasterColorizerMultiBandTypeEnum[keyof typeof RasterColorizerMultiBandTypeEnum];


/**
 * Check if a given object implements the RasterColorizerMultiBand interface.
 */
export function instanceOfRasterColorizerMultiBand(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "blueBand" in value;
    isInstance = isInstance && "blueMax" in value;
    isInstance = isInstance && "blueMin" in value;
    isInstance = isInstance && "greenBand" in value;
    isInstance = isInstance && "greenMax" in value;
    isInstance = isInstance && "greenMin" in value;
    isInstance = isInstance && "redBand" in value;
    isInstance = isInstance && "redMax" in value;
    isInstance = isInstance && "redMin" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function RasterColorizerMultiBandFromJSON(json: any): RasterColorizerMultiBand {
    return RasterColorizerMultiBandFromJSONTyped(json, false);
}

export function RasterColorizerMultiBandFromJSONTyped(json: any, ignoreDiscriminator: boolean): RasterColorizerMultiBand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blueBand': json['blueBand'],
        'blueMax': json['blueMax'],
        'blueMin': json['blueMin'],
        'blueScale': !exists(json, 'blueScale') ? undefined : json['blueScale'],
        'greenBand': json['greenBand'],
        'greenMax': json['greenMax'],
        'greenMin': json['greenMin'],
        'greenScale': !exists(json, 'greenScale') ? undefined : json['greenScale'],
        'redBand': json['redBand'],
        'redMax': json['redMax'],
        'redMin': json['redMin'],
        'redScale': !exists(json, 'redScale') ? undefined : json['redScale'],
        'type': json['type'],
    };
}

export function RasterColorizerMultiBandToJSON(value?: RasterColorizerMultiBand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blueBand': value.blueBand,
        'blueMax': value.blueMax,
        'blueMin': value.blueMin,
        'blueScale': value.blueScale,
        'greenBand': value.greenBand,
        'greenMax': value.greenMax,
        'greenMin': value.greenMin,
        'greenScale': value.greenScale,
        'redBand': value.redBand,
        'redMax': value.redMax,
        'redMin': value.redMin,
        'redScale': value.redScale,
        'type': value.type,
    };
}

