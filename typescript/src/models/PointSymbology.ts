/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ColorParam } from './ColorParam';
import {
    ColorParamFromJSON,
    ColorParamFromJSONTyped,
    ColorParamToJSON,
} from './ColorParam';
import type { NumberParam } from './NumberParam';
import {
    NumberParamFromJSON,
    NumberParamFromJSONTyped,
    NumberParamToJSON,
} from './NumberParam';
import type { StrokeParam } from './StrokeParam';
import {
    StrokeParamFromJSON,
    StrokeParamFromJSONTyped,
    StrokeParamToJSON,
} from './StrokeParam';
import type { TextSymbology } from './TextSymbology';
import {
    TextSymbologyFromJSON,
    TextSymbologyFromJSONTyped,
    TextSymbologyToJSON,
} from './TextSymbology';

/**
 * 
 * @export
 * @interface PointSymbology
 */
export interface PointSymbology {
    /**
     * 
     * @type {ColorParam}
     * @memberof PointSymbology
     */
    fillColor: ColorParam;
    /**
     * 
     * @type {NumberParam}
     * @memberof PointSymbology
     */
    radius: NumberParam;
    /**
     * 
     * @type {StrokeParam}
     * @memberof PointSymbology
     */
    stroke: StrokeParam;
    /**
     * 
     * @type {TextSymbology}
     * @memberof PointSymbology
     */
    text?: TextSymbology | null;
}

/**
 * Check if a given object implements the PointSymbology interface.
 */
export function instanceOfPointSymbology(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fillColor" in value;
    isInstance = isInstance && "radius" in value;
    isInstance = isInstance && "stroke" in value;

    return isInstance;
}

export function PointSymbologyFromJSON(json: any): PointSymbology {
    return PointSymbologyFromJSONTyped(json, false);
}

export function PointSymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): PointSymbology {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fillColor': ColorParamFromJSON(json['fillColor']),
        'radius': NumberParamFromJSON(json['radius']),
        'stroke': StrokeParamFromJSON(json['stroke']),
        'text': !exists(json, 'text') ? undefined : TextSymbologyFromJSON(json['text']),
    };
}

export function PointSymbologyToJSON(value?: PointSymbology | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fillColor': ColorParamToJSON(value.fillColor),
        'radius': NumberParamToJSON(value.radius),
        'stroke': StrokeParamToJSON(value.stroke),
        'text': TextSymbologyToJSON(value.text),
    };
}

