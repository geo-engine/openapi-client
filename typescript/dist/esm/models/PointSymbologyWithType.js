/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { ColorParamFromJSON, ColorParamToJSON, } from './ColorParam';
import { NumberParamFromJSON, NumberParamToJSON, } from './NumberParam';
import { StrokeParamFromJSON, StrokeParamToJSON, } from './StrokeParam';
import { TextSymbologyFromJSON, TextSymbologyToJSON, } from './TextSymbology';
/**
 * @export
 */
export const PointSymbologyWithTypeTypeEnum = {
    Point: 'point'
};
/**
 * Check if a given object implements the PointSymbologyWithType interface.
 */
export function instanceOfPointSymbologyWithType(value) {
    let isInstance = true;
    isInstance = isInstance && "fillColor" in value;
    isInstance = isInstance && "radius" in value;
    isInstance = isInstance && "stroke" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
export function PointSymbologyWithTypeFromJSON(json) {
    return PointSymbologyWithTypeFromJSONTyped(json, false);
}
export function PointSymbologyWithTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'fillColor': ColorParamFromJSON(json['fillColor']),
        'radius': NumberParamFromJSON(json['radius']),
        'stroke': StrokeParamFromJSON(json['stroke']),
        'text': !exists(json, 'text') ? undefined : TextSymbologyFromJSON(json['text']),
        'type': json['type'],
    };
}
export function PointSymbologyWithTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'fillColor': ColorParamToJSON(value.fillColor),
        'radius': NumberParamToJSON(value.radius),
        'stroke': StrokeParamToJSON(value.stroke),
        'text': TextSymbologyToJSON(value.text),
        'type': value.type,
    };
}
