/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormatSpecifics } from './FormatSpecifics';
import {
    FormatSpecificsFromJSON,
    FormatSpecificsFromJSONTyped,
    FormatSpecificsToJSON,
    FormatSpecificsToJSONTyped,
} from './FormatSpecifics';

/**
 * 
 * @export
 * @interface OgrSourceColumnSpec
 */
export interface OgrSourceColumnSpec {
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    bool?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    datetime?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    _float?: Array<string>;
    /**
     * 
     * @type {FormatSpecifics}
     * @memberof OgrSourceColumnSpec
     */
    formatSpecifics?: FormatSpecifics | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    _int?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OgrSourceColumnSpec
     */
    rename?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    text?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceColumnSpec
     */
    x: string;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceColumnSpec
     */
    y?: string | null;
}

/**
 * Check if a given object implements the OgrSourceColumnSpec interface.
 */
export function instanceOfOgrSourceColumnSpec(value: object): value is OgrSourceColumnSpec {
    if (!('x' in value) || value['x'] === undefined) return false;
    return true;
}

export function OgrSourceColumnSpecFromJSON(json: any): OgrSourceColumnSpec {
    return OgrSourceColumnSpecFromJSONTyped(json, false);
}

export function OgrSourceColumnSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceColumnSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'bool': json['bool'] == null ? undefined : json['bool'],
        'datetime': json['datetime'] == null ? undefined : json['datetime'],
        '_float': json['float'] == null ? undefined : json['float'],
        'formatSpecifics': json['formatSpecifics'] == null ? undefined : FormatSpecificsFromJSON(json['formatSpecifics']),
        '_int': json['int'] == null ? undefined : json['int'],
        'rename': json['rename'] == null ? undefined : json['rename'],
        'text': json['text'] == null ? undefined : json['text'],
        'x': json['x'],
        'y': json['y'] == null ? undefined : json['y'],
    };
}

export function OgrSourceColumnSpecToJSON(json: any): OgrSourceColumnSpec {
    return OgrSourceColumnSpecToJSONTyped(json, false);
}

export function OgrSourceColumnSpecToJSONTyped(value?: OgrSourceColumnSpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bool': value['bool'],
        'datetime': value['datetime'],
        'float': value['_float'],
        'formatSpecifics': FormatSpecificsToJSON(value['formatSpecifics']),
        'int': value['_int'],
        'rename': value['rename'],
        'text': value['text'],
        'x': value['x'],
        'y': value['y'],
    };
}

