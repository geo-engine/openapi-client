/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GdalLoadingInfoTemporalSlice } from './GdalLoadingInfoTemporalSlice';
import {
    GdalLoadingInfoTemporalSliceFromJSON,
    GdalLoadingInfoTemporalSliceFromJSONTyped,
    GdalLoadingInfoTemporalSliceToJSON,
} from './GdalLoadingInfoTemporalSlice';
import type { RasterResultDescriptor } from './RasterResultDescriptor';
import {
    RasterResultDescriptorFromJSON,
    RasterResultDescriptorFromJSONTyped,
    RasterResultDescriptorToJSON,
} from './RasterResultDescriptor';

/**
 * 
 * @export
 * @interface GdalMetaDataListWithType
 */
export interface GdalMetaDataListWithType {
    /**
     * 
     * @type {Array<GdalLoadingInfoTemporalSlice>}
     * @memberof GdalMetaDataListWithType
     */
    params: Array<GdalLoadingInfoTemporalSlice>;
    /**
     * 
     * @type {RasterResultDescriptor}
     * @memberof GdalMetaDataListWithType
     */
    resultDescriptor: RasterResultDescriptor;
    /**
     * 
     * @type {string}
     * @memberof GdalMetaDataListWithType
     */
    type: GdalMetaDataListWithTypeTypeEnum;
}


/**
 * @export
 */
export const GdalMetaDataListWithTypeTypeEnum = {
    GdalMetaDataList: 'GdalMetaDataList'
} as const;
export type GdalMetaDataListWithTypeTypeEnum = typeof GdalMetaDataListWithTypeTypeEnum[keyof typeof GdalMetaDataListWithTypeTypeEnum];


/**
 * Check if a given object implements the GdalMetaDataListWithType interface.
 */
export function instanceOfGdalMetaDataListWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "resultDescriptor" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GdalMetaDataListWithTypeFromJSON(json: any): GdalMetaDataListWithType {
    return GdalMetaDataListWithTypeFromJSONTyped(json, false);
}

export function GdalMetaDataListWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdalMetaDataListWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'params': ((json['params'] as Array<any>).map(GdalLoadingInfoTemporalSliceFromJSON)),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'type': json['type'],
    };
}

export function GdalMetaDataListWithTypeToJSON(value?: GdalMetaDataListWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'params': ((value.params as Array<any>).map(GdalLoadingInfoTemporalSliceToJSON)),
        'resultDescriptor': RasterResultDescriptorToJSON(value.resultDescriptor),
        'type': value.type,
    };
}

