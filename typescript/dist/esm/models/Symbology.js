/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LineSymbologyWithTypeFromJSONTyped, LineSymbologyWithTypeToJSON, } from './LineSymbologyWithType';
import { PointSymbologyWithTypeFromJSONTyped, PointSymbologyWithTypeToJSON, } from './PointSymbologyWithType';
import { PolygonSymbologyWithTypeFromJSONTyped, PolygonSymbologyWithTypeToJSON, } from './PolygonSymbologyWithType';
import { RasterSymbologyWithTypeFromJSONTyped, RasterSymbologyWithTypeToJSON, } from './RasterSymbologyWithType';
export function SymbologyFromJSON(json) {
    return SymbologyFromJSONTyped(json, false);
}
export function SymbologyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'line':
            return Object.assign(Object.assign({}, LineSymbologyWithTypeFromJSONTyped(json, true)), { type: 'line' });
        case 'point':
            return Object.assign(Object.assign({}, PointSymbologyWithTypeFromJSONTyped(json, true)), { type: 'point' });
        case 'polygon':
            return Object.assign(Object.assign({}, PolygonSymbologyWithTypeFromJSONTyped(json, true)), { type: 'polygon' });
        case 'raster':
            return Object.assign(Object.assign({}, RasterSymbologyWithTypeFromJSONTyped(json, true)), { type: 'raster' });
        default:
            throw new Error(`No variant of Symbology exists with 'type=${json['type']}'`);
    }
}
export function SymbologyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'line':
            return LineSymbologyWithTypeToJSON(value);
        case 'point':
            return PointSymbologyWithTypeToJSON(value);
        case 'polygon':
            return PolygonSymbologyWithTypeToJSON(value);
        case 'raster':
            return RasterSymbologyWithTypeToJSON(value);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${value['type']}'`);
    }
}
