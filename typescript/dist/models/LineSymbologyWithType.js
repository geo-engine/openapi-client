"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineSymbologyWithTypeToJSON = exports.LineSymbologyWithTypeFromJSONTyped = exports.LineSymbologyWithTypeFromJSON = exports.instanceOfLineSymbologyWithType = exports.LineSymbologyWithTypeTypeEnum = void 0;
const runtime_1 = require("../runtime");
const StrokeParam_1 = require("./StrokeParam");
const TextSymbology_1 = require("./TextSymbology");
/**
 * @export
 */
exports.LineSymbologyWithTypeTypeEnum = {
    Line: 'line'
};
/**
 * Check if a given object implements the LineSymbologyWithType interface.
 */
function instanceOfLineSymbologyWithType(value) {
    let isInstance = true;
    isInstance = isInstance && "autoSimplified" in value;
    isInstance = isInstance && "stroke" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
exports.instanceOfLineSymbologyWithType = instanceOfLineSymbologyWithType;
function LineSymbologyWithTypeFromJSON(json) {
    return LineSymbologyWithTypeFromJSONTyped(json, false);
}
exports.LineSymbologyWithTypeFromJSON = LineSymbologyWithTypeFromJSON;
function LineSymbologyWithTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'autoSimplified': json['autoSimplified'],
        'stroke': (0, StrokeParam_1.StrokeParamFromJSON)(json['stroke']),
        'text': !(0, runtime_1.exists)(json, 'text') ? undefined : (0, TextSymbology_1.TextSymbologyFromJSON)(json['text']),
        'type': json['type'],
    };
}
exports.LineSymbologyWithTypeFromJSONTyped = LineSymbologyWithTypeFromJSONTyped;
function LineSymbologyWithTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'autoSimplified': value.autoSimplified,
        'stroke': (0, StrokeParam_1.StrokeParamToJSON)(value.stroke),
        'text': (0, TextSymbology_1.TextSymbologyToJSON)(value.text),
        'type': value.type,
    };
}
exports.LineSymbologyWithTypeToJSON = LineSymbologyWithTypeToJSON;
