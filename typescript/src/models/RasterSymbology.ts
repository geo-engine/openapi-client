/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RasterColorizer } from './RasterColorizer';
import {
    RasterColorizerFromJSON,
    RasterColorizerFromJSONTyped,
    RasterColorizerToJSON,
    RasterColorizerToJSONTyped,
} from './RasterColorizer';

/**
 * 
 * @export
 * @interface RasterSymbology
 */
export interface RasterSymbology {
    /**
     * 
     * @type {number}
     * @memberof RasterSymbology
     */
    opacity: number;
    /**
     * 
     * @type {RasterColorizer}
     * @memberof RasterSymbology
     */
    rasterColorizer: RasterColorizer;
    /**
     * 
     * @type {string}
     * @memberof RasterSymbology
     */
    type: RasterSymbologyTypeEnum;
}


/**
 * @export
 */
export const RasterSymbologyTypeEnum = {
    Raster: 'raster'
} as const;
export type RasterSymbologyTypeEnum = typeof RasterSymbologyTypeEnum[keyof typeof RasterSymbologyTypeEnum];


/**
 * Check if a given object implements the RasterSymbology interface.
 */
export function instanceOfRasterSymbology(value: object): value is RasterSymbology {
    if (!('opacity' in value) || value['opacity'] === undefined) return false;
    if (!('rasterColorizer' in value) || value['rasterColorizer'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function RasterSymbologyFromJSON(json: any): RasterSymbology {
    return RasterSymbologyFromJSONTyped(json, false);
}

export function RasterSymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RasterSymbology {
    if (json == null) {
        return json;
    }
    return {
        
        'opacity': json['opacity'],
        'rasterColorizer': RasterColorizerFromJSON(json['rasterColorizer']),
        'type': json['type'],
    };
}

export function RasterSymbologyToJSON(json: any): RasterSymbology {
    return RasterSymbologyToJSONTyped(json, false);
}

export function RasterSymbologyToJSONTyped(value?: RasterSymbology | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'opacity': value['opacity'],
        'rasterColorizer': RasterColorizerToJSON(value['rasterColorizer']),
        'type': value['type'],
    };
}

