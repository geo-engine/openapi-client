"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateLayerToJSONTyped = exports.UpdateLayerToJSON = exports.UpdateLayerFromJSONTyped = exports.UpdateLayerFromJSON = exports.instanceOfUpdateLayer = void 0;
const Symbology_1 = require("./Symbology");
const Workflow_1 = require("./Workflow");
/**
 * Check if a given object implements the UpdateLayer interface.
 */
function instanceOfUpdateLayer(value) {
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('workflow' in value) || value['workflow'] === undefined)
        return false;
    return true;
}
exports.instanceOfUpdateLayer = instanceOfUpdateLayer;
function UpdateLayerFromJSON(json) {
    return UpdateLayerFromJSONTyped(json, false);
}
exports.UpdateLayerFromJSON = UpdateLayerFromJSON;
function UpdateLayerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'description': json['description'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'properties': json['properties'] == null ? undefined : json['properties'],
        'symbology': json['symbology'] == null ? undefined : (0, Symbology_1.SymbologyFromJSON)(json['symbology']),
        'workflow': (0, Workflow_1.WorkflowFromJSON)(json['workflow']),
    };
}
exports.UpdateLayerFromJSONTyped = UpdateLayerFromJSONTyped;
function UpdateLayerToJSON(json) {
    return UpdateLayerToJSONTyped(json, false);
}
exports.UpdateLayerToJSON = UpdateLayerToJSON;
function UpdateLayerToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'description': value['description'],
        'metadata': value['metadata'],
        'name': value['name'],
        'properties': value['properties'],
        'symbology': (0, Symbology_1.SymbologyToJSON)(value['symbology']),
        'workflow': (0, Workflow_1.WorkflowToJSON)(value['workflow']),
    };
}
exports.UpdateLayerToJSONTyped = UpdateLayerToJSONTyped;
