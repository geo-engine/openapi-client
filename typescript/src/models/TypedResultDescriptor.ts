/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TypedPlotResultDescriptor } from './TypedPlotResultDescriptor';
import {
    instanceOfTypedPlotResultDescriptor,
    TypedPlotResultDescriptorFromJSON,
    TypedPlotResultDescriptorFromJSONTyped,
    TypedPlotResultDescriptorToJSON,
} from './TypedPlotResultDescriptor';
import type { TypedRasterResultDescriptor } from './TypedRasterResultDescriptor';
import {
    instanceOfTypedRasterResultDescriptor,
    TypedRasterResultDescriptorFromJSON,
    TypedRasterResultDescriptorFromJSONTyped,
    TypedRasterResultDescriptorToJSON,
} from './TypedRasterResultDescriptor';
import type { TypedVectorResultDescriptor } from './TypedVectorResultDescriptor';
import {
    instanceOfTypedVectorResultDescriptor,
    TypedVectorResultDescriptorFromJSON,
    TypedVectorResultDescriptorFromJSONTyped,
    TypedVectorResultDescriptorToJSON,
} from './TypedVectorResultDescriptor';

/**
 * @type TypedResultDescriptor
 * 
 * @export
 */
export type TypedResultDescriptor = { type: 'plot' } & TypedPlotResultDescriptor | { type: 'raster' } & TypedRasterResultDescriptor | { type: 'vector' } & TypedVectorResultDescriptor;

export function TypedResultDescriptorFromJSON(json: any): TypedResultDescriptor {
    return TypedResultDescriptorFromJSONTyped(json, false);
}

export function TypedResultDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedResultDescriptor {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'plot':
            return Object.assign({}, TypedPlotResultDescriptorFromJSONTyped(json, true), { type: 'plot' } as const);
        case 'raster':
            return Object.assign({}, TypedRasterResultDescriptorFromJSONTyped(json, true), { type: 'raster' } as const);
        case 'vector':
            return Object.assign({}, TypedVectorResultDescriptorFromJSONTyped(json, true), { type: 'vector' } as const);
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${json['type']}'`);
    }
}

export function TypedResultDescriptorToJSON(json: any): any {
    return TypedResultDescriptorToJSONTyped(json, false);
}

export function TypedResultDescriptorToJSONTyped(value?: TypedResultDescriptor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'plot':
            return Object.assign({}, TypedPlotResultDescriptorToJSON(value), { type: 'plot' } as const);
        case 'raster':
            return Object.assign({}, TypedRasterResultDescriptorToJSON(value), { type: 'raster' } as const);
        case 'vector':
            return Object.assign({}, TypedVectorResultDescriptorToJSON(value), { type: 'vector' } as const);
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${value['type']}'`);
    }

}

