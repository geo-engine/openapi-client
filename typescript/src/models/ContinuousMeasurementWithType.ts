/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContinuousMeasurementWithType
 */
export interface ContinuousMeasurementWithType {
    /**
     * 
     * @type {string}
     * @memberof ContinuousMeasurementWithType
     */
    measurement: string;
    /**
     * 
     * @type {string}
     * @memberof ContinuousMeasurementWithType
     */
    type: ContinuousMeasurementWithTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContinuousMeasurementWithType
     */
    unit?: string | null;
}


/**
 * @export
 */
export const ContinuousMeasurementWithTypeTypeEnum = {
    Continuous: 'continuous'
} as const;
export type ContinuousMeasurementWithTypeTypeEnum = typeof ContinuousMeasurementWithTypeTypeEnum[keyof typeof ContinuousMeasurementWithTypeTypeEnum];


/**
 * Check if a given object implements the ContinuousMeasurementWithType interface.
 */
export function instanceOfContinuousMeasurementWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "measurement" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ContinuousMeasurementWithTypeFromJSON(json: any): ContinuousMeasurementWithType {
    return ContinuousMeasurementWithTypeFromJSONTyped(json, false);
}

export function ContinuousMeasurementWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContinuousMeasurementWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'measurement': json['measurement'],
        'type': json['type'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
    };
}

export function ContinuousMeasurementWithTypeToJSON(value?: ContinuousMeasurementWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'measurement': value.measurement,
        'type': value.type,
        'unit': value.unit,
    };
}

