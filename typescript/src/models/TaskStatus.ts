/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AbortedTaskStatus,
    instanceOfAbortedTaskStatus,
    AbortedTaskStatusFromJSON,
    AbortedTaskStatusFromJSONTyped,
    AbortedTaskStatusToJSON,
} from './AbortedTaskStatus';
import {
    CompletedTaskStatus,
    instanceOfCompletedTaskStatus,
    CompletedTaskStatusFromJSON,
    CompletedTaskStatusFromJSONTyped,
    CompletedTaskStatusToJSON,
} from './CompletedTaskStatus';
import {
    FailedTaskStatus,
    instanceOfFailedTaskStatus,
    FailedTaskStatusFromJSON,
    FailedTaskStatusFromJSONTyped,
    FailedTaskStatusToJSON,
} from './FailedTaskStatus';
import {
    RunningTaskStatus,
    instanceOfRunningTaskStatus,
    RunningTaskStatusFromJSON,
    RunningTaskStatusFromJSONTyped,
    RunningTaskStatusToJSON,
} from './RunningTaskStatus';

/**
 * @type TaskStatus
 * 
 * @export
 */
export type TaskStatus = { status: 'aborted' } & AbortedTaskStatus | { status: 'completed' } & CompletedTaskStatus | { status: 'failed' } & FailedTaskStatus | { status: 'running' } & RunningTaskStatus;

export function TaskStatusFromJSON(json: any): TaskStatus {
    return TaskStatusFromJSONTyped(json, false);
}

export function TaskStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['status']) {
        case 'aborted':
            return {...AbortedTaskStatusFromJSONTyped(json, true), status: 'aborted'};
        case 'completed':
            return {...CompletedTaskStatusFromJSONTyped(json, true), status: 'completed'};
        case 'failed':
            return {...FailedTaskStatusFromJSONTyped(json, true), status: 'failed'};
        case 'running':
            return {...RunningTaskStatusFromJSONTyped(json, true), status: 'running'};
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${json['status']}'`);
    }
}

export function TaskStatusToJSON(value?: TaskStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['status']) {
        case 'aborted':
            return AbortedTaskStatusToJSON(value);
        case 'completed':
            return CompletedTaskStatusToJSON(value);
        case 'failed':
            return FailedTaskStatusToJSON(value);
        case 'running':
            return RunningTaskStatusToJSON(value);
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${value['status']}'`);
    }

}

