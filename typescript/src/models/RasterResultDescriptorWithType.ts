/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RasterBandDescriptor } from './RasterBandDescriptor';
import {
    RasterBandDescriptorFromJSON,
    RasterBandDescriptorFromJSONTyped,
    RasterBandDescriptorToJSON,
} from './RasterBandDescriptor';
import type { RasterDataType } from './RasterDataType';
import {
    RasterDataTypeFromJSON,
    RasterDataTypeFromJSONTyped,
    RasterDataTypeToJSON,
} from './RasterDataType';
import type { SpatialPartition2D } from './SpatialPartition2D';
import {
    SpatialPartition2DFromJSON,
    SpatialPartition2DFromJSONTyped,
    SpatialPartition2DToJSON,
} from './SpatialPartition2D';
import type { SpatialResolution } from './SpatialResolution';
import {
    SpatialResolutionFromJSON,
    SpatialResolutionFromJSONTyped,
    SpatialResolutionToJSON,
} from './SpatialResolution';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
} from './TimeInterval';

/**
 * A `ResultDescriptor` for raster queries
 * @export
 * @interface RasterResultDescriptorWithType
 */
export interface RasterResultDescriptorWithType {
    /**
     * 
     * @type {Array<RasterBandDescriptor>}
     * @memberof RasterResultDescriptorWithType
     */
    bands: Array<RasterBandDescriptor>;
    /**
     * 
     * @type {SpatialPartition2D}
     * @memberof RasterResultDescriptorWithType
     */
    bbox?: SpatialPartition2D | null;
    /**
     * 
     * @type {RasterDataType}
     * @memberof RasterResultDescriptorWithType
     */
    dataType: RasterDataType;
    /**
     * 
     * @type {SpatialResolution}
     * @memberof RasterResultDescriptorWithType
     */
    resolution?: SpatialResolution | null;
    /**
     * 
     * @type {string}
     * @memberof RasterResultDescriptorWithType
     */
    spatialReference: string;
    /**
     * 
     * @type {TimeInterval}
     * @memberof RasterResultDescriptorWithType
     */
    time?: TimeInterval | null;
    /**
     * 
     * @type {string}
     * @memberof RasterResultDescriptorWithType
     */
    type: RasterResultDescriptorWithTypeTypeEnum;
}


/**
 * @export
 */
export const RasterResultDescriptorWithTypeTypeEnum = {
    Raster: 'raster'
} as const;
export type RasterResultDescriptorWithTypeTypeEnum = typeof RasterResultDescriptorWithTypeTypeEnum[keyof typeof RasterResultDescriptorWithTypeTypeEnum];


/**
 * Check if a given object implements the RasterResultDescriptorWithType interface.
 */
export function instanceOfRasterResultDescriptorWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bands" in value;
    isInstance = isInstance && "dataType" in value;
    isInstance = isInstance && "spatialReference" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function RasterResultDescriptorWithTypeFromJSON(json: any): RasterResultDescriptorWithType {
    return RasterResultDescriptorWithTypeFromJSONTyped(json, false);
}

export function RasterResultDescriptorWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RasterResultDescriptorWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bands': ((json['bands'] as Array<any>).map(RasterBandDescriptorFromJSON)),
        'bbox': !exists(json, 'bbox') ? undefined : SpatialPartition2DFromJSON(json['bbox']),
        'dataType': RasterDataTypeFromJSON(json['dataType']),
        'resolution': !exists(json, 'resolution') ? undefined : SpatialResolutionFromJSON(json['resolution']),
        'spatialReference': json['spatialReference'],
        'time': !exists(json, 'time') ? undefined : TimeIntervalFromJSON(json['time']),
        'type': json['type'],
    };
}

export function RasterResultDescriptorWithTypeToJSON(value?: RasterResultDescriptorWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bands': ((value.bands as Array<any>).map(RasterBandDescriptorToJSON)),
        'bbox': SpatialPartition2DToJSON(value.bbox),
        'dataType': RasterDataTypeToJSON(value.dataType),
        'resolution': SpatialResolutionToJSON(value.resolution),
        'spatialReference': value.spatialReference,
        'time': TimeIntervalToJSON(value.time),
        'type': value.type,
    };
}

