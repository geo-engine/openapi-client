"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GdalMetaDataListWithTypeToJSON = exports.GdalMetaDataListWithTypeFromJSONTyped = exports.GdalMetaDataListWithTypeFromJSON = exports.instanceOfGdalMetaDataListWithType = exports.GdalMetaDataListWithTypeTypeEnum = void 0;
const GdalLoadingInfoTemporalSlice_1 = require("./GdalLoadingInfoTemporalSlice");
const RasterResultDescriptor_1 = require("./RasterResultDescriptor");
/**
 * @export
 */
exports.GdalMetaDataListWithTypeTypeEnum = {
    GdalMetaDataList: 'GdalMetaDataList'
};
/**
 * Check if a given object implements the GdalMetaDataListWithType interface.
 */
function instanceOfGdalMetaDataListWithType(value) {
    let isInstance = true;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "resultDescriptor" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
exports.instanceOfGdalMetaDataListWithType = instanceOfGdalMetaDataListWithType;
function GdalMetaDataListWithTypeFromJSON(json) {
    return GdalMetaDataListWithTypeFromJSONTyped(json, false);
}
exports.GdalMetaDataListWithTypeFromJSON = GdalMetaDataListWithTypeFromJSON;
function GdalMetaDataListWithTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'params': (json['params'].map(GdalLoadingInfoTemporalSlice_1.GdalLoadingInfoTemporalSliceFromJSON)),
        'resultDescriptor': (0, RasterResultDescriptor_1.RasterResultDescriptorFromJSON)(json['resultDescriptor']),
        'type': json['type'],
    };
}
exports.GdalMetaDataListWithTypeFromJSONTyped = GdalMetaDataListWithTypeFromJSONTyped;
function GdalMetaDataListWithTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'params': (value.params.map(GdalLoadingInfoTemporalSlice_1.GdalLoadingInfoTemporalSliceToJSON)),
        'resultDescriptor': (0, RasterResultDescriptor_1.RasterResultDescriptorToJSON)(value.resultDescriptor),
        'type': value.type,
    };
}
exports.GdalMetaDataListWithTypeToJSON = GdalMetaDataListWithTypeToJSON;
