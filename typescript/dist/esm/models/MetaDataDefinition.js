/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GdalMetaDataListFromJSONTyped, GdalMetaDataListToJSON, } from './GdalMetaDataList';
import { GdalMetaDataRegularFromJSONTyped, GdalMetaDataRegularToJSON, } from './GdalMetaDataRegular';
import { GdalMetaDataStaticFromJSONTyped, GdalMetaDataStaticToJSON, } from './GdalMetaDataStatic';
import { GdalMetadataNetCdfCfFromJSONTyped, GdalMetadataNetCdfCfToJSON, } from './GdalMetadataNetCdfCf';
import { MockMetaDataFromJSONTyped, MockMetaDataToJSON, } from './MockMetaData';
import { OgrMetaDataFromJSONTyped, OgrMetaDataToJSON, } from './OgrMetaData';
export function MetaDataDefinitionFromJSON(json) {
    return MetaDataDefinitionFromJSONTyped(json, false);
}
export function MetaDataDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return Object.assign({}, GdalMetaDataListFromJSONTyped(json, true), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataNetCdfCf':
            return Object.assign({}, GdalMetadataNetCdfCfFromJSONTyped(json, true), { type: 'GdalMetaDataNetCdfCf' });
        case 'GdalMetaDataRegular':
            return Object.assign({}, GdalMetaDataRegularFromJSONTyped(json, true), { type: 'GdalMetaDataRegular' });
        case 'GdalStatic':
            return Object.assign({}, GdalMetaDataStaticFromJSONTyped(json, true), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign({}, MockMetaDataFromJSONTyped(json, true), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign({}, OgrMetaDataFromJSONTyped(json, true), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}
export function MetaDataDefinitionToJSON(json) {
    return MetaDataDefinitionToJSONTyped(json, false);
}
export function MetaDataDefinitionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return Object.assign({}, GdalMetaDataListToJSON(value), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataNetCdfCf':
            return Object.assign({}, GdalMetadataNetCdfCfToJSON(value), { type: 'GdalMetaDataNetCdfCf' });
        case 'GdalMetaDataRegular':
            return Object.assign({}, GdalMetaDataRegularToJSON(value), { type: 'GdalMetaDataRegular' });
        case 'GdalStatic':
            return Object.assign({}, GdalMetaDataStaticToJSON(value), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign({}, MockMetaDataToJSON(value), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign({}, OgrMetaDataToJSON(value), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }
}
