/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCapabilitiesFormat,
  GetCapabilitiesRequest,
  GetLegendGraphicRequest,
  GetMapExceptionFormat,
  GetMapFormat,
  GetMapRequest,
  WmsService,
  WmsVersion,
} from '../models/index';
import {
    GetCapabilitiesFormatFromJSON,
    GetCapabilitiesFormatToJSON,
    GetCapabilitiesRequestFromJSON,
    GetCapabilitiesRequestToJSON,
    GetLegendGraphicRequestFromJSON,
    GetLegendGraphicRequestToJSON,
    GetMapExceptionFormatFromJSON,
    GetMapExceptionFormatToJSON,
    GetMapFormatFromJSON,
    GetMapFormatToJSON,
    GetMapRequestFromJSON,
    GetMapRequestToJSON,
    WmsServiceFromJSON,
    WmsServiceToJSON,
    WmsVersionFromJSON,
    WmsVersionToJSON,
} from '../models/index';

export interface WmsCapabilitiesHandlerRequest {
    workflow: string;
    version: WmsVersion | null;
    service: WmsService;
    request: GetCapabilitiesRequest;
    format: GetCapabilitiesFormat | null;
}

export interface WmsLegendGraphicHandlerRequest {
    workflow: string;
    version: WmsVersion;
    service: WmsService;
    request: GetLegendGraphicRequest;
    layer: string;
}

export interface WmsMapHandlerRequest {
    workflow: string;
    version: WmsVersion;
    service: WmsService;
    request: GetMapRequest;
    width: number;
    height: number;
    bbox: string;
    format: GetMapFormat;
    layers: string;
    styles: string;
    crs?: string | null;
    time?: string;
    transparent?: boolean | null;
    bgcolor?: string | null;
    sld?: string | null;
    sldBody?: string | null;
    elevation?: string | null;
    exceptions?: GetMapExceptionFormat | null;
}

/**
 * 
 */
export class OGCWMSApi extends runtime.BaseAPI {

    /**
     * Get WMS Capabilities
     * Get WMS Capabilities
     */
    async wmsCapabilitiesHandlerRaw(requestParameters: WmsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wmsCapabilitiesHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wmsCapabilitiesHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wmsCapabilitiesHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wmsCapabilitiesHandler.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling wmsCapabilitiesHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetCapabilities`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"request"}}`, encodeURIComponent(String(requestParameters.request))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get WMS Capabilities
     * Get WMS Capabilities
     */
    async wmsCapabilitiesHandler(requestParameters: WmsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.wmsCapabilitiesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get WMS Legend Graphic
     * Get WMS Legend Graphic
     */
    async wmsLegendGraphicHandlerRaw(requestParameters: WmsLegendGraphicHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wmsLegendGraphicHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wmsLegendGraphicHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wmsLegendGraphicHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wmsLegendGraphicHandler.');
        }

        if (requestParameters.layer === null || requestParameters.layer === undefined) {
            throw new runtime.RequiredError('layer','Required parameter requestParameters.layer was null or undefined when calling wmsLegendGraphicHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetLegendGraphic`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"request"}}`, encodeURIComponent(String(requestParameters.request))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters.layer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get WMS Legend Graphic
     * Get WMS Legend Graphic
     */
    async wmsLegendGraphicHandler(requestParameters: WmsLegendGraphicHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.wmsLegendGraphicHandlerRaw(requestParameters, initOverrides);
    }

    /**
     * Get WMS Map
     * Get WMS Map
     */
    async wmsMapHandlerRaw(requestParameters: WmsMapHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.width === null || requestParameters.width === undefined) {
            throw new runtime.RequiredError('width','Required parameter requestParameters.width was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new runtime.RequiredError('height','Required parameter requestParameters.height was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.bbox === null || requestParameters.bbox === undefined) {
            throw new runtime.RequiredError('bbox','Required parameter requestParameters.bbox was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.layers === null || requestParameters.layers === undefined) {
            throw new runtime.RequiredError('layers','Required parameter requestParameters.layers was null or undefined when calling wmsMapHandler.');
        }

        if (requestParameters.styles === null || requestParameters.styles === undefined) {
            throw new runtime.RequiredError('styles','Required parameter requestParameters.styles was null or undefined when calling wmsMapHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.bbox !== undefined) {
            queryParameters['bbox'] = requestParameters.bbox;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.layers !== undefined) {
            queryParameters['layers'] = requestParameters.layers;
        }

        if (requestParameters.crs !== undefined) {
            queryParameters['crs'] = requestParameters.crs;
        }

        if (requestParameters.styles !== undefined) {
            queryParameters['styles'] = requestParameters.styles;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.transparent !== undefined) {
            queryParameters['transparent'] = requestParameters.transparent;
        }

        if (requestParameters.bgcolor !== undefined) {
            queryParameters['bgcolor'] = requestParameters.bgcolor;
        }

        if (requestParameters.sld !== undefined) {
            queryParameters['sld'] = requestParameters.sld;
        }

        if (requestParameters.sldBody !== undefined) {
            queryParameters['sld_body'] = requestParameters.sldBody;
        }

        if (requestParameters.elevation !== undefined) {
            queryParameters['elevation'] = requestParameters.elevation;
        }

        if (requestParameters.exceptions !== undefined) {
            queryParameters['exceptions'] = requestParameters.exceptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetMap`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get WMS Map
     * Get WMS Map
     */
    async wmsMapHandler(requestParameters: WmsMapHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.wmsMapHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
