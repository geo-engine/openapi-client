"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataIdFromJSON = DataIdFromJSON;
exports.DataIdFromJSONTyped = DataIdFromJSONTyped;
exports.DataIdToJSON = DataIdToJSON;
exports.DataIdToJSONTyped = DataIdToJSONTyped;
const ExternalDataId_1 = require("./ExternalDataId");
const InternalDataId_1 = require("./InternalDataId");
function DataIdFromJSON(json) {
    return DataIdFromJSONTyped(json, false);
}
function DataIdFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'external':
            return Object.assign({}, (0, ExternalDataId_1.ExternalDataIdFromJSONTyped)(json, true), { type: 'external' });
        case 'internal':
            return Object.assign({}, (0, InternalDataId_1.InternalDataIdFromJSONTyped)(json, true), { type: 'internal' });
        default:
            throw new Error(`No variant of DataId exists with 'type=${json['type']}'`);
    }
}
function DataIdToJSON(json) {
    return DataIdToJSONTyped(json, false);
}
function DataIdToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'external':
            return Object.assign({}, (0, ExternalDataId_1.ExternalDataIdToJSON)(value), { type: 'external' });
        case 'internal':
            return Object.assign({}, (0, InternalDataId_1.InternalDataIdToJSON)(value), { type: 'internal' });
        default:
            throw new Error(`No variant of DataId exists with 'type=${value['type']}'`);
    }
}
