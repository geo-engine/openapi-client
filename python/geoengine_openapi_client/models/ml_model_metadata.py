# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from geoengine_openapi_client.models.ml_model_input_no_data_handling import MlModelInputNoDataHandling
from geoengine_openapi_client.models.ml_model_output_no_data_handling import MlModelOutputNoDataHandling
from geoengine_openapi_client.models.ml_tensor_shape3_d import MlTensorShape3D
from geoengine_openapi_client.models.raster_data_type import RasterDataType
from typing import Optional, Set
from typing_extensions import Self

class MlModelMetadata(BaseModel):
    """
    MlModelMetadata
    """ # noqa: E501
    input_no_data_handling: MlModelInputNoDataHandling
    input_shape: MlTensorShape3D
    input_type: RasterDataType
    output_no_data_handling: MlModelOutputNoDataHandling
    output_shape: MlTensorShape3D
    output_type: RasterDataType
    __properties: ClassVar[List[str]] = ["input_no_data_handling", "input_shape", "input_type", "output_no_data_handling", "output_shape", "output_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MlModelMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_no_data_handling
        if self.input_no_data_handling:
            _dict['input_no_data_handling'] = self.input_no_data_handling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_shape
        if self.input_shape:
            _dict['input_shape'] = self.input_shape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_no_data_handling
        if self.output_no_data_handling:
            _dict['output_no_data_handling'] = self.output_no_data_handling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_shape
        if self.output_shape:
            _dict['output_shape'] = self.output_shape.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MlModelMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input_no_data_handling": MlModelInputNoDataHandling.from_dict(obj["input_no_data_handling"]) if obj.get("input_no_data_handling") is not None else None,
            "input_shape": MlTensorShape3D.from_dict(obj["input_shape"]) if obj.get("input_shape") is not None else None,
            "input_type": obj.get("input_type"),
            "output_no_data_handling": MlModelOutputNoDataHandling.from_dict(obj["output_no_data_handling"]) if obj.get("output_no_data_handling") is not None else None,
            "output_shape": MlTensorShape3D.from_dict(obj["output_shape"]) if obj.get("output_shape") is not None else None,
            "output_type": obj.get("output_type")
        })
        return _obj


