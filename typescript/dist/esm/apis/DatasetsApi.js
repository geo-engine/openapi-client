/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AutoCreateDatasetToJSON, CreateDatasetToJSON, DatasetFromJSON, DatasetListingFromJSON, DatasetNameResponseFromJSON, MetaDataDefinitionFromJSON, MetaDataDefinitionToJSON, MetaDataSuggestionFromJSON, ProvenancesToJSON, SuggestMetaDataToJSON, SymbologyToJSON, UpdateDatasetToJSON, VolumeFromJSON, VolumeFileLayersResponseFromJSON, } from '../models/index';
/**
 *
 */
export class DatasetsApi extends runtime.BaseAPI {
    /**
     * Creates a new dataset using previously uploaded files. The format of the files will be automatically detected when possible.
     */
    autoCreateDatasetHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['autoCreateDataset'] == null) {
                throw new runtime.RequiredError('autoCreateDataset', 'Required parameter "autoCreateDataset" was null or undefined when calling autoCreateDatasetHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/auto`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AutoCreateDatasetToJSON(requestParameters['autoCreateDataset']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DatasetNameResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new dataset using previously uploaded files. The format of the files will be automatically detected when possible.
     */
    autoCreateDatasetHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.autoCreateDatasetHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new dataset referencing files. Users can reference previously uploaded files. Admins can reference files from a volume.
     */
    createDatasetHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['createDataset'] == null) {
                throw new runtime.RequiredError('createDataset', 'Required parameter "createDataset" was null or undefined when calling createDatasetHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateDatasetToJSON(requestParameters['createDataset']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DatasetNameResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new dataset referencing files. Users can reference previously uploaded files. Admins can reference files from a volume.
     */
    createDatasetHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createDatasetHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a dataset
     */
    deleteDatasetHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling deleteDatasetHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a dataset
     */
    deleteDatasetHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteDatasetHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves details about a dataset using the internal name.
     */
    getDatasetHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling getDatasetHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves details about a dataset using the internal name.
     */
    getDatasetHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDatasetHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the loading information of a dataset
     */
    getLoadingInfoHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling getLoadingInfoHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}/loadingInfo`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => MetaDataDefinitionFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves the loading information of a dataset
     */
    getLoadingInfoHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLoadingInfoHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists available datasets.
     */
    listDatasetsHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['order'] == null) {
                throw new runtime.RequiredError('order', 'Required parameter "order" was null or undefined when calling listDatasetsHandler().');
            }
            if (requestParameters['offset'] == null) {
                throw new runtime.RequiredError('offset', 'Required parameter "offset" was null or undefined when calling listDatasetsHandler().');
            }
            if (requestParameters['limit'] == null) {
                throw new runtime.RequiredError('limit', 'Required parameter "limit" was null or undefined when calling listDatasetsHandler().');
            }
            const queryParameters = {};
            if (requestParameters['filter'] != null) {
                queryParameters['filter'] = requestParameters['filter'];
            }
            if (requestParameters['order'] != null) {
                queryParameters['order'] = requestParameters['order'];
            }
            if (requestParameters['offset'] != null) {
                queryParameters['offset'] = requestParameters['offset'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['tags'] != null) {
                queryParameters['tags'] = requestParameters['tags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/datasets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetListingFromJSON));
        });
    }
    /**
     * Lists available datasets.
     */
    listDatasetsHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listDatasetsHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the layers of a file in a volume.
     */
    listVolumeFileLayersHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['volumeName'] == null) {
                throw new runtime.RequiredError('volumeName', 'Required parameter "volumeName" was null or undefined when calling listVolumeFileLayersHandler().');
            }
            if (requestParameters['fileName'] == null) {
                throw new runtime.RequiredError('fileName', 'Required parameter "fileName" was null or undefined when calling listVolumeFileLayersHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/volumes/{volume_name}/files/{file_name}/layers`.replace(`{${"volume_name"}}`, encodeURIComponent(String(requestParameters['volumeName']))).replace(`{${"file_name"}}`, encodeURIComponent(String(requestParameters['fileName']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => VolumeFileLayersResponseFromJSON(jsonValue));
        });
    }
    /**
     * List the layers of a file in a volume.
     */
    listVolumeFileLayersHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listVolumeFileLayersHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists available volumes.
     */
    listVolumesHandlerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/volumes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolumeFromJSON));
        });
    }
    /**
     * Lists available volumes.
     */
    listVolumesHandler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listVolumesHandlerRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Inspects an upload and suggests metadata that can be used when creating a new dataset based on it. Tries to automatically detect the main file and layer name if not specified.
     */
    suggestMetaDataHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['suggestMetaData'] == null) {
                throw new runtime.RequiredError('suggestMetaData', 'Required parameter "suggestMetaData" was null or undefined when calling suggestMetaDataHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/suggest`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SuggestMetaDataToJSON(requestParameters['suggestMetaData']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => MetaDataSuggestionFromJSON(jsonValue));
        });
    }
    /**
     * Inspects an upload and suggests metadata that can be used when creating a new dataset based on it. Tries to automatically detect the main file and layer name if not specified.
     */
    suggestMetaDataHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.suggestMetaDataHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update details about a dataset using the internal name.
     */
    updateDatasetHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling updateDatasetHandler().');
            }
            if (requestParameters['updateDataset'] == null) {
                throw new runtime.RequiredError('updateDataset', 'Required parameter "updateDataset" was null or undefined when calling updateDatasetHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateDatasetToJSON(requestParameters['updateDataset']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update details about a dataset using the internal name.
     */
    updateDatasetHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateDatasetHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    updateDatasetProvenanceHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling updateDatasetProvenanceHandler().');
            }
            if (requestParameters['provenances'] == null) {
                throw new runtime.RequiredError('provenances', 'Required parameter "provenances" was null or undefined when calling updateDatasetProvenanceHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}/provenance`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ProvenancesToJSON(requestParameters['provenances']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    updateDatasetProvenanceHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateDatasetProvenanceHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Updates the dataset\'s symbology
     */
    updateDatasetSymbologyHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling updateDatasetSymbologyHandler().');
            }
            if (requestParameters['symbology'] == null) {
                throw new runtime.RequiredError('symbology', 'Required parameter "symbology" was null or undefined when calling updateDatasetSymbologyHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}/symbology`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SymbologyToJSON(requestParameters['symbology']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Updates the dataset\'s symbology
     */
    updateDatasetSymbologyHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateDatasetSymbologyHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Updates the dataset\'s loading info
     */
    updateLoadingInfoHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['dataset'] == null) {
                throw new runtime.RequiredError('dataset', 'Required parameter "dataset" was null or undefined when calling updateLoadingInfoHandler().');
            }
            if (requestParameters['metaDataDefinition'] == null) {
                throw new runtime.RequiredError('metaDataDefinition', 'Required parameter "metaDataDefinition" was null or undefined when calling updateLoadingInfoHandler().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/dataset/{dataset}/loadingInfo`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: MetaDataDefinitionToJSON(requestParameters['metaDataDefinition']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Updates the dataset\'s loading info
     */
    updateLoadingInfoHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateLoadingInfoHandlerRaw(requestParameters, initOverrides);
        });
    }
}
