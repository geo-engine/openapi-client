"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetListingToJSONTyped = exports.DatasetListingToJSON = exports.DatasetListingFromJSONTyped = exports.DatasetListingFromJSON = exports.instanceOfDatasetListing = void 0;
const Symbology_1 = require("./Symbology");
const TypedResultDescriptor_1 = require("./TypedResultDescriptor");
/**
 * Check if a given object implements the DatasetListing interface.
 */
function instanceOfDatasetListing(value) {
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('displayName' in value) || value['displayName'] === undefined)
        return false;
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('resultDescriptor' in value) || value['resultDescriptor'] === undefined)
        return false;
    if (!('sourceOperator' in value) || value['sourceOperator'] === undefined)
        return false;
    if (!('tags' in value) || value['tags'] === undefined)
        return false;
    return true;
}
exports.instanceOfDatasetListing = instanceOfDatasetListing;
function DatasetListingFromJSON(json) {
    return DatasetListingFromJSONTyped(json, false);
}
exports.DatasetListingFromJSON = DatasetListingFromJSON;
function DatasetListingFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'description': json['description'],
        'displayName': json['displayName'],
        'id': json['id'],
        'name': json['name'],
        'resultDescriptor': (0, TypedResultDescriptor_1.TypedResultDescriptorFromJSON)(json['resultDescriptor']),
        'sourceOperator': json['sourceOperator'],
        'symbology': json['symbology'] == null ? undefined : (0, Symbology_1.SymbologyFromJSON)(json['symbology']),
        'tags': json['tags'],
    };
}
exports.DatasetListingFromJSONTyped = DatasetListingFromJSONTyped;
function DatasetListingToJSON(json) {
    return DatasetListingToJSONTyped(json, false);
}
exports.DatasetListingToJSON = DatasetListingToJSON;
function DatasetListingToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'description': value['description'],
        'displayName': value['displayName'],
        'id': value['id'],
        'name': value['name'],
        'resultDescriptor': (0, TypedResultDescriptor_1.TypedResultDescriptorToJSON)(value['resultDescriptor']),
        'sourceOperator': value['sourceOperator'],
        'symbology': (0, Symbology_1.SymbologyToJSON)(value['symbology']),
        'tags': value['tags'],
    };
}
exports.DatasetListingToJSONTyped = DatasetListingToJSONTyped;
