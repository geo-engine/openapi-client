/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MlModel,
  MlModelNameResponse,
} from '../models/index';
import {
    MlModelFromJSON,
    MlModelToJSON,
    MlModelNameResponseFromJSON,
    MlModelNameResponseToJSON,
} from '../models/index';

export interface AddMlModelRequest {
    mlModel: MlModel;
}

export interface GetMlModelRequest {
    modelName: string;
}

/**
 * 
 */
export class MLApi extends runtime.BaseAPI {

    /**
     * Create a new ml model.
     */
    async addMlModelRaw(requestParameters: AddMlModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MlModelNameResponse>> {
        if (requestParameters.mlModel === null || requestParameters.mlModel === undefined) {
            throw new runtime.RequiredError('mlModel','Required parameter requestParameters.mlModel was null or undefined when calling addMlModel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ml/models`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MlModelToJSON(requestParameters.mlModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MlModelNameResponseFromJSON(jsonValue));
    }

    /**
     * Create a new ml model.
     */
    async addMlModel(requestParameters: AddMlModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MlModelNameResponse> {
        const response = await this.addMlModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ml model by name.
     */
    async getMlModelRaw(requestParameters: GetMlModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MlModel>> {
        if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
            throw new runtime.RequiredError('modelName','Required parameter requestParameters.modelName was null or undefined when calling getMlModel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ml/models/{model_name}`.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters.modelName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MlModelFromJSON(jsonValue));
    }

    /**
     * Get ml model by name.
     */
    async getMlModel(requestParameters: GetMlModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MlModel> {
        const response = await this.getMlModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ml models.
     */
    async listMlModelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MlModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ml/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MlModelFromJSON));
    }

    /**
     * List ml models.
     */
    async listMlModels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MlModel>> {
        const response = await this.listMlModelsRaw(initOverrides);
        return await response.value();
    }

}
