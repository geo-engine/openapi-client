"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatusToJSONTyped = exports.TaskStatusToJSON = exports.TaskStatusFromJSONTyped = exports.TaskStatusFromJSON = void 0;
const TaskStatusAborted_1 = require("./TaskStatusAborted");
const TaskStatusCompleted_1 = require("./TaskStatusCompleted");
const TaskStatusFailed_1 = require("./TaskStatusFailed");
const TaskStatusRunning_1 = require("./TaskStatusRunning");
function TaskStatusFromJSON(json) {
    return TaskStatusFromJSONTyped(json, false);
}
exports.TaskStatusFromJSON = TaskStatusFromJSON;
function TaskStatusFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['status']) {
        case 'aborted':
            return Object.assign({}, (0, TaskStatusAborted_1.TaskStatusAbortedFromJSONTyped)(json, true), { status: 'aborted' });
        case 'completed':
            return Object.assign({}, (0, TaskStatusCompleted_1.TaskStatusCompletedFromJSONTyped)(json, true), { status: 'completed' });
        case 'failed':
            return Object.assign({}, (0, TaskStatusFailed_1.TaskStatusFailedFromJSONTyped)(json, true), { status: 'failed' });
        case 'running':
            return Object.assign({}, (0, TaskStatusRunning_1.TaskStatusRunningFromJSONTyped)(json, true), { status: 'running' });
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${json['status']}'`);
    }
}
exports.TaskStatusFromJSONTyped = TaskStatusFromJSONTyped;
function TaskStatusToJSON(json) {
    return TaskStatusToJSONTyped(json, false);
}
exports.TaskStatusToJSON = TaskStatusToJSON;
function TaskStatusToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['status']) {
        case 'aborted':
            return Object.assign({}, (0, TaskStatusAborted_1.TaskStatusAbortedToJSON)(value), { status: 'aborted' });
        case 'completed':
            return Object.assign({}, (0, TaskStatusCompleted_1.TaskStatusCompletedToJSON)(value), { status: 'completed' });
        case 'failed':
            return Object.assign({}, (0, TaskStatusFailed_1.TaskStatusFailedToJSON)(value), { status: 'failed' });
        case 'running':
            return Object.assign({}, (0, TaskStatusRunning_1.TaskStatusRunningToJSON)(value), { status: 'running' });
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${value['status']}'`);
    }
}
exports.TaskStatusToJSONTyped = TaskStatusToJSONTyped;
