"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgrSourceDatasetTimeTypeToJSONTyped = exports.OgrSourceDatasetTimeTypeToJSON = exports.OgrSourceDatasetTimeTypeFromJSONTyped = exports.OgrSourceDatasetTimeTypeFromJSON = void 0;
const OgrSourceDatasetTimeTypeNone_1 = require("./OgrSourceDatasetTimeTypeNone");
const OgrSourceDatasetTimeTypeStart_1 = require("./OgrSourceDatasetTimeTypeStart");
const OgrSourceDatasetTimeTypeStartDuration_1 = require("./OgrSourceDatasetTimeTypeStartDuration");
const OgrSourceDatasetTimeTypeStartEnd_1 = require("./OgrSourceDatasetTimeTypeStartEnd");
function OgrSourceDatasetTimeTypeFromJSON(json) {
    return OgrSourceDatasetTimeTypeFromJSONTyped(json, false);
}
exports.OgrSourceDatasetTimeTypeFromJSON = OgrSourceDatasetTimeTypeFromJSON;
function OgrSourceDatasetTimeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'none':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeNone_1.OgrSourceDatasetTimeTypeNoneFromJSONTyped)(json, true), { type: 'none' });
        case 'start':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStart_1.OgrSourceDatasetTimeTypeStartFromJSONTyped)(json, true), { type: 'start' });
        case 'start+duration':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStartDuration_1.OgrSourceDatasetTimeTypeStartDurationFromJSONTyped)(json, true), { type: 'start+duration' });
        case 'start+end':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStartEnd_1.OgrSourceDatasetTimeTypeStartEndFromJSONTyped)(json, true), { type: 'start+end' });
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${json['type']}'`);
    }
}
exports.OgrSourceDatasetTimeTypeFromJSONTyped = OgrSourceDatasetTimeTypeFromJSONTyped;
function OgrSourceDatasetTimeTypeToJSON(json) {
    return OgrSourceDatasetTimeTypeToJSONTyped(json, false);
}
exports.OgrSourceDatasetTimeTypeToJSON = OgrSourceDatasetTimeTypeToJSON;
function OgrSourceDatasetTimeTypeToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'none':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeNone_1.OgrSourceDatasetTimeTypeNoneToJSON)(value), { type: 'none' });
        case 'start':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStart_1.OgrSourceDatasetTimeTypeStartToJSON)(value), { type: 'start' });
        case 'start+duration':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStartDuration_1.OgrSourceDatasetTimeTypeStartDurationToJSON)(value), { type: 'start+duration' });
        case 'start+end':
            return Object.assign({}, (0, OgrSourceDatasetTimeTypeStartEnd_1.OgrSourceDatasetTimeTypeStartEndToJSON)(value), { type: 'start+end' });
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${value['type']}'`);
    }
}
exports.OgrSourceDatasetTimeTypeToJSONTyped = OgrSourceDatasetTimeTypeToJSONTyped;
