/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { LinearGradient } from './LinearGradient';
import {
    instanceOfLinearGradient,
    LinearGradientFromJSON,
    LinearGradientFromJSONTyped,
    LinearGradientToJSON,
} from './LinearGradient';
import type { LogarithmicGradient } from './LogarithmicGradient';
import {
    instanceOfLogarithmicGradient,
    LogarithmicGradientFromJSON,
    LogarithmicGradientFromJSONTyped,
    LogarithmicGradientToJSON,
} from './LogarithmicGradient';
import type { PaletteColorizer } from './PaletteColorizer';
import {
    instanceOfPaletteColorizer,
    PaletteColorizerFromJSON,
    PaletteColorizerFromJSONTyped,
    PaletteColorizerToJSON,
} from './PaletteColorizer';

/**
 * @type Colorizer
 * A colorizer specifies a mapping between raster values and an output image
 * There are different variants that perform different kinds of mapping.
 * @export
 */
export type Colorizer = { type: 'linearGradient' } & LinearGradient | { type: 'logarithmicGradient' } & LogarithmicGradient | { type: 'palette' } & PaletteColorizer;

export function ColorizerFromJSON(json: any): Colorizer {
    return ColorizerFromJSONTyped(json, false);
}

export function ColorizerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Colorizer {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'linearGradient':
            return Object.assign({}, LinearGradientFromJSONTyped(json, true), { type: 'linearGradient' } as const);
        case 'logarithmicGradient':
            return Object.assign({}, LogarithmicGradientFromJSONTyped(json, true), { type: 'logarithmicGradient' } as const);
        case 'palette':
            return Object.assign({}, PaletteColorizerFromJSONTyped(json, true), { type: 'palette' } as const);
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${json['type']}'`);
    }
}

export function ColorizerToJSON(json: any): any {
    return ColorizerToJSONTyped(json, false);
}

export function ColorizerToJSONTyped(value?: Colorizer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'linearGradient':
            return Object.assign({}, LinearGradientToJSON(value), { type: 'linearGradient' } as const);
        case 'logarithmicGradient':
            return Object.assign({}, LogarithmicGradientToJSON(value), { type: 'logarithmicGradient' } as const);
        case 'palette':
            return Object.assign({}, PaletteColorizerToJSON(value), { type: 'palette' } as const);
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${value['type']}'`);
    }

}

