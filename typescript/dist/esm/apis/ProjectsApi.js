/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddCollection200ResponseFromJSON, CreateProjectToJSON, ProjectFromJSON, ProjectListingFromJSON, ProjectVersionFromJSON, UpdateProjectToJSON, } from '../models/index';
/**
 *
 */
export class ProjectsApi extends runtime.BaseAPI {
    /**
     * Create a new project for the user.
     * Create a new project for the user.
     */
    createProjectHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.createProject === null || requestParameters.createProject === undefined) {
                throw new runtime.RequiredError('createProject', 'Required parameter requestParameters.createProject was null or undefined when calling createProjectHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateProjectToJSON(requestParameters.createProject),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AddCollection200ResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create a new project for the user.
     * Create a new project for the user.
     */
    createProjectHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createProjectHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a project.
     * Deletes a project.
     */
    deleteProjectHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.project === null || requestParameters.project === undefined) {
                throw new runtime.RequiredError('project', 'Required parameter requestParameters.project was null or undefined when calling deleteProjectHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project/{project}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a project.
     * Deletes a project.
     */
    deleteProjectHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteProjectHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     * List all projects accessible to the user that match the selected criteria.
     * List all projects accessible to the user that match the selected criteria.
     */
    listProjectsHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.order === null || requestParameters.order === undefined) {
                throw new runtime.RequiredError('order', 'Required parameter requestParameters.order was null or undefined when calling listProjectsHandler.');
            }
            if (requestParameters.offset === null || requestParameters.offset === undefined) {
                throw new runtime.RequiredError('offset', 'Required parameter requestParameters.offset was null or undefined when calling listProjectsHandler.');
            }
            if (requestParameters.limit === null || requestParameters.limit === undefined) {
                throw new runtime.RequiredError('limit', 'Required parameter requestParameters.limit was null or undefined when calling listProjectsHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/projects`.replace(`{${"order"}}`, encodeURIComponent(String(requestParameters.order))).replace(`{${"offset"}}`, encodeURIComponent(String(requestParameters.offset))).replace(`{${"limit"}}`, encodeURIComponent(String(requestParameters.limit))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectListingFromJSON));
        });
    }
    /**
     * List all projects accessible to the user that match the selected criteria.
     * List all projects accessible to the user that match the selected criteria.
     */
    listProjectsHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listProjectsHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves details about the latest version of a project.
     * Retrieves details about the latest version of a project.
     */
    loadProjectLatestHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.project === null || requestParameters.project === undefined) {
                throw new runtime.RequiredError('project', 'Required parameter requestParameters.project was null or undefined when calling loadProjectLatestHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project/{project}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves details about the latest version of a project.
     * Retrieves details about the latest version of a project.
     */
    loadProjectLatestHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loadProjectLatestHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves details about the given version of a project.
     * Retrieves details about the given version of a project.
     */
    loadProjectVersionHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.project === null || requestParameters.project === undefined) {
                throw new runtime.RequiredError('project', 'Required parameter requestParameters.project was null or undefined when calling loadProjectVersionHandler.');
            }
            if (requestParameters.version === null || requestParameters.version === undefined) {
                throw new runtime.RequiredError('version', 'Required parameter requestParameters.version was null or undefined when calling loadProjectVersionHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project/{project}/{version}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves details about the given version of a project.
     * Retrieves details about the given version of a project.
     */
    loadProjectVersionHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loadProjectVersionHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists all available versions of a project.
     * Lists all available versions of a project.
     */
    projectVersionsHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.project === null || requestParameters.project === undefined) {
                throw new runtime.RequiredError('project', 'Required parameter requestParameters.project was null or undefined when calling projectVersionsHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project/{project}/versions`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectVersionFromJSON));
        });
    }
    /**
     * Lists all available versions of a project.
     * Lists all available versions of a project.
     */
    projectVersionsHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectVersionsHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates a project. This will create a new version.
     * Updates a project.
     */
    updateProjectHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.project === null || requestParameters.project === undefined) {
                throw new runtime.RequiredError('project', 'Required parameter requestParameters.project was null or undefined when calling updateProjectHandler.');
            }
            if (requestParameters.updateProject === null || requestParameters.updateProject === undefined) {
                throw new runtime.RequiredError('updateProject', 'Required parameter requestParameters.updateProject was null or undefined when calling updateProjectHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/project/{project}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateProjectToJSON(requestParameters.updateProject),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Updates a project. This will create a new version.
     * Updates a project.
     */
    updateProjectHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateProjectHandlerRaw(requestParameters, initOverrides);
        });
    }
}
