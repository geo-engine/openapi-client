/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    TypedPlotResultDescriptor,
    instanceOfTypedPlotResultDescriptor,
    TypedPlotResultDescriptorFromJSON,
    TypedPlotResultDescriptorFromJSONTyped,
    TypedPlotResultDescriptorToJSON,
} from './TypedPlotResultDescriptor';
import {
    TypedRasterResultDescriptor,
    instanceOfTypedRasterResultDescriptor,
    TypedRasterResultDescriptorFromJSON,
    TypedRasterResultDescriptorFromJSONTyped,
    TypedRasterResultDescriptorToJSON,
} from './TypedRasterResultDescriptor';
import {
    TypedVectorResultDescriptor,
    instanceOfTypedVectorResultDescriptor,
    TypedVectorResultDescriptorFromJSON,
    TypedVectorResultDescriptorFromJSONTyped,
    TypedVectorResultDescriptorToJSON,
} from './TypedVectorResultDescriptor';

/**
 * @type TypedResultDescriptor
 * 
 * @export
 */
export type TypedResultDescriptor = { type: 'plot' } & TypedPlotResultDescriptor | { type: 'raster' } & TypedRasterResultDescriptor | { type: 'vector' } & TypedVectorResultDescriptor;

export function TypedResultDescriptorFromJSON(json: any): TypedResultDescriptor {
    return TypedResultDescriptorFromJSONTyped(json, false);
}

export function TypedResultDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedResultDescriptor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'plot':
            return {...TypedPlotResultDescriptorFromJSONTyped(json, true), type: 'plot'};
        case 'raster':
            return {...TypedRasterResultDescriptorFromJSONTyped(json, true), type: 'raster'};
        case 'vector':
            return {...TypedVectorResultDescriptorFromJSONTyped(json, true), type: 'vector'};
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${json['type']}'`);
    }
}

export function TypedResultDescriptorToJSON(value?: TypedResultDescriptor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'plot':
            return TypedPlotResultDescriptorToJSON(value);
        case 'raster':
            return TypedRasterResultDescriptorToJSON(value);
        case 'vector':
            return TypedVectorResultDescriptorToJSON(value);
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${value['type']}'`);
    }

}

