/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCollection200Response,
  ProvenanceEntry,
  RasterDatasetFromWorkflow,
  RasterStreamWebsocketResultType,
  SpatialPartition2D,
  SpatialResolution,
  TaskResponse,
  TypedResultDescriptor,
  Workflow,
} from '../models/index';
import {
    AddCollection200ResponseFromJSON,
    AddCollection200ResponseToJSON,
    ProvenanceEntryFromJSON,
    ProvenanceEntryToJSON,
    RasterDatasetFromWorkflowFromJSON,
    RasterDatasetFromWorkflowToJSON,
    RasterStreamWebsocketResultTypeFromJSON,
    RasterStreamWebsocketResultTypeToJSON,
    SpatialPartition2DFromJSON,
    SpatialPartition2DToJSON,
    SpatialResolutionFromJSON,
    SpatialResolutionToJSON,
    TaskResponseFromJSON,
    TaskResponseToJSON,
    TypedResultDescriptorFromJSON,
    TypedResultDescriptorToJSON,
    WorkflowFromJSON,
    WorkflowToJSON,
} from '../models/index';

export interface DatasetFromWorkflowHandlerRequest {
    id: string;
    rasterDatasetFromWorkflow: RasterDatasetFromWorkflow;
}

export interface GetWorkflowAllMetadataZipHandlerRequest {
    id: string;
}

export interface GetWorkflowMetadataHandlerRequest {
    id: string;
}

export interface GetWorkflowProvenanceHandlerRequest {
    id: string;
}

export interface LoadWorkflowHandlerRequest {
    id: string;
}

export interface RasterStreamWebsocketRequest {
    id: string;
    spatialBounds: SpatialPartition2D;
    timeInterval: string;
    spatialResolution: SpatialResolution;
    attributes: string;
    resultType: RasterStreamWebsocketResultType;
}

export interface RegisterWorkflowHandlerRequest {
    workflow: Workflow;
}

/**
 * 
 */
export class WorkflowsApi extends runtime.BaseAPI {

    /**
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body. Returns the id of the created task
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body.
     */
    async datasetFromWorkflowHandlerRaw(requestParameters: DatasetFromWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetFromWorkflowHandler.');
        }

        if (requestParameters.rasterDatasetFromWorkflow === null || requestParameters.rasterDatasetFromWorkflow === undefined) {
            throw new runtime.RequiredError('rasterDatasetFromWorkflow','Required parameter requestParameters.rasterDatasetFromWorkflow was null or undefined when calling datasetFromWorkflowHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datasetFromWorkflow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RasterDatasetFromWorkflowToJSON(requestParameters.rasterDatasetFromWorkflow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body. Returns the id of the created task
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body.
     */
    async datasetFromWorkflowHandler(requestParameters: DatasetFromWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskResponse> {
        const response = await this.datasetFromWorkflowHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     */
    async getWorkflowAllMetadataZipHandlerRaw(requestParameters: GetWorkflowAllMetadataZipHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowAllMetadataZipHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow/{id}/allMetadata/zip`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     */
    async getWorkflowAllMetadataZipHandler(requestParameters: GetWorkflowAllMetadataZipHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getWorkflowAllMetadataZipHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the metadata of a workflow
     * Gets the metadata of a workflow
     */
    async getWorkflowMetadataHandlerRaw(requestParameters: GetWorkflowMetadataHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypedResultDescriptor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowMetadataHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypedResultDescriptorFromJSON(jsonValue));
    }

    /**
     * Gets the metadata of a workflow
     * Gets the metadata of a workflow
     */
    async getWorkflowMetadataHandler(requestParameters: GetWorkflowMetadataHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypedResultDescriptor> {
        const response = await this.getWorkflowMetadataHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the provenance of all datasets used in a workflow.
     * Gets the provenance of all datasets used in a workflow.
     */
    async getWorkflowProvenanceHandlerRaw(requestParameters: GetWorkflowProvenanceHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProvenanceEntry>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowProvenanceHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow/{id}/provenance`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProvenanceEntryFromJSON));
    }

    /**
     * Gets the provenance of all datasets used in a workflow.
     * Gets the provenance of all datasets used in a workflow.
     */
    async getWorkflowProvenanceHandler(requestParameters: GetWorkflowProvenanceHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProvenanceEntry>> {
        const response = await this.getWorkflowProvenanceHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an existing Workflow.
     * Retrieves an existing Workflow.
     */
    async loadWorkflowHandlerRaw(requestParameters: LoadWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling loadWorkflowHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * Retrieves an existing Workflow.
     * Retrieves an existing Workflow.
     */
    async loadWorkflowHandler(requestParameters: LoadWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.loadWorkflowHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     */
    async rasterStreamWebsocketRaw(requestParameters: RasterStreamWebsocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rasterStreamWebsocket.');
        }

        if (requestParameters.spatialBounds === null || requestParameters.spatialBounds === undefined) {
            throw new runtime.RequiredError('spatialBounds','Required parameter requestParameters.spatialBounds was null or undefined when calling rasterStreamWebsocket.');
        }

        if (requestParameters.timeInterval === null || requestParameters.timeInterval === undefined) {
            throw new runtime.RequiredError('timeInterval','Required parameter requestParameters.timeInterval was null or undefined when calling rasterStreamWebsocket.');
        }

        if (requestParameters.spatialResolution === null || requestParameters.spatialResolution === undefined) {
            throw new runtime.RequiredError('spatialResolution','Required parameter requestParameters.spatialResolution was null or undefined when calling rasterStreamWebsocket.');
        }

        if (requestParameters.attributes === null || requestParameters.attributes === undefined) {
            throw new runtime.RequiredError('attributes','Required parameter requestParameters.attributes was null or undefined when calling rasterStreamWebsocket.');
        }

        if (requestParameters.resultType === null || requestParameters.resultType === undefined) {
            throw new runtime.RequiredError('resultType','Required parameter requestParameters.resultType was null or undefined when calling rasterStreamWebsocket.');
        }

        const queryParameters: any = {};

        if (requestParameters.spatialBounds !== undefined) {
            queryParameters['spatialBounds'] = requestParameters.spatialBounds;
        }

        if (requestParameters.timeInterval !== undefined) {
            queryParameters['timeInterval'] = requestParameters.timeInterval;
        }

        if (requestParameters.spatialResolution !== undefined) {
            queryParameters['spatialResolution'] = requestParameters.spatialResolution;
        }

        if (requestParameters.attributes !== undefined) {
            queryParameters['attributes'] = requestParameters.attributes;
        }

        if (requestParameters.resultType !== undefined) {
            queryParameters['resultType'] = requestParameters.resultType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow/{id}/rasterStream`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     */
    async rasterStreamWebsocket(requestParameters: RasterStreamWebsocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rasterStreamWebsocketRaw(requestParameters, initOverrides);
    }

    /**
     * Registers a new Workflow.
     * Registers a new Workflow.
     */
    async registerWorkflowHandlerRaw(requestParameters: RegisterWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCollection200Response>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling registerWorkflowHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workflow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowToJSON(requestParameters.workflow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Registers a new Workflow.
     * Registers a new Workflow.
     */
    async registerWorkflowHandler(requestParameters: RegisterWorkflowHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCollection200Response> {
        const response = await this.registerWorkflowHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
