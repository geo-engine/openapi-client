/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { DataProviderResourceFromJSONTyped, DataProviderResourceToJSON, } from './DataProviderResource';
import { DatasetResourceFromJSONTyped, DatasetResourceToJSON, } from './DatasetResource';
import { LayerCollectionResourceFromJSONTyped, LayerCollectionResourceToJSON, } from './LayerCollectionResource';
import { LayerResourceFromJSONTyped, LayerResourceToJSON, } from './LayerResource';
import { MlModelResourceFromJSONTyped, MlModelResourceToJSON, } from './MlModelResource';
import { ProjectResourceFromJSONTyped, ProjectResourceToJSON, } from './ProjectResource';
export function ResourceFromJSON(json) {
    return ResourceFromJSONTyped(json, false);
}
export function ResourceFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'dataset':
            return Object.assign({}, DatasetResourceFromJSONTyped(json, true), { type: 'dataset' });
        case 'layer':
            return Object.assign({}, LayerResourceFromJSONTyped(json, true), { type: 'layer' });
        case 'layerCollection':
            return Object.assign({}, LayerCollectionResourceFromJSONTyped(json, true), { type: 'layerCollection' });
        case 'mlModel':
            return Object.assign({}, MlModelResourceFromJSONTyped(json, true), { type: 'mlModel' });
        case 'project':
            return Object.assign({}, ProjectResourceFromJSONTyped(json, true), { type: 'project' });
        case 'provider':
            return Object.assign({}, DataProviderResourceFromJSONTyped(json, true), { type: 'provider' });
        default:
            throw new Error(`No variant of Resource exists with 'type=${json['type']}'`);
    }
}
export function ResourceToJSON(json) {
    return ResourceToJSONTyped(json, false);
}
export function ResourceToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'dataset':
            return Object.assign({}, DatasetResourceToJSON(value), { type: 'dataset' });
        case 'layer':
            return Object.assign({}, LayerResourceToJSON(value), { type: 'layer' });
        case 'layerCollection':
            return Object.assign({}, LayerCollectionResourceToJSON(value), { type: 'layerCollection' });
        case 'mlModel':
            return Object.assign({}, MlModelResourceToJSON(value), { type: 'mlModel' });
        case 'project':
            return Object.assign({}, ProjectResourceToJSON(value), { type: 'project' });
        case 'provider':
            return Object.assign({}, DataProviderResourceToJSON(value), { type: 'provider' });
        default:
            throw new Error(`No variant of Resource exists with 'type=${value['type']}'`);
    }
}
