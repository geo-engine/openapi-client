/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';
import type { RasterResultDescriptor } from './RasterResultDescriptor';
import {
    RasterResultDescriptorFromJSON,
    RasterResultDescriptorFromJSONTyped,
    RasterResultDescriptorToJSON,
    RasterResultDescriptorToJSONTyped,
} from './RasterResultDescriptor';
import type { GdalDatasetParameters } from './GdalDatasetParameters';
import {
    GdalDatasetParametersFromJSON,
    GdalDatasetParametersFromJSONTyped,
    GdalDatasetParametersToJSON,
    GdalDatasetParametersToJSONTyped,
} from './GdalDatasetParameters';

/**
 * 
 * @export
 * @interface GdalMetaDataStatic
 */
export interface GdalMetaDataStatic {
    /**
     * 
     * @type {number}
     * @memberof GdalMetaDataStatic
     */
    cacheTtl?: number;
    /**
     * 
     * @type {GdalDatasetParameters}
     * @memberof GdalMetaDataStatic
     */
    params: GdalDatasetParameters;
    /**
     * 
     * @type {RasterResultDescriptor}
     * @memberof GdalMetaDataStatic
     */
    resultDescriptor: RasterResultDescriptor;
    /**
     * 
     * @type {TimeInterval}
     * @memberof GdalMetaDataStatic
     */
    time?: TimeInterval | null;
    /**
     * 
     * @type {string}
     * @memberof GdalMetaDataStatic
     */
    type: GdalMetaDataStaticTypeEnum;
}


/**
 * @export
 */
export const GdalMetaDataStaticTypeEnum = {
    GdalStatic: 'GdalStatic'
} as const;
export type GdalMetaDataStaticTypeEnum = typeof GdalMetaDataStaticTypeEnum[keyof typeof GdalMetaDataStaticTypeEnum];


/**
 * Check if a given object implements the GdalMetaDataStatic interface.
 */
export function instanceOfGdalMetaDataStatic(value: object): value is GdalMetaDataStatic {
    if (!('params' in value) || value['params'] === undefined) return false;
    if (!('resultDescriptor' in value) || value['resultDescriptor'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function GdalMetaDataStaticFromJSON(json: any): GdalMetaDataStatic {
    return GdalMetaDataStaticFromJSONTyped(json, false);
}

export function GdalMetaDataStaticFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdalMetaDataStatic {
    if (json == null) {
        return json;
    }
    return {
        
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'params': GdalDatasetParametersFromJSON(json['params']),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'time': json['time'] == null ? undefined : TimeIntervalFromJSON(json['time']),
        'type': json['type'],
    };
}

export function GdalMetaDataStaticToJSON(json: any): GdalMetaDataStatic {
    return GdalMetaDataStaticToJSONTyped(json, false);
}

export function GdalMetaDataStaticToJSONTyped(value?: GdalMetaDataStatic | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cacheTtl': value['cacheTtl'],
        'params': GdalDatasetParametersToJSON(value['params']),
        'resultDescriptor': RasterResultDescriptorToJSON(value['resultDescriptor']),
        'time': TimeIntervalToJSON(value['time']),
        'type': value['type'],
    };
}

