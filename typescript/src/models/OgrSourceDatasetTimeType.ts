/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    OgrSourceDatasetTimeTypeNone,
    instanceOfOgrSourceDatasetTimeTypeNone,
    OgrSourceDatasetTimeTypeNoneFromJSON,
    OgrSourceDatasetTimeTypeNoneFromJSONTyped,
    OgrSourceDatasetTimeTypeNoneToJSON,
} from './OgrSourceDatasetTimeTypeNone';
import {
    OgrSourceDatasetTimeTypeStart,
    instanceOfOgrSourceDatasetTimeTypeStart,
    OgrSourceDatasetTimeTypeStartFromJSON,
    OgrSourceDatasetTimeTypeStartFromJSONTyped,
    OgrSourceDatasetTimeTypeStartToJSON,
} from './OgrSourceDatasetTimeTypeStart';
import {
    OgrSourceDatasetTimeTypeStartDuration,
    instanceOfOgrSourceDatasetTimeTypeStartDuration,
    OgrSourceDatasetTimeTypeStartDurationFromJSON,
    OgrSourceDatasetTimeTypeStartDurationFromJSONTyped,
    OgrSourceDatasetTimeTypeStartDurationToJSON,
} from './OgrSourceDatasetTimeTypeStartDuration';
import {
    OgrSourceDatasetTimeTypeStartEnd,
    instanceOfOgrSourceDatasetTimeTypeStartEnd,
    OgrSourceDatasetTimeTypeStartEndFromJSON,
    OgrSourceDatasetTimeTypeStartEndFromJSONTyped,
    OgrSourceDatasetTimeTypeStartEndToJSON,
} from './OgrSourceDatasetTimeTypeStartEnd';

/**
 * @type OgrSourceDatasetTimeType
 * 
 * @export
 */
export type OgrSourceDatasetTimeType = { type: 'none' } & OgrSourceDatasetTimeTypeNone | { type: 'start' } & OgrSourceDatasetTimeTypeStart | { type: 'start+duration' } & OgrSourceDatasetTimeTypeStartDuration | { type: 'start+end' } & OgrSourceDatasetTimeTypeStartEnd;

export function OgrSourceDatasetTimeTypeFromJSON(json: any): OgrSourceDatasetTimeType {
    return OgrSourceDatasetTimeTypeFromJSONTyped(json, false);
}

export function OgrSourceDatasetTimeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceDatasetTimeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'none':
            return {...OgrSourceDatasetTimeTypeNoneFromJSONTyped(json, true), type: 'none'};
        case 'start':
            return {...OgrSourceDatasetTimeTypeStartFromJSONTyped(json, true), type: 'start'};
        case 'start+duration':
            return {...OgrSourceDatasetTimeTypeStartDurationFromJSONTyped(json, true), type: 'start+duration'};
        case 'start+end':
            return {...OgrSourceDatasetTimeTypeStartEndFromJSONTyped(json, true), type: 'start+end'};
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${json['type']}'`);
    }
}

export function OgrSourceDatasetTimeTypeToJSON(value?: OgrSourceDatasetTimeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'none':
            return OgrSourceDatasetTimeTypeNoneToJSON(value);
        case 'start':
            return OgrSourceDatasetTimeTypeStartToJSON(value);
        case 'start+duration':
            return OgrSourceDatasetTimeTypeStartDurationToJSON(value);
        case 'start+end':
            return OgrSourceDatasetTimeTypeStartEndToJSON(value);
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${value['type']}'`);
    }

}

