/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TaskStatusAborted } from './TaskStatusAborted';
import {
    instanceOfTaskStatusAborted,
    TaskStatusAbortedFromJSON,
    TaskStatusAbortedFromJSONTyped,
    TaskStatusAbortedToJSON,
} from './TaskStatusAborted';
import type { TaskStatusCompleted } from './TaskStatusCompleted';
import {
    instanceOfTaskStatusCompleted,
    TaskStatusCompletedFromJSON,
    TaskStatusCompletedFromJSONTyped,
    TaskStatusCompletedToJSON,
} from './TaskStatusCompleted';
import type { TaskStatusFailed } from './TaskStatusFailed';
import {
    instanceOfTaskStatusFailed,
    TaskStatusFailedFromJSON,
    TaskStatusFailedFromJSONTyped,
    TaskStatusFailedToJSON,
} from './TaskStatusFailed';
import type { TaskStatusRunning } from './TaskStatusRunning';
import {
    instanceOfTaskStatusRunning,
    TaskStatusRunningFromJSON,
    TaskStatusRunningFromJSONTyped,
    TaskStatusRunningToJSON,
} from './TaskStatusRunning';

/**
 * @type TaskStatus
 * 
 * @export
 */
export type TaskStatus = { status: 'aborted' } & TaskStatusAborted | { status: 'completed' } & TaskStatusCompleted | { status: 'failed' } & TaskStatusFailed | { status: 'running' } & TaskStatusRunning;

export function TaskStatusFromJSON(json: any): TaskStatus {
    return TaskStatusFromJSONTyped(json, false);
}

export function TaskStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskStatus {
    if (json == null) {
        return json;
    }
    switch (json['status']) {
        case 'aborted':
            return Object.assign({}, TaskStatusAbortedFromJSONTyped(json, true), { status: 'aborted' } as const);
        case 'completed':
            return Object.assign({}, TaskStatusCompletedFromJSONTyped(json, true), { status: 'completed' } as const);
        case 'failed':
            return Object.assign({}, TaskStatusFailedFromJSONTyped(json, true), { status: 'failed' } as const);
        case 'running':
            return Object.assign({}, TaskStatusRunningFromJSONTyped(json, true), { status: 'running' } as const);
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${json['status']}'`);
    }
}

export function TaskStatusToJSON(json: any): any {
    return TaskStatusToJSONTyped(json, false);
}

export function TaskStatusToJSONTyped(value?: TaskStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['status']) {
        case 'aborted':
            return Object.assign({}, TaskStatusAbortedToJSON(value), { status: 'aborted' } as const);
        case 'completed':
            return Object.assign({}, TaskStatusCompletedToJSON(value), { status: 'completed' } as const);
        case 'failed':
            return Object.assign({}, TaskStatusFailedToJSON(value), { status: 'failed' } as const);
        case 'running':
            return Object.assign({}, TaskStatusRunningToJSON(value), { status: 'running' } as const);
        default:
            throw new Error(`No variant of TaskStatus exists with 'status=${value['status']}'`);
    }

}

