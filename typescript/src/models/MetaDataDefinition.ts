/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    GdalMetaDataList,
    instanceOfGdalMetaDataList,
    GdalMetaDataListFromJSON,
    GdalMetaDataListFromJSONTyped,
    GdalMetaDataListToJSON,
} from './GdalMetaDataList';
import {
    GdalMetaDataRegular,
    instanceOfGdalMetaDataRegular,
    GdalMetaDataRegularFromJSON,
    GdalMetaDataRegularFromJSONTyped,
    GdalMetaDataRegularToJSON,
} from './GdalMetaDataRegular';
import {
    GdalMetaDataStatic,
    instanceOfGdalMetaDataStatic,
    GdalMetaDataStaticFromJSON,
    GdalMetaDataStaticFromJSONTyped,
    GdalMetaDataStaticToJSON,
} from './GdalMetaDataStatic';
import {
    GdalMetadataNetCdfCf,
    instanceOfGdalMetadataNetCdfCf,
    GdalMetadataNetCdfCfFromJSON,
    GdalMetadataNetCdfCfFromJSONTyped,
    GdalMetadataNetCdfCfToJSON,
} from './GdalMetadataNetCdfCf';
import {
    MockMetaData,
    instanceOfMockMetaData,
    MockMetaDataFromJSON,
    MockMetaDataFromJSONTyped,
    MockMetaDataToJSON,
} from './MockMetaData';
import {
    OgrMetaData,
    instanceOfOgrMetaData,
    OgrMetaDataFromJSON,
    OgrMetaDataFromJSONTyped,
    OgrMetaDataToJSON,
} from './OgrMetaData';

/**
 * @type MetaDataDefinition
 * 
 * @export
 */
export type MetaDataDefinition = { type: 'GdalMetaDataList' } & GdalMetaDataList | { type: 'GdalMetaDataRegular' } & GdalMetaDataRegular | { type: 'GdalMetadataNetCdfCf' } & GdalMetadataNetCdfCf | { type: 'GdalStatic' } & GdalMetaDataStatic | { type: 'MockMetaData' } & MockMetaData | { type: 'OgrMetaData' } & OgrMetaData;

export function MetaDataDefinitionFromJSON(json: any): MetaDataDefinition {
    return MetaDataDefinitionFromJSONTyped(json, false);
}

export function MetaDataDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetaDataDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return {...GdalMetaDataListFromJSONTyped(json, true), type: 'GdalMetaDataList'};
        case 'GdalMetaDataRegular':
            return {...GdalMetaDataRegularFromJSONTyped(json, true), type: 'GdalMetaDataRegular'};
        case 'GdalMetadataNetCdfCf':
            return {...GdalMetadataNetCdfCfFromJSONTyped(json, true), type: 'GdalMetadataNetCdfCf'};
        case 'GdalStatic':
            return {...GdalMetaDataStaticFromJSONTyped(json, true), type: 'GdalStatic'};
        case 'MockMetaData':
            return {...MockMetaDataFromJSONTyped(json, true), type: 'MockMetaData'};
        case 'OgrMetaData':
            return {...OgrMetaDataFromJSONTyped(json, true), type: 'OgrMetaData'};
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}

export function MetaDataDefinitionToJSON(value?: MetaDataDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return GdalMetaDataListToJSON(value);
        case 'GdalMetaDataRegular':
            return GdalMetaDataRegularToJSON(value);
        case 'GdalMetadataNetCdfCf':
            return GdalMetadataNetCdfCfToJSON(value);
        case 'GdalStatic':
            return GdalMetaDataStaticToJSON(value);
        case 'MockMetaData':
            return MockMetaDataToJSON(value);
        case 'OgrMetaData':
            return OgrMetaDataToJSON(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }

}

