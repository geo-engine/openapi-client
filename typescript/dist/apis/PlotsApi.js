"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlotsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class PlotsApi extends runtime.BaseAPI {
    /**
     * Generates a plot.  # Example  1. Upload the file `plain_data.csv` with the following content:  ```csv a 1 2 ``` 2. Create a dataset from it using the \"Plain Data\" example at `/dataset`. 3. Create a statistics workflow using the \"Statistics Plot\" example at `/workflow`. 4. Generate the plot with this handler.
     * Generates a plot.
     */
    getPlotHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bbox === null || requestParameters.bbox === undefined) {
                throw new runtime.RequiredError('bbox', 'Required parameter requestParameters.bbox was null or undefined when calling getPlotHandler.');
            }
            if (requestParameters.time === null || requestParameters.time === undefined) {
                throw new runtime.RequiredError('time', 'Required parameter requestParameters.time was null or undefined when calling getPlotHandler.');
            }
            if (requestParameters.spatialResolution === null || requestParameters.spatialResolution === undefined) {
                throw new runtime.RequiredError('spatialResolution', 'Required parameter requestParameters.spatialResolution was null or undefined when calling getPlotHandler.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getPlotHandler.');
            }
            const queryParameters = {};
            if (requestParameters.bbox !== undefined) {
                queryParameters['bbox'] = requestParameters.bbox;
            }
            if (requestParameters.crs !== undefined) {
                queryParameters['crs'] = requestParameters.crs;
            }
            if (requestParameters.time !== undefined) {
                queryParameters['time'] = requestParameters.time;
            }
            if (requestParameters.spatialResolution !== undefined) {
                queryParameters['spatialResolution'] = requestParameters.spatialResolution;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/plot/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WrappedPlotOutputFromJSON)(jsonValue));
        });
    }
    /**
     * Generates a plot.  # Example  1. Upload the file `plain_data.csv` with the following content:  ```csv a 1 2 ``` 2. Create a dataset from it using the \"Plain Data\" example at `/dataset`. 3. Create a statistics workflow using the \"Statistics Plot\" example at `/workflow`. 4. Generate the plot with this handler.
     * Generates a plot.
     */
    getPlotHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPlotHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.PlotsApi = PlotsApi;
