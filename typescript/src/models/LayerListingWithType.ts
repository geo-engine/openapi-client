/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProviderLayerId } from './ProviderLayerId';
import {
    ProviderLayerIdFromJSON,
    ProviderLayerIdFromJSONTyped,
    ProviderLayerIdToJSON,
} from './ProviderLayerId';

/**
 * 
 * @export
 * @interface LayerListingWithType
 */
export interface LayerListingWithType {
    /**
     * 
     * @type {string}
     * @memberof LayerListingWithType
     */
    description: string;
    /**
     * 
     * @type {ProviderLayerId}
     * @memberof LayerListingWithType
     */
    id: ProviderLayerId;
    /**
     * 
     * @type {string}
     * @memberof LayerListingWithType
     */
    name: string;
    /**
     * properties, for instance, to be rendered in the UI
     * @type {Array<Array<string>>}
     * @memberof LayerListingWithType
     */
    properties?: Array<Array<string>>;
    /**
     * 
     * @type {string}
     * @memberof LayerListingWithType
     */
    type: LayerListingWithTypeTypeEnum;
}


/**
 * @export
 */
export const LayerListingWithTypeTypeEnum = {
    Layer: 'layer'
} as const;
export type LayerListingWithTypeTypeEnum = typeof LayerListingWithTypeTypeEnum[keyof typeof LayerListingWithTypeTypeEnum];


/**
 * Check if a given object implements the LayerListingWithType interface.
 */
export function instanceOfLayerListingWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function LayerListingWithTypeFromJSON(json: any): LayerListingWithType {
    return LayerListingWithTypeFromJSONTyped(json, false);
}

export function LayerListingWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LayerListingWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'id': ProviderLayerIdFromJSON(json['id']),
        'name': json['name'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'type': json['type'],
    };
}

export function LayerListingWithTypeToJSON(value?: LayerListingWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'id': ProviderLayerIdToJSON(value.id),
        'name': value.name,
        'properties': value.properties,
        'type': value.type,
    };
}

