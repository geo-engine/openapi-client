/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { DatasetResourceFromJSONTyped, DatasetResourceToJSON, } from './DatasetResource';
import { LayerCollectionResourceFromJSONTyped, LayerCollectionResourceToJSON, } from './LayerCollectionResource';
import { LayerResourceFromJSONTyped, LayerResourceToJSON, } from './LayerResource';
import { ProjectResourceFromJSONTyped, ProjectResourceToJSON, } from './ProjectResource';
export function ResourceFromJSON(json) {
    return ResourceFromJSONTyped(json, false);
}
export function ResourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'dataset':
            return Object.assign(Object.assign({}, DatasetResourceFromJSONTyped(json, true)), { type: 'dataset' });
        case 'layer':
            return Object.assign(Object.assign({}, LayerResourceFromJSONTyped(json, true)), { type: 'layer' });
        case 'layerCollection':
            return Object.assign(Object.assign({}, LayerCollectionResourceFromJSONTyped(json, true)), { type: 'layerCollection' });
        case 'project':
            return Object.assign(Object.assign({}, ProjectResourceFromJSONTyped(json, true)), { type: 'project' });
        default:
            throw new Error(`No variant of Resource exists with 'type=${json['type']}'`);
    }
}
export function ResourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'dataset':
            return DatasetResourceToJSON(value);
        case 'layer':
            return LayerResourceToJSON(value);
        case 'layerCollection':
            return LayerCollectionResourceToJSON(value);
        case 'project':
            return ProjectResourceToJSON(value);
        default:
            throw new Error(`No variant of Resource exists with 'type=${value['type']}'`);
    }
}
