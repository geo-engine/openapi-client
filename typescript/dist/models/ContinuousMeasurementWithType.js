"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContinuousMeasurementWithTypeToJSON = exports.ContinuousMeasurementWithTypeFromJSONTyped = exports.ContinuousMeasurementWithTypeFromJSON = exports.instanceOfContinuousMeasurementWithType = exports.ContinuousMeasurementWithTypeTypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.ContinuousMeasurementWithTypeTypeEnum = {
    Continuous: 'continuous'
};
/**
 * Check if a given object implements the ContinuousMeasurementWithType interface.
 */
function instanceOfContinuousMeasurementWithType(value) {
    let isInstance = true;
    isInstance = isInstance && "measurement" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
exports.instanceOfContinuousMeasurementWithType = instanceOfContinuousMeasurementWithType;
function ContinuousMeasurementWithTypeFromJSON(json) {
    return ContinuousMeasurementWithTypeFromJSONTyped(json, false);
}
exports.ContinuousMeasurementWithTypeFromJSON = ContinuousMeasurementWithTypeFromJSON;
function ContinuousMeasurementWithTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'measurement': json['measurement'],
        'type': json['type'],
        'unit': !(0, runtime_1.exists)(json, 'unit') ? undefined : json['unit'],
    };
}
exports.ContinuousMeasurementWithTypeFromJSONTyped = ContinuousMeasurementWithTypeFromJSONTyped;
function ContinuousMeasurementWithTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'measurement': value.measurement,
        'type': value.type,
        'unit': value.unit,
    };
}
exports.ContinuousMeasurementWithTypeToJSON = ContinuousMeasurementWithTypeToJSON;
