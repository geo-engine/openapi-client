"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetListingToJSON = exports.DatasetListingFromJSONTyped = exports.DatasetListingFromJSON = exports.instanceOfDatasetListing = void 0;
const runtime_1 = require("../runtime");
const Symbology_1 = require("./Symbology");
const TypedResultDescriptor_1 = require("./TypedResultDescriptor");
/**
 * Check if a given object implements the DatasetListing interface.
 */
function instanceOfDatasetListing(value) {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "resultDescriptor" in value;
    isInstance = isInstance && "sourceOperator" in value;
    isInstance = isInstance && "tags" in value;
    return isInstance;
}
exports.instanceOfDatasetListing = instanceOfDatasetListing;
function DatasetListingFromJSON(json) {
    return DatasetListingFromJSONTyped(json, false);
}
exports.DatasetListingFromJSON = DatasetListingFromJSON;
function DatasetListingFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': json['description'],
        'displayName': json['displayName'],
        'id': json['id'],
        'name': json['name'],
        'resultDescriptor': (0, TypedResultDescriptor_1.TypedResultDescriptorFromJSON)(json['resultDescriptor']),
        'sourceOperator': json['sourceOperator'],
        'symbology': !(0, runtime_1.exists)(json, 'symbology') ? undefined : (0, Symbology_1.SymbologyFromJSON)(json['symbology']),
        'tags': json['tags'],
    };
}
exports.DatasetListingFromJSONTyped = DatasetListingFromJSONTyped;
function DatasetListingToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'displayName': value.displayName,
        'id': value.id,
        'name': value.name,
        'resultDescriptor': (0, TypedResultDescriptor_1.TypedResultDescriptorToJSON)(value.resultDescriptor),
        'sourceOperator': value.sourceOperator,
        'symbology': (0, Symbology_1.SymbologyToJSON)(value.symbology),
        'tags': value.tags,
    };
}
exports.DatasetListingToJSON = DatasetListingToJSON;
