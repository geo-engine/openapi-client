/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LayerVisibility } from './LayerVisibility';
import {
    LayerVisibilityFromJSON,
    LayerVisibilityFromJSONTyped,
    LayerVisibilityToJSON,
    LayerVisibilityToJSONTyped,
} from './LayerVisibility';
import type { Symbology } from './Symbology';
import {
    SymbologyFromJSON,
    SymbologyFromJSONTyped,
    SymbologyToJSON,
    SymbologyToJSONTyped,
} from './Symbology';

/**
 * 
 * @export
 * @interface ProjectLayer
 */
export interface ProjectLayer {
    /**
     * 
     * @type {string}
     * @memberof ProjectLayer
     */
    name: string;
    /**
     * 
     * @type {Symbology}
     * @memberof ProjectLayer
     */
    symbology: Symbology;
    /**
     * 
     * @type {LayerVisibility}
     * @memberof ProjectLayer
     */
    visibility: LayerVisibility;
    /**
     * 
     * @type {string}
     * @memberof ProjectLayer
     */
    workflow: string;
}

/**
 * Check if a given object implements the ProjectLayer interface.
 */
export function instanceOfProjectLayer(value: object): value is ProjectLayer {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('symbology' in value) || value['symbology'] === undefined) return false;
    if (!('visibility' in value) || value['visibility'] === undefined) return false;
    if (!('workflow' in value) || value['workflow'] === undefined) return false;
    return true;
}

export function ProjectLayerFromJSON(json: any): ProjectLayer {
    return ProjectLayerFromJSONTyped(json, false);
}

export function ProjectLayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectLayer {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'symbology': SymbologyFromJSON(json['symbology']),
        'visibility': LayerVisibilityFromJSON(json['visibility']),
        'workflow': json['workflow'],
    };
}

export function ProjectLayerToJSON(json: any): ProjectLayer {
    return ProjectLayerToJSONTyped(json, false);
}

export function ProjectLayerToJSONTyped(value?: ProjectLayer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'symbology': SymbologyToJSON(value['symbology']),
        'visibility': LayerVisibilityToJSON(value['visibility']),
        'workflow': value['workflow'],
    };
}

