"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfMockDatasetDataSourceLoadingInfo = instanceOfMockDatasetDataSourceLoadingInfo;
exports.MockDatasetDataSourceLoadingInfoFromJSON = MockDatasetDataSourceLoadingInfoFromJSON;
exports.MockDatasetDataSourceLoadingInfoFromJSONTyped = MockDatasetDataSourceLoadingInfoFromJSONTyped;
exports.MockDatasetDataSourceLoadingInfoToJSON = MockDatasetDataSourceLoadingInfoToJSON;
exports.MockDatasetDataSourceLoadingInfoToJSONTyped = MockDatasetDataSourceLoadingInfoToJSONTyped;
const Coordinate2D_1 = require("./Coordinate2D");
/**
 * Check if a given object implements the MockDatasetDataSourceLoadingInfo interface.
 */
function instanceOfMockDatasetDataSourceLoadingInfo(value) {
    if (!('points' in value) || value['points'] === undefined)
        return false;
    return true;
}
function MockDatasetDataSourceLoadingInfoFromJSON(json) {
    return MockDatasetDataSourceLoadingInfoFromJSONTyped(json, false);
}
function MockDatasetDataSourceLoadingInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'points': (json['points'].map(Coordinate2D_1.Coordinate2DFromJSON)),
    };
}
function MockDatasetDataSourceLoadingInfoToJSON(json) {
    return MockDatasetDataSourceLoadingInfoToJSONTyped(json, false);
}
function MockDatasetDataSourceLoadingInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'points': (value['points'].map(Coordinate2D_1.Coordinate2DToJSON)),
    };
}
