"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaDataDefinitionToJSON = exports.MetaDataDefinitionFromJSONTyped = exports.MetaDataDefinitionFromJSON = void 0;
const GdalMetaDataListWithType_1 = require("./GdalMetaDataListWithType");
const GdalMetaDataRegularWithType_1 = require("./GdalMetaDataRegularWithType");
const GdalMetaDataStaticWithType_1 = require("./GdalMetaDataStaticWithType");
const GdalMetadataNetCdfCfWithType_1 = require("./GdalMetadataNetCdfCfWithType");
const MockMetaDataWithType_1 = require("./MockMetaDataWithType");
const OgrMetaDataWithType_1 = require("./OgrMetaDataWithType");
function MetaDataDefinitionFromJSON(json) {
    return MetaDataDefinitionFromJSONTyped(json, false);
}
exports.MetaDataDefinitionFromJSON = MetaDataDefinitionFromJSON;
function MetaDataDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return Object.assign(Object.assign({}, (0, GdalMetaDataListWithType_1.GdalMetaDataListWithTypeFromJSONTyped)(json, true)), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataRegular':
            return Object.assign(Object.assign({}, (0, GdalMetaDataRegularWithType_1.GdalMetaDataRegularWithTypeFromJSONTyped)(json, true)), { type: 'GdalMetaDataRegular' });
        case 'GdalMetadataNetCdfCf':
            return Object.assign(Object.assign({}, (0, GdalMetadataNetCdfCfWithType_1.GdalMetadataNetCdfCfWithTypeFromJSONTyped)(json, true)), { type: 'GdalMetadataNetCdfCf' });
        case 'GdalStatic':
            return Object.assign(Object.assign({}, (0, GdalMetaDataStaticWithType_1.GdalMetaDataStaticWithTypeFromJSONTyped)(json, true)), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign(Object.assign({}, (0, MockMetaDataWithType_1.MockMetaDataWithTypeFromJSONTyped)(json, true)), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign(Object.assign({}, (0, OgrMetaDataWithType_1.OgrMetaDataWithTypeFromJSONTyped)(json, true)), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}
exports.MetaDataDefinitionFromJSONTyped = MetaDataDefinitionFromJSONTyped;
function MetaDataDefinitionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return (0, GdalMetaDataListWithType_1.GdalMetaDataListWithTypeToJSON)(value);
        case 'GdalMetaDataRegular':
            return (0, GdalMetaDataRegularWithType_1.GdalMetaDataRegularWithTypeToJSON)(value);
        case 'GdalMetadataNetCdfCf':
            return (0, GdalMetadataNetCdfCfWithType_1.GdalMetadataNetCdfCfWithTypeToJSON)(value);
        case 'GdalStatic':
            return (0, GdalMetaDataStaticWithType_1.GdalMetaDataStaticWithTypeToJSON)(value);
        case 'MockMetaData':
            return (0, MockMetaDataWithType_1.MockMetaDataWithTypeToJSON)(value);
        case 'OgrMetaData':
            return (0, OgrMetaDataWithType_1.OgrMetaDataWithTypeToJSON)(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }
}
exports.MetaDataDefinitionToJSON = MetaDataDefinitionToJSON;
