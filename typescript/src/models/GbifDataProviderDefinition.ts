/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatabaseConnectionConfig } from './DatabaseConnectionConfig';
import {
    DatabaseConnectionConfigFromJSON,
    DatabaseConnectionConfigFromJSONTyped,
    DatabaseConnectionConfigToJSON,
    DatabaseConnectionConfigToJSONTyped,
} from './DatabaseConnectionConfig';

/**
 * 
 * @export
 * @interface GbifDataProviderDefinition
 */
export interface GbifDataProviderDefinition {
    /**
     * 
     * @type {number}
     * @memberof GbifDataProviderDefinition
     */
    autocompleteTimeout: number;
    /**
     * 
     * @type {number}
     * @memberof GbifDataProviderDefinition
     */
    cacheTtl?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GbifDataProviderDefinition
     */
    columns: Array<string>;
    /**
     * 
     * @type {DatabaseConnectionConfig}
     * @memberof GbifDataProviderDefinition
     */
    dbConfig: DatabaseConnectionConfig;
    /**
     * 
     * @type {string}
     * @memberof GbifDataProviderDefinition
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof GbifDataProviderDefinition
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof GbifDataProviderDefinition
     */
    priority?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GbifDataProviderDefinition
     */
    type: GbifDataProviderDefinitionTypeEnum;
}


/**
 * @export
 */
export const GbifDataProviderDefinitionTypeEnum = {
    Gbif: 'Gbif'
} as const;
export type GbifDataProviderDefinitionTypeEnum = typeof GbifDataProviderDefinitionTypeEnum[keyof typeof GbifDataProviderDefinitionTypeEnum];


/**
 * Check if a given object implements the GbifDataProviderDefinition interface.
 */
export function instanceOfGbifDataProviderDefinition(value: object): value is GbifDataProviderDefinition {
    if (!('autocompleteTimeout' in value) || value['autocompleteTimeout'] === undefined) return false;
    if (!('columns' in value) || value['columns'] === undefined) return false;
    if (!('dbConfig' in value) || value['dbConfig'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function GbifDataProviderDefinitionFromJSON(json: any): GbifDataProviderDefinition {
    return GbifDataProviderDefinitionFromJSONTyped(json, false);
}

export function GbifDataProviderDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GbifDataProviderDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'autocompleteTimeout': json['autocompleteTimeout'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'columns': json['columns'],
        'dbConfig': DatabaseConnectionConfigFromJSON(json['dbConfig']),
        'description': json['description'],
        'name': json['name'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'type': json['type'],
    };
}

export function GbifDataProviderDefinitionToJSON(json: any): GbifDataProviderDefinition {
    return GbifDataProviderDefinitionToJSONTyped(json, false);
}

export function GbifDataProviderDefinitionToJSONTyped(value?: GbifDataProviderDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'autocompleteTimeout': value['autocompleteTimeout'],
        'cacheTtl': value['cacheTtl'],
        'columns': value['columns'],
        'dbConfig': DatabaseConnectionConfigToJSON(value['dbConfig']),
        'description': value['description'],
        'name': value['name'],
        'priority': value['priority'],
        'type': value['type'],
    };
}

