"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiBandRasterColorizerToJSONTyped = exports.MultiBandRasterColorizerToJSON = exports.MultiBandRasterColorizerFromJSONTyped = exports.MultiBandRasterColorizerFromJSON = exports.instanceOfMultiBandRasterColorizer = exports.MultiBandRasterColorizerTypeEnum = void 0;
/**
 * @export
 */
exports.MultiBandRasterColorizerTypeEnum = {
    MultiBand: 'multiBand'
};
/**
 * Check if a given object implements the MultiBandRasterColorizer interface.
 */
function instanceOfMultiBandRasterColorizer(value) {
    if (!('blueBand' in value) || value['blueBand'] === undefined)
        return false;
    if (!('blueMax' in value) || value['blueMax'] === undefined)
        return false;
    if (!('blueMin' in value) || value['blueMin'] === undefined)
        return false;
    if (!('greenBand' in value) || value['greenBand'] === undefined)
        return false;
    if (!('greenMax' in value) || value['greenMax'] === undefined)
        return false;
    if (!('greenMin' in value) || value['greenMin'] === undefined)
        return false;
    if (!('redBand' in value) || value['redBand'] === undefined)
        return false;
    if (!('redMax' in value) || value['redMax'] === undefined)
        return false;
    if (!('redMin' in value) || value['redMin'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    return true;
}
exports.instanceOfMultiBandRasterColorizer = instanceOfMultiBandRasterColorizer;
function MultiBandRasterColorizerFromJSON(json) {
    return MultiBandRasterColorizerFromJSONTyped(json, false);
}
exports.MultiBandRasterColorizerFromJSON = MultiBandRasterColorizerFromJSON;
function MultiBandRasterColorizerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'blueBand': json['blueBand'],
        'blueMax': json['blueMax'],
        'blueMin': json['blueMin'],
        'blueScale': json['blueScale'] == null ? undefined : json['blueScale'],
        'greenBand': json['greenBand'],
        'greenMax': json['greenMax'],
        'greenMin': json['greenMin'],
        'greenScale': json['greenScale'] == null ? undefined : json['greenScale'],
        'noDataColor': json['noDataColor'] == null ? undefined : json['noDataColor'],
        'redBand': json['redBand'],
        'redMax': json['redMax'],
        'redMin': json['redMin'],
        'redScale': json['redScale'] == null ? undefined : json['redScale'],
        'type': json['type'],
    };
}
exports.MultiBandRasterColorizerFromJSONTyped = MultiBandRasterColorizerFromJSONTyped;
function MultiBandRasterColorizerToJSON(json) {
    return MultiBandRasterColorizerToJSONTyped(json, false);
}
exports.MultiBandRasterColorizerToJSON = MultiBandRasterColorizerToJSON;
function MultiBandRasterColorizerToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'blueBand': value['blueBand'],
        'blueMax': value['blueMax'],
        'blueMin': value['blueMin'],
        'blueScale': value['blueScale'],
        'greenBand': value['greenBand'],
        'greenMax': value['greenMax'],
        'greenMin': value['greenMin'],
        'greenScale': value['greenScale'],
        'noDataColor': value['noDataColor'],
        'redBand': value['redBand'],
        'redMax': value['redMax'],
        'redMin': value['redMin'],
        'redScale': value['redScale'],
        'type': value['type'],
    };
}
exports.MultiBandRasterColorizerToJSONTyped = MultiBandRasterColorizerToJSONTyped;
