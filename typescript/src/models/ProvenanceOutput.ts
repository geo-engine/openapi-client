/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { DataId } from './DataId';
import {
    DataIdFromJSON,
    DataIdFromJSONTyped,
    DataIdToJSON,
    DataIdToJSONTyped,
} from './DataId';

/**
 * 
 * @export
 * @interface ProvenanceOutput
 */
export interface ProvenanceOutput {
    /**
     * 
     * @type {DataId}
     * @memberof ProvenanceOutput
     */
    data: DataId;
    /**
     * 
     * @type {Array<Provenance>}
     * @memberof ProvenanceOutput
     */
    provenance?: Array<Provenance> | null;
}

/**
 * Check if a given object implements the ProvenanceOutput interface.
 */
export function instanceOfProvenanceOutput(value: object): value is ProvenanceOutput {
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function ProvenanceOutputFromJSON(json: any): ProvenanceOutput {
    return ProvenanceOutputFromJSONTyped(json, false);
}

export function ProvenanceOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProvenanceOutput {
    if (json == null) {
        return json;
    }
    return {
        
        'data': DataIdFromJSON(json['data']),
        'provenance': json['provenance'] == null ? undefined : ((json['provenance'] as Array<any>).map(ProvenanceFromJSON)),
    };
}

export function ProvenanceOutputToJSON(json: any): ProvenanceOutput {
    return ProvenanceOutputToJSONTyped(json, false);
}

export function ProvenanceOutputToJSONTyped(value?: ProvenanceOutput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': DataIdToJSON(value['data']),
        'provenance': value['provenance'] == null ? undefined : ((value['provenance'] as Array<any>).map(ProvenanceToJSON)),
    };
}

