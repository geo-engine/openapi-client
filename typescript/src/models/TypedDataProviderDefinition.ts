/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ArunaDataProviderDefinition } from './ArunaDataProviderDefinition';
import {
    instanceOfArunaDataProviderDefinition,
    ArunaDataProviderDefinitionFromJSON,
    ArunaDataProviderDefinitionFromJSONTyped,
    ArunaDataProviderDefinitionToJSON,
} from './ArunaDataProviderDefinition';
import type { CopernicusDataspaceDataProviderDefinition } from './CopernicusDataspaceDataProviderDefinition';
import {
    instanceOfCopernicusDataspaceDataProviderDefinition,
    CopernicusDataspaceDataProviderDefinitionFromJSON,
    CopernicusDataspaceDataProviderDefinitionFromJSONTyped,
    CopernicusDataspaceDataProviderDefinitionToJSON,
} from './CopernicusDataspaceDataProviderDefinition';
import type { DatasetLayerListingProviderDefinition } from './DatasetLayerListingProviderDefinition';
import {
    instanceOfDatasetLayerListingProviderDefinition,
    DatasetLayerListingProviderDefinitionFromJSON,
    DatasetLayerListingProviderDefinitionFromJSONTyped,
    DatasetLayerListingProviderDefinitionToJSON,
} from './DatasetLayerListingProviderDefinition';
import type { EbvPortalDataProviderDefinition } from './EbvPortalDataProviderDefinition';
import {
    instanceOfEbvPortalDataProviderDefinition,
    EbvPortalDataProviderDefinitionFromJSON,
    EbvPortalDataProviderDefinitionFromJSONTyped,
    EbvPortalDataProviderDefinitionToJSON,
} from './EbvPortalDataProviderDefinition';
import type { EdrDataProviderDefinition } from './EdrDataProviderDefinition';
import {
    instanceOfEdrDataProviderDefinition,
    EdrDataProviderDefinitionFromJSON,
    EdrDataProviderDefinitionFromJSONTyped,
    EdrDataProviderDefinitionToJSON,
} from './EdrDataProviderDefinition';
import type { GbifDataProviderDefinition } from './GbifDataProviderDefinition';
import {
    instanceOfGbifDataProviderDefinition,
    GbifDataProviderDefinitionFromJSON,
    GbifDataProviderDefinitionFromJSONTyped,
    GbifDataProviderDefinitionToJSON,
} from './GbifDataProviderDefinition';
import type { GfbioAbcdDataProviderDefinition } from './GfbioAbcdDataProviderDefinition';
import {
    instanceOfGfbioAbcdDataProviderDefinition,
    GfbioAbcdDataProviderDefinitionFromJSON,
    GfbioAbcdDataProviderDefinitionFromJSONTyped,
    GfbioAbcdDataProviderDefinitionToJSON,
} from './GfbioAbcdDataProviderDefinition';
import type { GfbioCollectionsDataProviderDefinition } from './GfbioCollectionsDataProviderDefinition';
import {
    instanceOfGfbioCollectionsDataProviderDefinition,
    GfbioCollectionsDataProviderDefinitionFromJSON,
    GfbioCollectionsDataProviderDefinitionFromJSONTyped,
    GfbioCollectionsDataProviderDefinitionToJSON,
} from './GfbioCollectionsDataProviderDefinition';
import type { NetCdfCfDataProviderDefinition } from './NetCdfCfDataProviderDefinition';
import {
    instanceOfNetCdfCfDataProviderDefinition,
    NetCdfCfDataProviderDefinitionFromJSON,
    NetCdfCfDataProviderDefinitionFromJSONTyped,
    NetCdfCfDataProviderDefinitionToJSON,
} from './NetCdfCfDataProviderDefinition';
import type { PangaeaDataProviderDefinition } from './PangaeaDataProviderDefinition';
import {
    instanceOfPangaeaDataProviderDefinition,
    PangaeaDataProviderDefinitionFromJSON,
    PangaeaDataProviderDefinitionFromJSONTyped,
    PangaeaDataProviderDefinitionToJSON,
} from './PangaeaDataProviderDefinition';
import type { SentinelS2L2ACogsProviderDefinition } from './SentinelS2L2ACogsProviderDefinition';
import {
    instanceOfSentinelS2L2ACogsProviderDefinition,
    SentinelS2L2ACogsProviderDefinitionFromJSON,
    SentinelS2L2ACogsProviderDefinitionFromJSONTyped,
    SentinelS2L2ACogsProviderDefinitionToJSON,
} from './SentinelS2L2ACogsProviderDefinition';
import type { WildliveDataConnectorDefinition } from './WildliveDataConnectorDefinition';
import {
    instanceOfWildliveDataConnectorDefinition,
    WildliveDataConnectorDefinitionFromJSON,
    WildliveDataConnectorDefinitionFromJSONTyped,
    WildliveDataConnectorDefinitionToJSON,
} from './WildliveDataConnectorDefinition';

/**
 * @type TypedDataProviderDefinition
 * 
 * @export
 */
export type TypedDataProviderDefinition = { type: 'Aruna' } & ArunaDataProviderDefinition | { type: 'CopernicusDataspace' } & CopernicusDataspaceDataProviderDefinition | { type: 'DatasetLayerListing' } & DatasetLayerListingProviderDefinition | { type: 'EbvPortal' } & EbvPortalDataProviderDefinition | { type: 'Edr' } & EdrDataProviderDefinition | { type: 'Gbif' } & GbifDataProviderDefinition | { type: 'GfbioAbcd' } & GfbioAbcdDataProviderDefinition | { type: 'GfbioCollections' } & GfbioCollectionsDataProviderDefinition | { type: 'NetCdfCf' } & NetCdfCfDataProviderDefinition | { type: 'Pangaea' } & PangaeaDataProviderDefinition | { type: 'SentinelS2L2ACogs' } & SentinelS2L2ACogsProviderDefinition | { type: 'WildLIVE!' } & WildliveDataConnectorDefinition;

export function TypedDataProviderDefinitionFromJSON(json: any): TypedDataProviderDefinition {
    return TypedDataProviderDefinitionFromJSONTyped(json, false);
}

export function TypedDataProviderDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedDataProviderDefinition {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'Aruna':
            return Object.assign({}, ArunaDataProviderDefinitionFromJSONTyped(json, true), { type: 'Aruna' } as const);
        case 'CopernicusDataspace':
            return Object.assign({}, CopernicusDataspaceDataProviderDefinitionFromJSONTyped(json, true), { type: 'CopernicusDataspace' } as const);
        case 'DatasetLayerListing':
            return Object.assign({}, DatasetLayerListingProviderDefinitionFromJSONTyped(json, true), { type: 'DatasetLayerListing' } as const);
        case 'EbvPortal':
            return Object.assign({}, EbvPortalDataProviderDefinitionFromJSONTyped(json, true), { type: 'EbvPortal' } as const);
        case 'Edr':
            return Object.assign({}, EdrDataProviderDefinitionFromJSONTyped(json, true), { type: 'Edr' } as const);
        case 'Gbif':
            return Object.assign({}, GbifDataProviderDefinitionFromJSONTyped(json, true), { type: 'Gbif' } as const);
        case 'GfbioAbcd':
            return Object.assign({}, GfbioAbcdDataProviderDefinitionFromJSONTyped(json, true), { type: 'GfbioAbcd' } as const);
        case 'GfbioCollections':
            return Object.assign({}, GfbioCollectionsDataProviderDefinitionFromJSONTyped(json, true), { type: 'GfbioCollections' } as const);
        case 'NetCdfCf':
            return Object.assign({}, NetCdfCfDataProviderDefinitionFromJSONTyped(json, true), { type: 'NetCdfCf' } as const);
        case 'Pangaea':
            return Object.assign({}, PangaeaDataProviderDefinitionFromJSONTyped(json, true), { type: 'Pangaea' } as const);
        case 'SentinelS2L2ACogs':
            return Object.assign({}, SentinelS2L2ACogsProviderDefinitionFromJSONTyped(json, true), { type: 'SentinelS2L2ACogs' } as const);
        case 'WildLIVE!':
            return Object.assign({}, WildliveDataConnectorDefinitionFromJSONTyped(json, true), { type: 'WildLIVE!' } as const);
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${json['type']}'`);
    }
}

export function TypedDataProviderDefinitionToJSON(json: any): any {
    return TypedDataProviderDefinitionToJSONTyped(json, false);
}

export function TypedDataProviderDefinitionToJSONTyped(value?: TypedDataProviderDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'Aruna':
            return Object.assign({}, ArunaDataProviderDefinitionToJSON(value), { type: 'Aruna' } as const);
        case 'CopernicusDataspace':
            return Object.assign({}, CopernicusDataspaceDataProviderDefinitionToJSON(value), { type: 'CopernicusDataspace' } as const);
        case 'DatasetLayerListing':
            return Object.assign({}, DatasetLayerListingProviderDefinitionToJSON(value), { type: 'DatasetLayerListing' } as const);
        case 'EbvPortal':
            return Object.assign({}, EbvPortalDataProviderDefinitionToJSON(value), { type: 'EbvPortal' } as const);
        case 'Edr':
            return Object.assign({}, EdrDataProviderDefinitionToJSON(value), { type: 'Edr' } as const);
        case 'Gbif':
            return Object.assign({}, GbifDataProviderDefinitionToJSON(value), { type: 'Gbif' } as const);
        case 'GfbioAbcd':
            return Object.assign({}, GfbioAbcdDataProviderDefinitionToJSON(value), { type: 'GfbioAbcd' } as const);
        case 'GfbioCollections':
            return Object.assign({}, GfbioCollectionsDataProviderDefinitionToJSON(value), { type: 'GfbioCollections' } as const);
        case 'NetCdfCf':
            return Object.assign({}, NetCdfCfDataProviderDefinitionToJSON(value), { type: 'NetCdfCf' } as const);
        case 'Pangaea':
            return Object.assign({}, PangaeaDataProviderDefinitionToJSON(value), { type: 'Pangaea' } as const);
        case 'SentinelS2L2ACogs':
            return Object.assign({}, SentinelS2L2ACogsProviderDefinitionToJSON(value), { type: 'SentinelS2L2ACogs' } as const);
        case 'WildLIVE!':
            return Object.assign({}, WildliveDataConnectorDefinitionToJSON(value), { type: 'WildLIVE!' } as const);
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${value['type']}'`);
    }

}

