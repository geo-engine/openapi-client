/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TextSymbology } from './TextSymbology';
import {
    TextSymbologyFromJSON,
    TextSymbologyFromJSONTyped,
    TextSymbologyToJSON,
    TextSymbologyToJSONTyped,
} from './TextSymbology';
import type { StrokeParam } from './StrokeParam';
import {
    StrokeParamFromJSON,
    StrokeParamFromJSONTyped,
    StrokeParamToJSON,
    StrokeParamToJSONTyped,
} from './StrokeParam';
import type { NumberParam } from './NumberParam';
import {
    NumberParamFromJSON,
    NumberParamFromJSONTyped,
    NumberParamToJSON,
    NumberParamToJSONTyped,
} from './NumberParam';
import type { ColorParam } from './ColorParam';
import {
    ColorParamFromJSON,
    ColorParamFromJSONTyped,
    ColorParamToJSON,
    ColorParamToJSONTyped,
} from './ColorParam';

/**
 * 
 * @export
 * @interface PointSymbology
 */
export interface PointSymbology {
    /**
     * 
     * @type {ColorParam}
     * @memberof PointSymbology
     */
    fillColor: ColorParam;
    /**
     * 
     * @type {NumberParam}
     * @memberof PointSymbology
     */
    radius: NumberParam;
    /**
     * 
     * @type {StrokeParam}
     * @memberof PointSymbology
     */
    stroke: StrokeParam;
    /**
     * 
     * @type {TextSymbology}
     * @memberof PointSymbology
     */
    text?: TextSymbology | null;
    /**
     * 
     * @type {string}
     * @memberof PointSymbology
     */
    type: PointSymbologyTypeEnum;
}


/**
 * @export
 */
export const PointSymbologyTypeEnum = {
    Point: 'point'
} as const;
export type PointSymbologyTypeEnum = typeof PointSymbologyTypeEnum[keyof typeof PointSymbologyTypeEnum];


/**
 * Check if a given object implements the PointSymbology interface.
 */
export function instanceOfPointSymbology(value: object): value is PointSymbology {
    if (!('fillColor' in value) || value['fillColor'] === undefined) return false;
    if (!('radius' in value) || value['radius'] === undefined) return false;
    if (!('stroke' in value) || value['stroke'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function PointSymbologyFromJSON(json: any): PointSymbology {
    return PointSymbologyFromJSONTyped(json, false);
}

export function PointSymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): PointSymbology {
    if (json == null) {
        return json;
    }
    return {
        
        'fillColor': ColorParamFromJSON(json['fillColor']),
        'radius': NumberParamFromJSON(json['radius']),
        'stroke': StrokeParamFromJSON(json['stroke']),
        'text': json['text'] == null ? undefined : TextSymbologyFromJSON(json['text']),
        'type': json['type'],
    };
}

export function PointSymbologyToJSON(json: any): PointSymbology {
    return PointSymbologyToJSONTyped(json, false);
}

export function PointSymbologyToJSONTyped(value?: PointSymbology | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fillColor': ColorParamToJSON(value['fillColor']),
        'radius': NumberParamToJSON(value['radius']),
        'stroke': StrokeParamToJSON(value['stroke']),
        'text': TextSymbologyToJSON(value['text']),
        'type': value['type'],
    };
}

