/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchTypes } from './SearchTypes';
import {
    SearchTypesFromJSON,
    SearchTypesFromJSONTyped,
    SearchTypesToJSON,
} from './SearchTypes';

/**
 * 
 * @export
 * @interface SearchCapabilities
 */
export interface SearchCapabilities {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCapabilities
     */
    autocomplete: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchCapabilities
     */
    filters?: Array<string> | null;
    /**
     * 
     * @type {SearchTypes}
     * @memberof SearchCapabilities
     */
    searchTypes: SearchTypes;
}

/**
 * Check if a given object implements the SearchCapabilities interface.
 */
export function instanceOfSearchCapabilities(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "autocomplete" in value;
    isInstance = isInstance && "searchTypes" in value;

    return isInstance;
}

export function SearchCapabilitiesFromJSON(json: any): SearchCapabilities {
    return SearchCapabilitiesFromJSONTyped(json, false);
}

export function SearchCapabilitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchCapabilities {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autocomplete': json['autocomplete'],
        'filters': !exists(json, 'filters') ? undefined : json['filters'],
        'searchTypes': SearchTypesFromJSON(json['searchTypes']),
    };
}

export function SearchCapabilitiesToJSON(value?: SearchCapabilities | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autocomplete': value.autocomplete,
        'filters': value.filters,
        'searchTypes': SearchTypesToJSON(value.searchTypes),
    };
}

