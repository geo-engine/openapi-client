/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OgrSourceDatasetTimeTypeNoneFromJSONTyped, OgrSourceDatasetTimeTypeNoneToJSON, } from './OgrSourceDatasetTimeTypeNone';
import { OgrSourceDatasetTimeTypeStartFromJSONTyped, OgrSourceDatasetTimeTypeStartToJSON, } from './OgrSourceDatasetTimeTypeStart';
import { OgrSourceDatasetTimeTypeStartDurationFromJSONTyped, OgrSourceDatasetTimeTypeStartDurationToJSON, } from './OgrSourceDatasetTimeTypeStartDuration';
import { OgrSourceDatasetTimeTypeStartEndFromJSONTyped, OgrSourceDatasetTimeTypeStartEndToJSON, } from './OgrSourceDatasetTimeTypeStartEnd';
export function OgrSourceDatasetTimeTypeFromJSON(json) {
    return OgrSourceDatasetTimeTypeFromJSONTyped(json, false);
}
export function OgrSourceDatasetTimeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'none':
            return Object.assign({}, OgrSourceDatasetTimeTypeNoneFromJSONTyped(json, true), { type: 'none' });
        case 'start':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartFromJSONTyped(json, true), { type: 'start' });
        case 'start+duration':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartDurationFromJSONTyped(json, true), { type: 'start+duration' });
        case 'start+end':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartEndFromJSONTyped(json, true), { type: 'start+end' });
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${json['type']}'`);
    }
}
export function OgrSourceDatasetTimeTypeToJSON(json) {
    return OgrSourceDatasetTimeTypeToJSONTyped(json, false);
}
export function OgrSourceDatasetTimeTypeToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'none':
            return Object.assign({}, OgrSourceDatasetTimeTypeNoneToJSON(value), { type: 'none' });
        case 'start':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartToJSON(value), { type: 'start' });
        case 'start+duration':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartDurationToJSON(value), { type: 'start+duration' });
        case 'start+end':
            return Object.assign({}, OgrSourceDatasetTimeTypeStartEndToJSON(value), { type: 'start+end' });
        default:
            throw new Error(`No variant of OgrSourceDatasetTimeType exists with 'type=${value['type']}'`);
    }
}
