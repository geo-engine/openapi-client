/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeoJson,
  GetCapabilitiesRequest,
  GetFeatureRequest,
  WfsService,
  WfsVersion,
} from '../models/index';
import {
    GeoJsonFromJSON,
    GeoJsonToJSON,
    GetCapabilitiesRequestFromJSON,
    GetCapabilitiesRequestToJSON,
    GetFeatureRequestFromJSON,
    GetFeatureRequestToJSON,
    WfsServiceFromJSON,
    WfsServiceToJSON,
    WfsVersionFromJSON,
    WfsVersionToJSON,
} from '../models/index';

export interface WfsCapabilitiesHandlerRequest {
    workflow: string;
    version: WfsVersion | null;
    service: WfsService;
    request: GetCapabilitiesRequest;
}

export interface WfsFeatureHandlerRequest {
    workflow: string;
    service: WfsService;
    request: GetFeatureRequest;
    typeNames: string;
    bbox: string;
    version?: WfsVersion | null;
    time?: string;
    srsName?: string | null;
    namespaces?: string | null;
    count?: number | null;
    sortBy?: string | null;
    resultType?: string | null;
    filter?: string | null;
    propertyName?: string | null;
    queryResolution?: string | null;
}

/**
 * 
 */
export class OGCWFSApi extends runtime.BaseAPI {

    /**
     * Get WFS Capabilities
     * Get WFS Capabilities
     */
    async wfsCapabilitiesHandlerRaw(requestParameters: WfsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wfsCapabilitiesHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wfsCapabilitiesHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wfsCapabilitiesHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wfsCapabilitiesHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wfs/{workflow}?request=GetCapabilities`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"request"}}`, encodeURIComponent(String(requestParameters.request))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get WFS Capabilities
     * Get WFS Capabilities
     */
    async wfsCapabilitiesHandler(requestParameters: WfsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.wfsCapabilitiesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get WCS Features
     * Get WCS Features
     */
    async wfsFeatureHandlerRaw(requestParameters: WfsFeatureHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJson>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wfsFeatureHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wfsFeatureHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wfsFeatureHandler.');
        }

        if (requestParameters.typeNames === null || requestParameters.typeNames === undefined) {
            throw new runtime.RequiredError('typeNames','Required parameter requestParameters.typeNames was null or undefined when calling wfsFeatureHandler.');
        }

        if (requestParameters.bbox === null || requestParameters.bbox === undefined) {
            throw new runtime.RequiredError('bbox','Required parameter requestParameters.bbox was null or undefined when calling wfsFeatureHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        if (requestParameters.typeNames !== undefined) {
            queryParameters['typeNames'] = requestParameters.typeNames;
        }

        if (requestParameters.bbox !== undefined) {
            queryParameters['bbox'] = requestParameters.bbox;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.srsName !== undefined) {
            queryParameters['srsName'] = requestParameters.srsName;
        }

        if (requestParameters.namespaces !== undefined) {
            queryParameters['namespaces'] = requestParameters.namespaces;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.resultType !== undefined) {
            queryParameters['resultType'] = requestParameters.resultType;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.propertyName !== undefined) {
            queryParameters['propertyName'] = requestParameters.propertyName;
        }

        if (requestParameters.queryResolution !== undefined) {
            queryParameters['queryResolution'] = requestParameters.queryResolution;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wfs/{workflow}?request=GetFeature`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonFromJSON(jsonValue));
    }

    /**
     * Get WCS Features
     * Get WCS Features
     */
    async wfsFeatureHandler(requestParameters: WfsFeatureHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJson> {
        const response = await this.wfsFeatureHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
