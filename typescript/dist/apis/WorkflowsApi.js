"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class WorkflowsApi extends runtime.BaseAPI {
    /**
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body. Returns the id of the created task
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body.
     */
    datasetFromWorkflowHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling datasetFromWorkflowHandler.');
            }
            if (requestParameters.rasterDatasetFromWorkflow === null || requestParameters.rasterDatasetFromWorkflow === undefined) {
                throw new runtime.RequiredError('rasterDatasetFromWorkflow', 'Required parameter requestParameters.rasterDatasetFromWorkflow was null or undefined when calling datasetFromWorkflowHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/datasetFromWorkflow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RasterDatasetFromWorkflowToJSON)(requestParameters.rasterDatasetFromWorkflow),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TaskResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body. Returns the id of the created task
     * Create a task for creating a new dataset from the result of the workflow given by its `id` and the dataset parameters in the request body.
     */
    datasetFromWorkflowHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.datasetFromWorkflowHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     */
    getWorkflowAllMetadataZipHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWorkflowAllMetadataZipHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow/{id}/allMetadata/zip`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     * Gets a ZIP archive of the worklow, its provenance and the output metadata.
     */
    getWorkflowAllMetadataZipHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWorkflowAllMetadataZipHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets the metadata of a workflow
     * Gets the metadata of a workflow
     */
    getWorkflowMetadataHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWorkflowMetadataHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow/{id}/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TypedResultDescriptorFromJSON)(jsonValue));
        });
    }
    /**
     * Gets the metadata of a workflow
     * Gets the metadata of a workflow
     */
    getWorkflowMetadataHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWorkflowMetadataHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets the provenance of all datasets used in a workflow.
     * Gets the provenance of all datasets used in a workflow.
     */
    getWorkflowProvenanceHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWorkflowProvenanceHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow/{id}/provenance`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ProvenanceEntryFromJSON));
        });
    }
    /**
     * Gets the provenance of all datasets used in a workflow.
     * Gets the provenance of all datasets used in a workflow.
     */
    getWorkflowProvenanceHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWorkflowProvenanceHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves an existing Workflow.
     * Retrieves an existing Workflow.
     */
    loadWorkflowHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling loadWorkflowHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves an existing Workflow.
     * Retrieves an existing Workflow.
     */
    loadWorkflowHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loadWorkflowHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     */
    rasterStreamWebsocketRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rasterStreamWebsocket.');
            }
            if (requestParameters.spatialBounds === null || requestParameters.spatialBounds === undefined) {
                throw new runtime.RequiredError('spatialBounds', 'Required parameter requestParameters.spatialBounds was null or undefined when calling rasterStreamWebsocket.');
            }
            if (requestParameters.timeInterval === null || requestParameters.timeInterval === undefined) {
                throw new runtime.RequiredError('timeInterval', 'Required parameter requestParameters.timeInterval was null or undefined when calling rasterStreamWebsocket.');
            }
            if (requestParameters.spatialResolution === null || requestParameters.spatialResolution === undefined) {
                throw new runtime.RequiredError('spatialResolution', 'Required parameter requestParameters.spatialResolution was null or undefined when calling rasterStreamWebsocket.');
            }
            if (requestParameters.resultType === null || requestParameters.resultType === undefined) {
                throw new runtime.RequiredError('resultType', 'Required parameter requestParameters.resultType was null or undefined when calling rasterStreamWebsocket.');
            }
            const queryParameters = {};
            if (requestParameters.spatialBounds !== undefined) {
                queryParameters['spatialBounds'] = requestParameters.spatialBounds;
            }
            if (requestParameters.timeInterval !== undefined) {
                queryParameters['timeInterval'] = requestParameters.timeInterval;
            }
            if (requestParameters.spatialResolution !== undefined) {
                queryParameters['spatialResolution'] = requestParameters.spatialResolution;
            }
            if (requestParameters.resultType !== undefined) {
                queryParameters['resultType'] = requestParameters.resultType;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow/{id}/rasterStream`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     * Query a workflow raster result as a stream of tiles via a websocket connection.
     */
    rasterStreamWebsocket(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rasterStreamWebsocketRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Registers a new Workflow.
     * Registers a new Workflow.
     */
    registerWorkflowHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
                throw new runtime.RequiredError('workflow', 'Required parameter requestParameters.workflow was null or undefined when calling registerWorkflowHandler.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/workflow`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowToJSON)(requestParameters.workflow),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AddCollection200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Registers a new Workflow.
     * Registers a new Workflow.
     */
    registerWorkflowHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerWorkflowHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.WorkflowsApi = WorkflowsApi;
