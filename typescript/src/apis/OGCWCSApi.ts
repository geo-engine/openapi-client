/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DescribeCoverageRequest,
  GetCapabilitiesRequest,
  GetCoverageFormat,
  GetCoverageRequest,
  WcsService,
  WcsVersion,
} from '../models/index';
import {
    DescribeCoverageRequestFromJSON,
    DescribeCoverageRequestToJSON,
    GetCapabilitiesRequestFromJSON,
    GetCapabilitiesRequestToJSON,
    GetCoverageFormatFromJSON,
    GetCoverageFormatToJSON,
    GetCoverageRequestFromJSON,
    GetCoverageRequestToJSON,
    WcsServiceFromJSON,
    WcsServiceToJSON,
    WcsVersionFromJSON,
    WcsVersionToJSON,
} from '../models/index';

export interface WcsCapabilitiesHandlerRequest {
    workflow: string;
    service: WcsService;
    request: GetCapabilitiesRequest;
    version?: WcsVersion | null;
}

export interface WcsDescribeCoverageHandlerRequest {
    workflow: string;
    version: WcsVersion;
    service: WcsService;
    request: DescribeCoverageRequest;
    identifiers: string;
}

export interface WcsGetCoverageHandlerRequest {
    workflow: string;
    version: WcsVersion;
    service: WcsService;
    request: GetCoverageRequest;
    format: GetCoverageFormat;
    identifier: string;
    boundingbox: string;
    gridbasecrs: string;
    gridorigin?: string;
    gridoffsets?: string;
    time?: string;
    resx?: number | null;
    resy?: number | null;
    nodatavalue?: number | null;
}

/**
 * 
 */
export class OGCWCSApi extends runtime.BaseAPI {

    /**
     * Get WCS Capabilities
     * Get WCS Capabilities
     */
    async wcsCapabilitiesHandlerRaw(requestParameters: WcsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wcsCapabilitiesHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wcsCapabilitiesHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wcsCapabilitiesHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wcs/{workflow}?request=GetCapabilities`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get WCS Capabilities
     * Get WCS Capabilities
     */
    async wcsCapabilitiesHandler(requestParameters: WcsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.wcsCapabilitiesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get WCS Coverage Description
     * Get WCS Coverage Description
     */
    async wcsDescribeCoverageHandlerRaw(requestParameters: WcsDescribeCoverageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wcsDescribeCoverageHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wcsDescribeCoverageHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wcsDescribeCoverageHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wcsDescribeCoverageHandler.');
        }

        if (requestParameters.identifiers === null || requestParameters.identifiers === undefined) {
            throw new runtime.RequiredError('identifiers','Required parameter requestParameters.identifiers was null or undefined when calling wcsDescribeCoverageHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        if (requestParameters.identifiers !== undefined) {
            queryParameters['identifiers'] = requestParameters.identifiers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wcs/{workflow}?request=DescribeCoverage`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get WCS Coverage Description
     * Get WCS Coverage Description
     */
    async wcsDescribeCoverageHandler(requestParameters: WcsDescribeCoverageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.wcsDescribeCoverageHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get WCS Coverage
     * Get WCS Coverage
     */
    async wcsGetCoverageHandlerRaw(requestParameters: WcsGetCoverageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
            throw new runtime.RequiredError('workflow','Required parameter requestParameters.workflow was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.boundingbox === null || requestParameters.boundingbox === undefined) {
            throw new runtime.RequiredError('boundingbox','Required parameter requestParameters.boundingbox was null or undefined when calling wcsGetCoverageHandler.');
        }

        if (requestParameters.gridbasecrs === null || requestParameters.gridbasecrs === undefined) {
            throw new runtime.RequiredError('gridbasecrs','Required parameter requestParameters.gridbasecrs was null or undefined when calling wcsGetCoverageHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.identifier !== undefined) {
            queryParameters['identifier'] = requestParameters.identifier;
        }

        if (requestParameters.boundingbox !== undefined) {
            queryParameters['boundingbox'] = requestParameters.boundingbox;
        }

        if (requestParameters.gridbasecrs !== undefined) {
            queryParameters['gridbasecrs'] = requestParameters.gridbasecrs;
        }

        if (requestParameters.gridorigin !== undefined) {
            queryParameters['gridorigin'] = requestParameters.gridorigin;
        }

        if (requestParameters.gridoffsets !== undefined) {
            queryParameters['gridoffsets'] = requestParameters.gridoffsets;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.resx !== undefined) {
            queryParameters['resx'] = requestParameters.resx;
        }

        if (requestParameters.resy !== undefined) {
            queryParameters['resy'] = requestParameters.resy;
        }

        if (requestParameters.nodatavalue !== undefined) {
            queryParameters['nodatavalue'] = requestParameters.nodatavalue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wcs/{workflow}?request=GetCoverage`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get WCS Coverage
     * Get WCS Coverage
     */
    async wcsGetCoverageHandler(requestParameters: WcsGetCoverageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.wcsGetCoverageHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
