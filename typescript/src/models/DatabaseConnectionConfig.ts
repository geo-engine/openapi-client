/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseConnectionConfig
 */
export interface DatabaseConnectionConfig {
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectionConfig
     */
    database: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectionConfig
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectionConfig
     */
    password: string;
    /**
     * 
     * @type {number}
     * @memberof DatabaseConnectionConfig
     */
    port: number;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectionConfig
     */
    schema: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectionConfig
     */
    user: string;
}

/**
 * Check if a given object implements the DatabaseConnectionConfig interface.
 */
export function instanceOfDatabaseConnectionConfig(value: object): value is DatabaseConnectionConfig {
    if (!('database' in value) || value['database'] === undefined) return false;
    if (!('host' in value) || value['host'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('port' in value) || value['port'] === undefined) return false;
    if (!('schema' in value) || value['schema'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function DatabaseConnectionConfigFromJSON(json: any): DatabaseConnectionConfig {
    return DatabaseConnectionConfigFromJSONTyped(json, false);
}

export function DatabaseConnectionConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseConnectionConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'database': json['database'],
        'host': json['host'],
        'password': json['password'],
        'port': json['port'],
        'schema': json['schema'],
        'user': json['user'],
    };
}

export function DatabaseConnectionConfigToJSON(json: any): DatabaseConnectionConfig {
    return DatabaseConnectionConfigToJSONTyped(json, false);
}

export function DatabaseConnectionConfigToJSONTyped(value?: DatabaseConnectionConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'database': value['database'],
        'host': value['host'],
        'password': value['password'],
        'port': value['port'],
        'schema': value['schema'],
        'user': value['user'],
    };
}

