/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ArunaDataProviderDefinition
 */
export interface ArunaDataProviderDefinition {
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    apiToken: string;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    apiUrl: string;
    /**
     * 
     * @type {number}
     * @memberof ArunaDataProviderDefinition
     */
    cacheTtl?: number;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    filterLabel: string;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ArunaDataProviderDefinition
     */
    priority?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    projectId: string;
    /**
     * 
     * @type {string}
     * @memberof ArunaDataProviderDefinition
     */
    type: ArunaDataProviderDefinitionTypeEnum;
}


/**
 * @export
 */
export const ArunaDataProviderDefinitionTypeEnum = {
    Aruna: 'Aruna'
} as const;
export type ArunaDataProviderDefinitionTypeEnum = typeof ArunaDataProviderDefinitionTypeEnum[keyof typeof ArunaDataProviderDefinitionTypeEnum];


/**
 * Check if a given object implements the ArunaDataProviderDefinition interface.
 */
export function instanceOfArunaDataProviderDefinition(value: object): value is ArunaDataProviderDefinition {
    if (!('apiToken' in value) || value['apiToken'] === undefined) return false;
    if (!('apiUrl' in value) || value['apiUrl'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('filterLabel' in value) || value['filterLabel'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ArunaDataProviderDefinitionFromJSON(json: any): ArunaDataProviderDefinition {
    return ArunaDataProviderDefinitionFromJSONTyped(json, false);
}

export function ArunaDataProviderDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArunaDataProviderDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'apiToken': json['apiToken'],
        'apiUrl': json['apiUrl'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'description': json['description'],
        'filterLabel': json['filterLabel'],
        'id': json['id'],
        'name': json['name'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'projectId': json['projectId'],
        'type': json['type'],
    };
}

export function ArunaDataProviderDefinitionToJSON(json: any): ArunaDataProviderDefinition {
    return ArunaDataProviderDefinitionToJSONTyped(json, false);
}

export function ArunaDataProviderDefinitionToJSONTyped(value?: ArunaDataProviderDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiToken': value['apiToken'],
        'apiUrl': value['apiUrl'],
        'cacheTtl': value['cacheTtl'],
        'description': value['description'],
        'filterLabel': value['filterLabel'],
        'id': value['id'],
        'name': value['name'],
        'priority': value['priority'],
        'projectId': value['projectId'],
        'type': value['type'],
    };
}

