/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeGranularity } from './TimeGranularity';
import {
    TimeGranularityFromJSON,
    TimeGranularityFromJSONTyped,
    TimeGranularityToJSON,
} from './TimeGranularity';

/**
 * 
 * @export
 * @interface TimeStepWithType
 */
export interface TimeStepWithType {
    /**
     * 
     * @type {TimeGranularity}
     * @memberof TimeStepWithType
     */
    granularity: TimeGranularity;
    /**
     * 
     * @type {number}
     * @memberof TimeStepWithType
     */
    step: number;
    /**
     * 
     * @type {string}
     * @memberof TimeStepWithType
     */
    type: TimeStepWithTypeTypeEnum;
}


/**
 * @export
 */
export const TimeStepWithTypeTypeEnum = {
    Value: 'value'
} as const;
export type TimeStepWithTypeTypeEnum = typeof TimeStepWithTypeTypeEnum[keyof typeof TimeStepWithTypeTypeEnum];


/**
 * Check if a given object implements the TimeStepWithType interface.
 */
export function instanceOfTimeStepWithType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "granularity" in value;
    isInstance = isInstance && "step" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TimeStepWithTypeFromJSON(json: any): TimeStepWithType {
    return TimeStepWithTypeFromJSONTyped(json, false);
}

export function TimeStepWithTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimeStepWithType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'granularity': TimeGranularityFromJSON(json['granularity']),
        'step': json['step'],
        'type': json['type'],
    };
}

export function TimeStepWithTypeToJSON(value?: TimeStepWithType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'granularity': TimeGranularityToJSON(value.granularity),
        'step': value.step,
        'type': value.type,
    };
}

