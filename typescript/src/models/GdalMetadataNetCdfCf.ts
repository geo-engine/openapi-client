/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeStep } from './TimeStep';
import {
    TimeStepFromJSON,
    TimeStepFromJSONTyped,
    TimeStepToJSON,
    TimeStepToJSONTyped,
} from './TimeStep';
import type { RasterResultDescriptor } from './RasterResultDescriptor';
import {
    RasterResultDescriptorFromJSON,
    RasterResultDescriptorFromJSONTyped,
    RasterResultDescriptorToJSON,
    RasterResultDescriptorToJSONTyped,
} from './RasterResultDescriptor';
import type { GdalDatasetParameters } from './GdalDatasetParameters';
import {
    GdalDatasetParametersFromJSON,
    GdalDatasetParametersFromJSONTyped,
    GdalDatasetParametersToJSON,
    GdalDatasetParametersToJSONTyped,
} from './GdalDatasetParameters';

/**
 * Meta data for 4D `NetCDF` CF datasets
 * @export
 * @interface GdalMetadataNetCdfCf
 */
export interface GdalMetadataNetCdfCf {
    /**
     * A band offset specifies the first band index to use for the first point in time.
     * All other time steps are added to this offset.
     * @type {number}
     * @memberof GdalMetadataNetCdfCf
     */
    bandOffset: number;
    /**
     * 
     * @type {number}
     * @memberof GdalMetadataNetCdfCf
     */
    cacheTtl?: number;
    /**
     * 
     * @type {number}
     * @memberof GdalMetadataNetCdfCf
     */
    end: number;
    /**
     * 
     * @type {GdalDatasetParameters}
     * @memberof GdalMetadataNetCdfCf
     */
    params: GdalDatasetParameters;
    /**
     * 
     * @type {RasterResultDescriptor}
     * @memberof GdalMetadataNetCdfCf
     */
    resultDescriptor: RasterResultDescriptor;
    /**
     * 
     * @type {number}
     * @memberof GdalMetadataNetCdfCf
     */
    start: number;
    /**
     * 
     * @type {TimeStep}
     * @memberof GdalMetadataNetCdfCf
     */
    step: TimeStep;
    /**
     * 
     * @type {string}
     * @memberof GdalMetadataNetCdfCf
     */
    type: GdalMetadataNetCdfCfTypeEnum;
}


/**
 * @export
 */
export const GdalMetadataNetCdfCfTypeEnum = {
    GdalMetaDataNetCdfCf: 'GdalMetaDataNetCdfCf'
} as const;
export type GdalMetadataNetCdfCfTypeEnum = typeof GdalMetadataNetCdfCfTypeEnum[keyof typeof GdalMetadataNetCdfCfTypeEnum];


/**
 * Check if a given object implements the GdalMetadataNetCdfCf interface.
 */
export function instanceOfGdalMetadataNetCdfCf(value: object): value is GdalMetadataNetCdfCf {
    if (!('bandOffset' in value) || value['bandOffset'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    if (!('params' in value) || value['params'] === undefined) return false;
    if (!('resultDescriptor' in value) || value['resultDescriptor'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('step' in value) || value['step'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function GdalMetadataNetCdfCfFromJSON(json: any): GdalMetadataNetCdfCf {
    return GdalMetadataNetCdfCfFromJSONTyped(json, false);
}

export function GdalMetadataNetCdfCfFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdalMetadataNetCdfCf {
    if (json == null) {
        return json;
    }
    return {
        
        'bandOffset': json['bandOffset'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'end': json['end'],
        'params': GdalDatasetParametersFromJSON(json['params']),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'start': json['start'],
        'step': TimeStepFromJSON(json['step']),
        'type': json['type'],
    };
}

export function GdalMetadataNetCdfCfToJSON(json: any): GdalMetadataNetCdfCf {
    return GdalMetadataNetCdfCfToJSONTyped(json, false);
}

export function GdalMetadataNetCdfCfToJSONTyped(value?: GdalMetadataNetCdfCf | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bandOffset': value['bandOffset'],
        'cacheTtl': value['cacheTtl'],
        'end': value['end'],
        'params': GdalDatasetParametersToJSON(value['params']),
        'resultDescriptor': RasterResultDescriptorToJSON(value['resultDescriptor']),
        'start': value['start'],
        'step': TimeStepToJSON(value['step']),
        'type': value['type'],
    };
}

