/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RasterResultDescriptor } from './RasterResultDescriptor';
import {
    RasterResultDescriptorFromJSON,
    RasterResultDescriptorFromJSONTyped,
    RasterResultDescriptorToJSON,
    RasterResultDescriptorToJSONTyped,
} from './RasterResultDescriptor';
import type { GdalLoadingInfoTemporalSlice } from './GdalLoadingInfoTemporalSlice';
import {
    GdalLoadingInfoTemporalSliceFromJSON,
    GdalLoadingInfoTemporalSliceFromJSONTyped,
    GdalLoadingInfoTemporalSliceToJSON,
    GdalLoadingInfoTemporalSliceToJSONTyped,
} from './GdalLoadingInfoTemporalSlice';

/**
 * 
 * @export
 * @interface GdalMetaDataList
 */
export interface GdalMetaDataList {
    /**
     * 
     * @type {Array<GdalLoadingInfoTemporalSlice>}
     * @memberof GdalMetaDataList
     */
    params: Array<GdalLoadingInfoTemporalSlice>;
    /**
     * 
     * @type {RasterResultDescriptor}
     * @memberof GdalMetaDataList
     */
    resultDescriptor: RasterResultDescriptor;
    /**
     * 
     * @type {string}
     * @memberof GdalMetaDataList
     */
    type: GdalMetaDataListTypeEnum;
}


/**
 * @export
 */
export const GdalMetaDataListTypeEnum = {
    GdalMetaDataList: 'GdalMetaDataList'
} as const;
export type GdalMetaDataListTypeEnum = typeof GdalMetaDataListTypeEnum[keyof typeof GdalMetaDataListTypeEnum];


/**
 * Check if a given object implements the GdalMetaDataList interface.
 */
export function instanceOfGdalMetaDataList(value: object): value is GdalMetaDataList {
    if (!('params' in value) || value['params'] === undefined) return false;
    if (!('resultDescriptor' in value) || value['resultDescriptor'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function GdalMetaDataListFromJSON(json: any): GdalMetaDataList {
    return GdalMetaDataListFromJSONTyped(json, false);
}

export function GdalMetaDataListFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdalMetaDataList {
    if (json == null) {
        return json;
    }
    return {
        
        'params': ((json['params'] as Array<any>).map(GdalLoadingInfoTemporalSliceFromJSON)),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'type': json['type'],
    };
}

export function GdalMetaDataListToJSON(json: any): GdalMetaDataList {
    return GdalMetaDataListToJSONTyped(json, false);
}

export function GdalMetaDataListToJSONTyped(value?: GdalMetaDataList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'params': ((value['params'] as Array<any>).map(GdalLoadingInfoTemporalSliceToJSON)),
        'resultDescriptor': RasterResultDescriptorToJSON(value['resultDescriptor']),
        'type': value['type'],
    };
}

