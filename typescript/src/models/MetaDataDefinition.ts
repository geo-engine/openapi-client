/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    GdalMetaDataListWithType,
    instanceOfGdalMetaDataListWithType,
    GdalMetaDataListWithTypeFromJSON,
    GdalMetaDataListWithTypeFromJSONTyped,
    GdalMetaDataListWithTypeToJSON,
} from './GdalMetaDataListWithType';
import {
    GdalMetaDataRegularWithType,
    instanceOfGdalMetaDataRegularWithType,
    GdalMetaDataRegularWithTypeFromJSON,
    GdalMetaDataRegularWithTypeFromJSONTyped,
    GdalMetaDataRegularWithTypeToJSON,
} from './GdalMetaDataRegularWithType';
import {
    GdalMetaDataStaticWithType,
    instanceOfGdalMetaDataStaticWithType,
    GdalMetaDataStaticWithTypeFromJSON,
    GdalMetaDataStaticWithTypeFromJSONTyped,
    GdalMetaDataStaticWithTypeToJSON,
} from './GdalMetaDataStaticWithType';
import {
    GdalMetadataNetCdfCfWithType,
    instanceOfGdalMetadataNetCdfCfWithType,
    GdalMetadataNetCdfCfWithTypeFromJSON,
    GdalMetadataNetCdfCfWithTypeFromJSONTyped,
    GdalMetadataNetCdfCfWithTypeToJSON,
} from './GdalMetadataNetCdfCfWithType';
import {
    MockMetaDataWithType,
    instanceOfMockMetaDataWithType,
    MockMetaDataWithTypeFromJSON,
    MockMetaDataWithTypeFromJSONTyped,
    MockMetaDataWithTypeToJSON,
} from './MockMetaDataWithType';
import {
    OgrMetaDataWithType,
    instanceOfOgrMetaDataWithType,
    OgrMetaDataWithTypeFromJSON,
    OgrMetaDataWithTypeFromJSONTyped,
    OgrMetaDataWithTypeToJSON,
} from './OgrMetaDataWithType';

/**
 * @type MetaDataDefinition
 * 
 * @export
 */
export type MetaDataDefinition = { type: 'GdalMetaDataList' } & GdalMetaDataListWithType | { type: 'GdalMetaDataRegular' } & GdalMetaDataRegularWithType | { type: 'GdalMetadataNetCdfCf' } & GdalMetadataNetCdfCfWithType | { type: 'GdalStatic' } & GdalMetaDataStaticWithType | { type: 'MockMetaData' } & MockMetaDataWithType | { type: 'OgrMetaData' } & OgrMetaDataWithType;

export function MetaDataDefinitionFromJSON(json: any): MetaDataDefinition {
    return MetaDataDefinitionFromJSONTyped(json, false);
}

export function MetaDataDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetaDataDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return {...GdalMetaDataListWithTypeFromJSONTyped(json, true), type: 'GdalMetaDataList'};
        case 'GdalMetaDataRegular':
            return {...GdalMetaDataRegularWithTypeFromJSONTyped(json, true), type: 'GdalMetaDataRegular'};
        case 'GdalMetadataNetCdfCf':
            return {...GdalMetadataNetCdfCfWithTypeFromJSONTyped(json, true), type: 'GdalMetadataNetCdfCf'};
        case 'GdalStatic':
            return {...GdalMetaDataStaticWithTypeFromJSONTyped(json, true), type: 'GdalStatic'};
        case 'MockMetaData':
            return {...MockMetaDataWithTypeFromJSONTyped(json, true), type: 'MockMetaData'};
        case 'OgrMetaData':
            return {...OgrMetaDataWithTypeFromJSONTyped(json, true), type: 'OgrMetaData'};
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}

export function MetaDataDefinitionToJSON(value?: MetaDataDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return GdalMetaDataListWithTypeToJSON(value);
        case 'GdalMetaDataRegular':
            return GdalMetaDataRegularWithTypeToJSON(value);
        case 'GdalMetadataNetCdfCf':
            return GdalMetadataNetCdfCfWithTypeToJSON(value);
        case 'GdalStatic':
            return GdalMetaDataStaticWithTypeToJSON(value);
        case 'MockMetaData':
            return MockMetaDataWithTypeToJSON(value);
        case 'OgrMetaData':
            return OgrMetaDataWithTypeToJSON(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }

}

