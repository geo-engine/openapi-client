/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate2D } from './Coordinate2D';
import {
    Coordinate2DFromJSON,
    Coordinate2DFromJSONTyped,
    Coordinate2DToJSON,
} from './Coordinate2D';

/**
 * A partition of space that include the upper left but excludes the lower right coordinate
 * @export
 * @interface SpatialPartition2D
 */
export interface SpatialPartition2D {
    /**
     * 
     * @type {Coordinate2D}
     * @memberof SpatialPartition2D
     */
    lowerRightCoordinate: Coordinate2D;
    /**
     * 
     * @type {Coordinate2D}
     * @memberof SpatialPartition2D
     */
    upperLeftCoordinate: Coordinate2D;
}

/**
 * Check if a given object implements the SpatialPartition2D interface.
 */
export function instanceOfSpatialPartition2D(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "lowerRightCoordinate" in value;
    isInstance = isInstance && "upperLeftCoordinate" in value;

    return isInstance;
}

export function SpatialPartition2DFromJSON(json: any): SpatialPartition2D {
    return SpatialPartition2DFromJSONTyped(json, false);
}

export function SpatialPartition2DFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpatialPartition2D {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lowerRightCoordinate': Coordinate2DFromJSON(json['lowerRightCoordinate']),
        'upperLeftCoordinate': Coordinate2DFromJSON(json['upperLeftCoordinate']),
    };
}

export function SpatialPartition2DToJSON(value?: SpatialPartition2D | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'lowerRightCoordinate': Coordinate2DToJSON(value.lowerRightCoordinate),
        'upperLeftCoordinate': Coordinate2DToJSON(value.upperLeftCoordinate),
    };
}

