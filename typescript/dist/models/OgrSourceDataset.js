"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgrSourceDatasetToJSON = exports.OgrSourceDatasetFromJSONTyped = exports.OgrSourceDatasetFromJSON = exports.instanceOfOgrSourceDataset = void 0;
const runtime_1 = require("../runtime");
const OgrSourceColumnSpec_1 = require("./OgrSourceColumnSpec");
const OgrSourceDatasetTimeType_1 = require("./OgrSourceDatasetTimeType");
const OgrSourceErrorSpec_1 = require("./OgrSourceErrorSpec");
const TypedGeometry_1 = require("./TypedGeometry");
const VectorDataType_1 = require("./VectorDataType");
/**
 * Check if a given object implements the OgrSourceDataset interface.
 */
function instanceOfOgrSourceDataset(value) {
    let isInstance = true;
    isInstance = isInstance && "fileName" in value;
    isInstance = isInstance && "layerName" in value;
    isInstance = isInstance && "onError" in value;
    return isInstance;
}
exports.instanceOfOgrSourceDataset = instanceOfOgrSourceDataset;
function OgrSourceDatasetFromJSON(json) {
    return OgrSourceDatasetFromJSONTyped(json, false);
}
exports.OgrSourceDatasetFromJSON = OgrSourceDatasetFromJSON;
function OgrSourceDatasetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'attributeQuery': !(0, runtime_1.exists)(json, 'attributeQuery') ? undefined : json['attributeQuery'],
        'cacheTtl': !(0, runtime_1.exists)(json, 'cacheTtl') ? undefined : json['cacheTtl'],
        'columns': !(0, runtime_1.exists)(json, 'columns') ? undefined : (0, OgrSourceColumnSpec_1.OgrSourceColumnSpecFromJSON)(json['columns']),
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : (0, VectorDataType_1.VectorDataTypeFromJSON)(json['dataType']),
        'defaultGeometry': !(0, runtime_1.exists)(json, 'defaultGeometry') ? undefined : (0, TypedGeometry_1.TypedGeometryFromJSON)(json['defaultGeometry']),
        'fileName': json['fileName'],
        'forceOgrSpatialFilter': !(0, runtime_1.exists)(json, 'forceOgrSpatialFilter') ? undefined : json['forceOgrSpatialFilter'],
        'forceOgrTimeFilter': !(0, runtime_1.exists)(json, 'forceOgrTimeFilter') ? undefined : json['forceOgrTimeFilter'],
        'layerName': json['layerName'],
        'onError': (0, OgrSourceErrorSpec_1.OgrSourceErrorSpecFromJSON)(json['onError']),
        'sqlQuery': !(0, runtime_1.exists)(json, 'sqlQuery') ? undefined : json['sqlQuery'],
        'time': !(0, runtime_1.exists)(json, 'time') ? undefined : (0, OgrSourceDatasetTimeType_1.OgrSourceDatasetTimeTypeFromJSON)(json['time']),
    };
}
exports.OgrSourceDatasetFromJSONTyped = OgrSourceDatasetFromJSONTyped;
function OgrSourceDatasetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'attributeQuery': value.attributeQuery,
        'cacheTtl': value.cacheTtl,
        'columns': (0, OgrSourceColumnSpec_1.OgrSourceColumnSpecToJSON)(value.columns),
        'dataType': (0, VectorDataType_1.VectorDataTypeToJSON)(value.dataType),
        'defaultGeometry': (0, TypedGeometry_1.TypedGeometryToJSON)(value.defaultGeometry),
        'fileName': value.fileName,
        'forceOgrSpatialFilter': value.forceOgrSpatialFilter,
        'forceOgrTimeFilter': value.forceOgrTimeFilter,
        'layerName': value.layerName,
        'onError': (0, OgrSourceErrorSpec_1.OgrSourceErrorSpecToJSON)(value.onError),
        'sqlQuery': value.sqlQuery,
        'time': (0, OgrSourceDatasetTimeType_1.OgrSourceDatasetTimeTypeToJSON)(value.time),
    };
}
exports.OgrSourceDatasetToJSON = OgrSourceDatasetToJSON;
