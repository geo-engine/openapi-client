"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeasurementToJSON = exports.MeasurementFromJSONTyped = exports.MeasurementFromJSON = void 0;
const ClassificationMeasurementWithType_1 = require("./ClassificationMeasurementWithType");
const ContinuousMeasurementWithType_1 = require("./ContinuousMeasurementWithType");
const UnitlessMeasurement_1 = require("./UnitlessMeasurement");
function MeasurementFromJSON(json) {
    return MeasurementFromJSONTyped(json, false);
}
exports.MeasurementFromJSON = MeasurementFromJSON;
function MeasurementFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'classification':
            return Object.assign(Object.assign({}, (0, ClassificationMeasurementWithType_1.ClassificationMeasurementWithTypeFromJSONTyped)(json, true)), { type: 'classification' });
        case 'continuous':
            return Object.assign(Object.assign({}, (0, ContinuousMeasurementWithType_1.ContinuousMeasurementWithTypeFromJSONTyped)(json, true)), { type: 'continuous' });
        case 'unitless':
            return Object.assign(Object.assign({}, (0, UnitlessMeasurement_1.UnitlessMeasurementFromJSONTyped)(json, true)), { type: 'unitless' });
        default:
            throw new Error(`No variant of Measurement exists with 'type=${json['type']}'`);
    }
}
exports.MeasurementFromJSONTyped = MeasurementFromJSONTyped;
function MeasurementToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'classification':
            return (0, ClassificationMeasurementWithType_1.ClassificationMeasurementWithTypeToJSON)(value);
        case 'continuous':
            return (0, ContinuousMeasurementWithType_1.ContinuousMeasurementWithTypeToJSON)(value);
        case 'unitless':
            return (0, UnitlessMeasurement_1.UnitlessMeasurementToJSON)(value);
        default:
            throw new Error(`No variant of Measurement exists with 'type=${value['type']}'`);
    }
}
exports.MeasurementToJSON = MeasurementToJSON;
