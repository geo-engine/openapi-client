/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddLayer,
  AddLayerCollection,
  IdResponse,
  Layer,
  LayerCollection,
  LayerProviderListing,
  ProviderCapabilities,
  SearchType,
  TaskResponse,
  TypedDataProviderDefinition,
  UpdateLayer,
  UpdateLayerCollection,
} from '../models/index';
import {
    AddLayerFromJSON,
    AddLayerToJSON,
    AddLayerCollectionFromJSON,
    AddLayerCollectionToJSON,
    IdResponseFromJSON,
    IdResponseToJSON,
    LayerFromJSON,
    LayerToJSON,
    LayerCollectionFromJSON,
    LayerCollectionToJSON,
    LayerProviderListingFromJSON,
    LayerProviderListingToJSON,
    ProviderCapabilitiesFromJSON,
    ProviderCapabilitiesToJSON,
    SearchTypeFromJSON,
    SearchTypeToJSON,
    TaskResponseFromJSON,
    TaskResponseToJSON,
    TypedDataProviderDefinitionFromJSON,
    TypedDataProviderDefinitionToJSON,
    UpdateLayerFromJSON,
    UpdateLayerToJSON,
    UpdateLayerCollectionFromJSON,
    UpdateLayerCollectionToJSON,
} from '../models/index';

export interface AddCollectionRequest {
    collection: string;
    addLayerCollection: AddLayerCollection;
}

export interface AddExistingCollectionToCollectionRequest {
    parent: string;
    collection: string;
}

export interface AddExistingLayerToCollectionRequest {
    collection: string;
    layer: string;
}

export interface AddLayerRequest {
    collection: string;
    addLayer: AddLayer;
}

export interface AddProviderRequest {
    typedDataProviderDefinition: TypedDataProviderDefinition;
}

export interface AutocompleteHandlerRequest {
    provider: string;
    collection: string;
    searchType: SearchType;
    searchString: string;
    limit: number;
    offset: number;
}

export interface DeleteProviderRequest {
    provider: string;
}

export interface GetProviderDefinitionRequest {
    provider: string;
}

export interface LayerHandlerRequest {
    provider: string;
    layer: string;
}

export interface LayerToDatasetRequest {
    provider: string;
    layer: string;
}

export interface LayerToWorkflowIdHandlerRequest {
    provider: string;
    layer: string;
}

export interface ListCollectionHandlerRequest {
    provider: string;
    collection: string;
    offset: number;
    limit: number;
}

export interface ListProvidersRequest {
    offset: number;
    limit: number;
}

export interface ListRootCollectionsHandlerRequest {
    offset: number;
    limit: number;
}

export interface ProviderCapabilitiesHandlerRequest {
    provider: string;
}

export interface RemoveCollectionRequest {
    collection: string;
}

export interface RemoveCollectionFromCollectionRequest {
    parent: string;
    collection: string;
}

export interface RemoveLayerRequest {
    layer: string;
}

export interface RemoveLayerFromCollectionRequest {
    collection: string;
    layer: string;
}

export interface SearchHandlerRequest {
    provider: string;
    collection: string;
    searchType: SearchType;
    searchString: string;
    limit: number;
    offset: number;
}

export interface UpdateCollectionRequest {
    collection: string;
    updateLayerCollection: UpdateLayerCollection;
}

export interface UpdateLayerRequest {
    layer: string;
    updateLayer: UpdateLayer;
}

export interface UpdateProviderDefinitionRequest {
    provider: string;
    typedDataProviderDefinition: TypedDataProviderDefinition;
}

/**
 * 
 */
export class LayersApi extends runtime.BaseAPI {

    /**
     * Add a new collection to an existing collection
     */
    async addCollectionRaw(requestParameters: AddCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling addCollection().'
            );
        }

        if (requestParameters['addLayerCollection'] == null) {
            throw new runtime.RequiredError(
                'addLayerCollection',
                'Required parameter "addLayerCollection" was null or undefined when calling addCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}/collections`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLayerCollectionToJSON(requestParameters['addLayerCollection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Add a new collection to an existing collection
     */
    async addCollection(requestParameters: AddCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.addCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add an existing collection to a collection
     */
    async addExistingCollectionToCollectionRaw(requestParameters: AddExistingCollectionToCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parent'] == null) {
            throw new runtime.RequiredError(
                'parent',
                'Required parameter "parent" was null or undefined when calling addExistingCollectionToCollection().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling addExistingCollectionToCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{parent}/collections/{collection}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters['parent']))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add an existing collection to a collection
     */
    async addExistingCollectionToCollection(requestParameters: AddExistingCollectionToCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addExistingCollectionToCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Add an existing layer to a collection
     */
    async addExistingLayerToCollectionRaw(requestParameters: AddExistingLayerToCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling addExistingLayerToCollection().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling addExistingLayerToCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}/layers/{layer}`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add an existing layer to a collection
     */
    async addExistingLayerToCollection(requestParameters: AddExistingLayerToCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addExistingLayerToCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Add a new layer to a collection
     */
    async addLayerRaw(requestParameters: AddLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling addLayer().'
            );
        }

        if (requestParameters['addLayer'] == null) {
            throw new runtime.RequiredError(
                'addLayer',
                'Required parameter "addLayer" was null or undefined when calling addLayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}/layers`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLayerToJSON(requestParameters['addLayer']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Add a new layer to a collection
     */
    async addLayer(requestParameters: AddLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.addLayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new provider
     */
    async addProviderRaw(requestParameters: AddProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['typedDataProviderDefinition'] == null) {
            throw new runtime.RequiredError(
                'typedDataProviderDefinition',
                'Required parameter "typedDataProviderDefinition" was null or undefined when calling addProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/providers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypedDataProviderDefinitionToJSON(requestParameters['typedDataProviderDefinition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Add a new provider
     */
    async addProvider(requestParameters: AddProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.addProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Autocompletes the search on the contents of the collection of the given provider
     */
    async autocompleteHandlerRaw(requestParameters: AutocompleteHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling autocompleteHandler().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling autocompleteHandler().'
            );
        }

        if (requestParameters['searchType'] == null) {
            throw new runtime.RequiredError(
                'searchType',
                'Required parameter "searchType" was null or undefined when calling autocompleteHandler().'
            );
        }

        if (requestParameters['searchString'] == null) {
            throw new runtime.RequiredError(
                'searchString',
                'Required parameter "searchString" was null or undefined when calling autocompleteHandler().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling autocompleteHandler().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling autocompleteHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchType'] != null) {
            queryParameters['searchType'] = requestParameters['searchType'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['searchString'] = requestParameters['searchString'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/collections/search/autocomplete/{provider}/{collection}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Autocompletes the search on the contents of the collection of the given provider
     */
    async autocompleteHandler(requestParameters: AutocompleteHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.autocompleteHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing provider
     */
    async deleteProviderRaw(requestParameters: DeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling deleteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/providers/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing provider
     */
    async deleteProvider(requestParameters: DeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProviderRaw(requestParameters, initOverrides);
    }

    /**
     * Get an existing provider\'s definition
     */
    async getProviderDefinitionRaw(requestParameters: GetProviderDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypedDataProviderDefinition>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling getProviderDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/providers/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypedDataProviderDefinitionFromJSON(jsonValue));
    }

    /**
     * Get an existing provider\'s definition
     */
    async getProviderDefinition(requestParameters: GetProviderDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypedDataProviderDefinition> {
        const response = await this.getProviderDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the layer of the given provider
     */
    async layerHandlerRaw(requestParameters: LayerHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling layerHandler().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling layerHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/{provider}/{layer}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Retrieves the layer of the given provider
     */
    async layerHandler(requestParameters: LayerHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Layer> {
        const response = await this.layerHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Persist a raster layer from a provider as a dataset.
     */
    async layerToDatasetRaw(requestParameters: LayerToDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling layerToDataset().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling layerToDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/{provider}/{layer}/dataset`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * Persist a raster layer from a provider as a dataset.
     */
    async layerToDataset(requestParameters: LayerToDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskResponse> {
        const response = await this.layerToDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers a layer from a provider as a workflow and returns the workflow id
     */
    async layerToWorkflowIdHandlerRaw(requestParameters: LayerToWorkflowIdHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling layerToWorkflowIdHandler().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling layerToWorkflowIdHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/{provider}/{layer}/workflowId`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Registers a layer from a provider as a workflow and returns the workflow id
     */
    async layerToWorkflowIdHandler(requestParameters: LayerToWorkflowIdHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.layerToWorkflowIdHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the contents of the collection of the given provider
     */
    async listCollectionHandlerRaw(requestParameters: ListCollectionHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayerCollection>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling listCollectionHandler().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling listCollectionHandler().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling listCollectionHandler().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling listCollectionHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/collections/{provider}/{collection}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerCollectionFromJSON(jsonValue));
    }

    /**
     * List the contents of the collection of the given provider
     */
    async listCollectionHandler(requestParameters: ListCollectionHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayerCollection> {
        const response = await this.listCollectionHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all providers
     */
    async listProvidersRaw(requestParameters: ListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LayerProviderListing>>> {
        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling listProviders().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling listProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LayerProviderListingFromJSON));
    }

    /**
     * List all providers
     */
    async listProviders(requestParameters: ListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LayerProviderListing>> {
        const response = await this.listProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all layer collections
     */
    async listRootCollectionsHandlerRaw(requestParameters: ListRootCollectionsHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayerCollection>> {
        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling listRootCollectionsHandler().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling listRootCollectionsHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerCollectionFromJSON(jsonValue));
    }

    /**
     * List all layer collections
     */
    async listRootCollectionsHandler(requestParameters: ListRootCollectionsHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayerCollection> {
        const response = await this.listRootCollectionsHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providerCapabilitiesHandlerRaw(requestParameters: ProviderCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderCapabilities>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling providerCapabilitiesHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/{provider}/capabilities`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderCapabilitiesFromJSON(jsonValue));
    }

    /**
     */
    async providerCapabilitiesHandler(requestParameters: ProviderCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderCapabilities> {
        const response = await this.providerCapabilitiesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a collection
     */
    async removeCollectionRaw(requestParameters: RemoveCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling removeCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a collection
     */
    async removeCollection(requestParameters: RemoveCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a collection from a collection
     */
    async removeCollectionFromCollectionRaw(requestParameters: RemoveCollectionFromCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parent'] == null) {
            throw new runtime.RequiredError(
                'parent',
                'Required parameter "parent" was null or undefined when calling removeCollectionFromCollection().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling removeCollectionFromCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{parent}/collections/{collection}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters['parent']))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a collection from a collection
     */
    async removeCollectionFromCollection(requestParameters: RemoveCollectionFromCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeCollectionFromCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a collection
     */
    async removeLayerRaw(requestParameters: RemoveLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling removeLayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/layers/{layer}`.replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a collection
     */
    async removeLayer(requestParameters: RemoveLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeLayerRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a layer from a collection
     */
    async removeLayerFromCollectionRaw(requestParameters: RemoveLayerFromCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling removeLayerFromCollection().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling removeLayerFromCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}/layers/{layer}`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a layer from a collection
     */
    async removeLayerFromCollection(requestParameters: RemoveLayerFromCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeLayerFromCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Searches the contents of the collection of the given provider
     */
    async searchHandlerRaw(requestParameters: SearchHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayerCollection>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling searchHandler().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling searchHandler().'
            );
        }

        if (requestParameters['searchType'] == null) {
            throw new runtime.RequiredError(
                'searchType',
                'Required parameter "searchType" was null or undefined when calling searchHandler().'
            );
        }

        if (requestParameters['searchString'] == null) {
            throw new runtime.RequiredError(
                'searchString',
                'Required parameter "searchString" was null or undefined when calling searchHandler().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling searchHandler().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling searchHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchType'] != null) {
            queryParameters['searchType'] = requestParameters['searchType'];
        }

        if (requestParameters['searchString'] != null) {
            queryParameters['searchString'] = requestParameters['searchString'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layers/collections/search/{provider}/{collection}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerCollectionFromJSON(jsonValue));
    }

    /**
     * Searches the contents of the collection of the given provider
     */
    async searchHandler(requestParameters: SearchHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayerCollection> {
        const response = await this.searchHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a collection
     */
    async updateCollectionRaw(requestParameters: UpdateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling updateCollection().'
            );
        }

        if (requestParameters['updateLayerCollection'] == null) {
            throw new runtime.RequiredError(
                'updateLayerCollection',
                'Required parameter "updateLayerCollection" was null or undefined when calling updateCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/collections/{collection}`.replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters['collection']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLayerCollectionToJSON(requestParameters['updateLayerCollection']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a collection
     */
    async updateCollection(requestParameters: UpdateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Update a layer
     */
    async updateLayerRaw(requestParameters: UpdateLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling updateLayer().'
            );
        }

        if (requestParameters['updateLayer'] == null) {
            throw new runtime.RequiredError(
                'updateLayer',
                'Required parameter "updateLayer" was null or undefined when calling updateLayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/layers/{layer}`.replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLayerToJSON(requestParameters['updateLayer']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a layer
     */
    async updateLayer(requestParameters: UpdateLayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateLayerRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing provider\'s definition
     */
    async updateProviderDefinitionRaw(requestParameters: UpdateProviderDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling updateProviderDefinition().'
            );
        }

        if (requestParameters['typedDataProviderDefinition'] == null) {
            throw new runtime.RequiredError(
                'typedDataProviderDefinition',
                'Required parameter "typedDataProviderDefinition" was null or undefined when calling updateProviderDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/layerDb/providers/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypedDataProviderDefinitionToJSON(requestParameters['typedDataProviderDefinition']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing provider\'s definition
     */
    async updateProviderDefinition(requestParameters: UpdateProviderDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProviderDefinitionRaw(requestParameters, initOverrides);
    }

}
