"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgrSourceTimeFormatFromJSON = OgrSourceTimeFormatFromJSON;
exports.OgrSourceTimeFormatFromJSONTyped = OgrSourceTimeFormatFromJSONTyped;
exports.OgrSourceTimeFormatToJSON = OgrSourceTimeFormatToJSON;
exports.OgrSourceTimeFormatToJSONTyped = OgrSourceTimeFormatToJSONTyped;
const OgrSourceTimeFormatAuto_1 = require("./OgrSourceTimeFormatAuto");
const OgrSourceTimeFormatCustom_1 = require("./OgrSourceTimeFormatCustom");
const OgrSourceTimeFormatUnixTimeStamp_1 = require("./OgrSourceTimeFormatUnixTimeStamp");
function OgrSourceTimeFormatFromJSON(json) {
    return OgrSourceTimeFormatFromJSONTyped(json, false);
}
function OgrSourceTimeFormatFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['format']) {
        case 'auto':
            return Object.assign({}, (0, OgrSourceTimeFormatAuto_1.OgrSourceTimeFormatAutoFromJSONTyped)(json, true), { format: 'auto' });
        case 'custom':
            return Object.assign({}, (0, OgrSourceTimeFormatCustom_1.OgrSourceTimeFormatCustomFromJSONTyped)(json, true), { format: 'custom' });
        case 'unixTimeStamp':
            return Object.assign({}, (0, OgrSourceTimeFormatUnixTimeStamp_1.OgrSourceTimeFormatUnixTimeStampFromJSONTyped)(json, true), { format: 'unixTimeStamp' });
        default:
            throw new Error(`No variant of OgrSourceTimeFormat exists with 'format=${json['format']}'`);
    }
}
function OgrSourceTimeFormatToJSON(json) {
    return OgrSourceTimeFormatToJSONTyped(json, false);
}
function OgrSourceTimeFormatToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['format']) {
        case 'auto':
            return Object.assign({}, (0, OgrSourceTimeFormatAuto_1.OgrSourceTimeFormatAutoToJSON)(value), { format: 'auto' });
        case 'custom':
            return Object.assign({}, (0, OgrSourceTimeFormatCustom_1.OgrSourceTimeFormatCustomToJSON)(value), { format: 'custom' });
        case 'unixTimeStamp':
            return Object.assign({}, (0, OgrSourceTimeFormatUnixTimeStamp_1.OgrSourceTimeFormatUnixTimeStampToJSON)(value), { format: 'unixTimeStamp' });
        default:
            throw new Error(`No variant of OgrSourceTimeFormat exists with 'format=${value['format']}'`);
    }
}
