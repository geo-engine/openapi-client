/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GdalDatasetParameters } from './GdalDatasetParameters';
import {
    GdalDatasetParametersFromJSON,
    GdalDatasetParametersFromJSONTyped,
    GdalDatasetParametersToJSON,
} from './GdalDatasetParameters';
import type { RasterResultDescriptor } from './RasterResultDescriptor';
import {
    RasterResultDescriptorFromJSON,
    RasterResultDescriptorFromJSONTyped,
    RasterResultDescriptorToJSON,
} from './RasterResultDescriptor';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
} from './TimeInterval';

/**
 * 
 * @export
 * @interface GdalMetaDataStatic
 */
export interface GdalMetaDataStatic {
    /**
     * 
     * @type {number}
     * @memberof GdalMetaDataStatic
     */
    cacheTtl?: number;
    /**
     * 
     * @type {GdalDatasetParameters}
     * @memberof GdalMetaDataStatic
     */
    params: GdalDatasetParameters;
    /**
     * 
     * @type {RasterResultDescriptor}
     * @memberof GdalMetaDataStatic
     */
    resultDescriptor: RasterResultDescriptor;
    /**
     * 
     * @type {TimeInterval}
     * @memberof GdalMetaDataStatic
     */
    time?: TimeInterval | null;
}

/**
 * Check if a given object implements the GdalMetaDataStatic interface.
 */
export function instanceOfGdalMetaDataStatic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "resultDescriptor" in value;

    return isInstance;
}

export function GdalMetaDataStaticFromJSON(json: any): GdalMetaDataStatic {
    return GdalMetaDataStaticFromJSONTyped(json, false);
}

export function GdalMetaDataStaticFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdalMetaDataStatic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cacheTtl': !exists(json, 'cacheTtl') ? undefined : json['cacheTtl'],
        'params': GdalDatasetParametersFromJSON(json['params']),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'time': !exists(json, 'time') ? undefined : TimeIntervalFromJSON(json['time']),
    };
}

export function GdalMetaDataStaticToJSON(value?: GdalMetaDataStatic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cacheTtl': value.cacheTtl,
        'params': GdalDatasetParametersToJSON(value.params),
        'resultDescriptor': RasterResultDescriptorToJSON(value.resultDescriptor),
        'time': TimeIntervalToJSON(value.time),
    };
}

