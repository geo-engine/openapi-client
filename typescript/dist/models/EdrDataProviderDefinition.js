"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdrDataProviderDefinitionTypeEnum = void 0;
exports.instanceOfEdrDataProviderDefinition = instanceOfEdrDataProviderDefinition;
exports.EdrDataProviderDefinitionFromJSON = EdrDataProviderDefinitionFromJSON;
exports.EdrDataProviderDefinitionFromJSONTyped = EdrDataProviderDefinitionFromJSONTyped;
exports.EdrDataProviderDefinitionToJSON = EdrDataProviderDefinitionToJSON;
exports.EdrDataProviderDefinitionToJSONTyped = EdrDataProviderDefinitionToJSONTyped;
const Provenance_1 = require("./Provenance");
const EdrVectorSpec_1 = require("./EdrVectorSpec");
/**
 * @export
 */
exports.EdrDataProviderDefinitionTypeEnum = {
    Edr: 'Edr'
};
/**
 * Check if a given object implements the EdrDataProviderDefinition interface.
 */
function instanceOfEdrDataProviderDefinition(value) {
    if (!('baseUrl' in value) || value['baseUrl'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    return true;
}
function EdrDataProviderDefinitionFromJSON(json) {
    return EdrDataProviderDefinitionFromJSONTyped(json, false);
}
function EdrDataProviderDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'baseUrl': json['baseUrl'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'description': json['description'],
        'discreteVrs': json['discreteVrs'] == null ? undefined : json['discreteVrs'],
        'id': json['id'],
        'name': json['name'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'provenance': json['provenance'] == null ? undefined : (json['provenance'].map(Provenance_1.ProvenanceFromJSON)),
        'type': json['type'],
        'vectorSpec': json['vectorSpec'] == null ? undefined : (0, EdrVectorSpec_1.EdrVectorSpecFromJSON)(json['vectorSpec']),
    };
}
function EdrDataProviderDefinitionToJSON(json) {
    return EdrDataProviderDefinitionToJSONTyped(json, false);
}
function EdrDataProviderDefinitionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'baseUrl': value['baseUrl'],
        'cacheTtl': value['cacheTtl'],
        'description': value['description'],
        'discreteVrs': value['discreteVrs'],
        'id': value['id'],
        'name': value['name'],
        'priority': value['priority'],
        'provenance': value['provenance'] == null ? undefined : (value['provenance'].map(Provenance_1.ProvenanceToJSON)),
        'type': value['type'],
        'vectorSpec': (0, EdrVectorSpec_1.EdrVectorSpecToJSON)(value['vectorSpec']),
    };
}
