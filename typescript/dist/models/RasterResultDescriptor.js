"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RasterResultDescriptorToJSON = exports.RasterResultDescriptorFromJSONTyped = exports.RasterResultDescriptorFromJSON = exports.instanceOfRasterResultDescriptor = void 0;
const runtime_1 = require("../runtime");
const RasterBandDescriptor_1 = require("./RasterBandDescriptor");
const RasterDataType_1 = require("./RasterDataType");
const SpatialGridDescriptor_1 = require("./SpatialGridDescriptor");
const TimeInterval_1 = require("./TimeInterval");
/**
 * Check if a given object implements the RasterResultDescriptor interface.
 */
function instanceOfRasterResultDescriptor(value) {
    let isInstance = true;
    isInstance = isInstance && "bands" in value;
    isInstance = isInstance && "dataType" in value;
    isInstance = isInstance && "spatialGrid" in value;
    isInstance = isInstance && "spatialReference" in value;
    return isInstance;
}
exports.instanceOfRasterResultDescriptor = instanceOfRasterResultDescriptor;
function RasterResultDescriptorFromJSON(json) {
    return RasterResultDescriptorFromJSONTyped(json, false);
}
exports.RasterResultDescriptorFromJSON = RasterResultDescriptorFromJSON;
function RasterResultDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bands': (json['bands'].map(RasterBandDescriptor_1.RasterBandDescriptorFromJSON)),
        'dataType': (0, RasterDataType_1.RasterDataTypeFromJSON)(json['dataType']),
        'spatialGrid': (0, SpatialGridDescriptor_1.SpatialGridDescriptorFromJSON)(json['spatialGrid']),
        'spatialReference': json['spatialReference'],
        'time': !(0, runtime_1.exists)(json, 'time') ? undefined : (0, TimeInterval_1.TimeIntervalFromJSON)(json['time']),
    };
}
exports.RasterResultDescriptorFromJSONTyped = RasterResultDescriptorFromJSONTyped;
function RasterResultDescriptorToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'bands': (value.bands.map(RasterBandDescriptor_1.RasterBandDescriptorToJSON)),
        'dataType': (0, RasterDataType_1.RasterDataTypeToJSON)(value.dataType),
        'spatialGrid': (0, SpatialGridDescriptor_1.SpatialGridDescriptorToJSON)(value.spatialGrid),
        'spatialReference': value.spatialReference,
        'time': (0, TimeInterval_1.TimeIntervalToJSON)(value.time),
    };
}
exports.RasterResultDescriptorToJSON = RasterResultDescriptorToJSON;
