"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RasterSymbologyToJSONTyped = exports.RasterSymbologyToJSON = exports.RasterSymbologyFromJSONTyped = exports.RasterSymbologyFromJSON = exports.instanceOfRasterSymbology = exports.RasterSymbologyTypeEnum = void 0;
const RasterColorizer_1 = require("./RasterColorizer");
/**
 * @export
 */
exports.RasterSymbologyTypeEnum = {
    Raster: 'raster'
};
/**
 * Check if a given object implements the RasterSymbology interface.
 */
function instanceOfRasterSymbology(value) {
    if (!('opacity' in value) || value['opacity'] === undefined)
        return false;
    if (!('rasterColorizer' in value) || value['rasterColorizer'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    return true;
}
exports.instanceOfRasterSymbology = instanceOfRasterSymbology;
function RasterSymbologyFromJSON(json) {
    return RasterSymbologyFromJSONTyped(json, false);
}
exports.RasterSymbologyFromJSON = RasterSymbologyFromJSON;
function RasterSymbologyFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'opacity': json['opacity'],
        'rasterColorizer': (0, RasterColorizer_1.RasterColorizerFromJSON)(json['rasterColorizer']),
        'type': json['type'],
    };
}
exports.RasterSymbologyFromJSONTyped = RasterSymbologyFromJSONTyped;
function RasterSymbologyToJSON(json) {
    return RasterSymbologyToJSONTyped(json, false);
}
exports.RasterSymbologyToJSON = RasterSymbologyToJSON;
function RasterSymbologyToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'opacity': value['opacity'],
        'rasterColorizer': (0, RasterColorizer_1.RasterColorizerToJSON)(value['rasterColorizer']),
        'type': value['type'],
    };
}
exports.RasterSymbologyToJSONTyped = RasterSymbologyToJSONTyped;
