/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AxisOrder } from './AxisOrder';
import {
    AxisOrderFromJSON,
    AxisOrderFromJSONTyped,
    AxisOrderToJSON,
} from './AxisOrder';
import type { BoundingBox2D } from './BoundingBox2D';
import {
    BoundingBox2DFromJSON,
    BoundingBox2DFromJSONTyped,
    BoundingBox2DToJSON,
} from './BoundingBox2D';

/**
 * The specification of a spatial reference, where extent and axis labels are given
 * in natural order (x, y) = (east, north)
 * @export
 * @interface SpatialReferenceSpecification
 */
export interface SpatialReferenceSpecification {
    /**
     * 
     * @type {Array<string>}
     * @memberof SpatialReferenceSpecification
     */
    axisLabels?: Array<string> | null;
    /**
     * 
     * @type {AxisOrder}
     * @memberof SpatialReferenceSpecification
     */
    axisOrder?: AxisOrder | null;
    /**
     * 
     * @type {BoundingBox2D}
     * @memberof SpatialReferenceSpecification
     */
    extent: BoundingBox2D;
    /**
     * 
     * @type {string}
     * @memberof SpatialReferenceSpecification
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SpatialReferenceSpecification
     */
    projString: string;
    /**
     * 
     * @type {string}
     * @memberof SpatialReferenceSpecification
     */
    spatialReference: string;
}

/**
 * Check if a given object implements the SpatialReferenceSpecification interface.
 */
export function instanceOfSpatialReferenceSpecification(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "extent" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "projString" in value;
    isInstance = isInstance && "spatialReference" in value;

    return isInstance;
}

export function SpatialReferenceSpecificationFromJSON(json: any): SpatialReferenceSpecification {
    return SpatialReferenceSpecificationFromJSONTyped(json, false);
}

export function SpatialReferenceSpecificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpatialReferenceSpecification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'axisLabels': !exists(json, 'axisLabels') ? undefined : json['axisLabels'],
        'axisOrder': !exists(json, 'axisOrder') ? undefined : AxisOrderFromJSON(json['axisOrder']),
        'extent': BoundingBox2DFromJSON(json['extent']),
        'name': json['name'],
        'projString': json['projString'],
        'spatialReference': json['spatialReference'],
    };
}

export function SpatialReferenceSpecificationToJSON(value?: SpatialReferenceSpecification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'axisLabels': value.axisLabels,
        'axisOrder': AxisOrderToJSON(value.axisOrder),
        'extent': BoundingBox2DToJSON(value.extent),
        'name': value.name,
        'projString': value.projString,
        'spatialReference': value.spatialReference,
    };
}

