/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ClassificationMeasurement,
    instanceOfClassificationMeasurement,
    ClassificationMeasurementFromJSON,
    ClassificationMeasurementFromJSONTyped,
    ClassificationMeasurementToJSON,
} from './ClassificationMeasurement';
import {
    ContinuousMeasurement,
    instanceOfContinuousMeasurement,
    ContinuousMeasurementFromJSON,
    ContinuousMeasurementFromJSONTyped,
    ContinuousMeasurementToJSON,
} from './ContinuousMeasurement';
import {
    UnitlessMeasurement,
    instanceOfUnitlessMeasurement,
    UnitlessMeasurementFromJSON,
    UnitlessMeasurementFromJSONTyped,
    UnitlessMeasurementToJSON,
} from './UnitlessMeasurement';

/**
 * @type Measurement
 * 
 * @export
 */
export type Measurement = { type: 'classification' } & ClassificationMeasurement | { type: 'continuous' } & ContinuousMeasurement | { type: 'unitless' } & UnitlessMeasurement;

export function MeasurementFromJSON(json: any): Measurement {
    return MeasurementFromJSONTyped(json, false);
}

export function MeasurementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Measurement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'classification':
            return {...ClassificationMeasurementFromJSONTyped(json, true), type: 'classification'};
        case 'continuous':
            return {...ContinuousMeasurementFromJSONTyped(json, true), type: 'continuous'};
        case 'unitless':
            return {...UnitlessMeasurementFromJSONTyped(json, true), type: 'unitless'};
        default:
            throw new Error(`No variant of Measurement exists with 'type=${json['type']}'`);
    }
}

export function MeasurementToJSON(value?: Measurement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'classification':
            return ClassificationMeasurementToJSON(value);
        case 'continuous':
            return ContinuousMeasurementToJSON(value);
        case 'unitless':
            return UnitlessMeasurementToJSON(value);
        default:
            throw new Error(`No variant of Measurement exists with 'type=${value['type']}'`);
    }

}

