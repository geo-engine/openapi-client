/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OgrSourceTimeFormat } from './OgrSourceTimeFormat';
import {
    OgrSourceTimeFormatFromJSON,
    OgrSourceTimeFormatFromJSONTyped,
    OgrSourceTimeFormatToJSON,
} from './OgrSourceTimeFormat';

/**
 * 
 * @export
 * @interface OgrSourceDatasetTimeTypeStartEnd
 */
export interface OgrSourceDatasetTimeTypeStartEnd {
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDatasetTimeTypeStartEnd
     */
    endField: string;
    /**
     * 
     * @type {OgrSourceTimeFormat}
     * @memberof OgrSourceDatasetTimeTypeStartEnd
     */
    endFormat: OgrSourceTimeFormat;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDatasetTimeTypeStartEnd
     */
    startField: string;
    /**
     * 
     * @type {OgrSourceTimeFormat}
     * @memberof OgrSourceDatasetTimeTypeStartEnd
     */
    startFormat: OgrSourceTimeFormat;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDatasetTimeTypeStartEnd
     */
    type: OgrSourceDatasetTimeTypeStartEndTypeEnum;
}


/**
 * @export
 */
export const OgrSourceDatasetTimeTypeStartEndTypeEnum = {
    Startend: 'start+end'
} as const;
export type OgrSourceDatasetTimeTypeStartEndTypeEnum = typeof OgrSourceDatasetTimeTypeStartEndTypeEnum[keyof typeof OgrSourceDatasetTimeTypeStartEndTypeEnum];


/**
 * Check if a given object implements the OgrSourceDatasetTimeTypeStartEnd interface.
 */
export function instanceOfOgrSourceDatasetTimeTypeStartEnd(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "endField" in value;
    isInstance = isInstance && "endFormat" in value;
    isInstance = isInstance && "startField" in value;
    isInstance = isInstance && "startFormat" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function OgrSourceDatasetTimeTypeStartEndFromJSON(json: any): OgrSourceDatasetTimeTypeStartEnd {
    return OgrSourceDatasetTimeTypeStartEndFromJSONTyped(json, false);
}

export function OgrSourceDatasetTimeTypeStartEndFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceDatasetTimeTypeStartEnd {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'endField': json['endField'],
        'endFormat': OgrSourceTimeFormatFromJSON(json['endFormat']),
        'startField': json['startField'],
        'startFormat': OgrSourceTimeFormatFromJSON(json['startFormat']),
        'type': json['type'],
    };
}

export function OgrSourceDatasetTimeTypeStartEndToJSON(value?: OgrSourceDatasetTimeTypeStartEnd | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'endField': value.endField,
        'endFormat': OgrSourceTimeFormatToJSON(value.endFormat),
        'startField': value.startField,
        'startFormat': OgrSourceTimeFormatToJSON(value.startFormat),
        'type': value.type,
    };
}

