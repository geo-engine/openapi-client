/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { ProviderLayerIdFromJSON, ProviderLayerIdToJSON, } from './ProviderLayerId';
import { SymbologyFromJSON, SymbologyToJSON, } from './Symbology';
import { WorkflowFromJSON, WorkflowToJSON, } from './Workflow';
/**
 * Check if a given object implements the Layer interface.
 */
export function instanceOfLayer(value) {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "workflow" in value;
    return isInstance;
}
export function LayerFromJSON(json) {
    return LayerFromJSONTyped(json, false);
}
export function LayerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': json['description'],
        'id': ProviderLayerIdFromJSON(json['id']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': json['name'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'symbology': !exists(json, 'symbology') ? undefined : SymbologyFromJSON(json['symbology']),
        'workflow': WorkflowFromJSON(json['workflow']),
    };
}
export function LayerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'id': ProviderLayerIdToJSON(value.id),
        'metadata': value.metadata,
        'name': value.name,
        'properties': value.properties,
        'symbology': SymbologyToJSON(value.symbology),
        'workflow': WorkflowToJSON(value.workflow),
    };
}
