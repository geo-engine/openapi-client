"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeasurementFromJSON = MeasurementFromJSON;
exports.MeasurementFromJSONTyped = MeasurementFromJSONTyped;
exports.MeasurementToJSON = MeasurementToJSON;
exports.MeasurementToJSONTyped = MeasurementToJSONTyped;
const ClassificationMeasurement_1 = require("./ClassificationMeasurement");
const ContinuousMeasurement_1 = require("./ContinuousMeasurement");
const UnitlessMeasurement_1 = require("./UnitlessMeasurement");
function MeasurementFromJSON(json) {
    return MeasurementFromJSONTyped(json, false);
}
function MeasurementFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'classification':
            return Object.assign({}, (0, ClassificationMeasurement_1.ClassificationMeasurementFromJSONTyped)(json, true), { type: 'classification' });
        case 'continuous':
            return Object.assign({}, (0, ContinuousMeasurement_1.ContinuousMeasurementFromJSONTyped)(json, true), { type: 'continuous' });
        case 'unitless':
            return Object.assign({}, (0, UnitlessMeasurement_1.UnitlessMeasurementFromJSONTyped)(json, true), { type: 'unitless' });
        default:
            throw new Error(`No variant of Measurement exists with 'type=${json['type']}'`);
    }
}
function MeasurementToJSON(json) {
    return MeasurementToJSONTyped(json, false);
}
function MeasurementToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'classification':
            return Object.assign({}, (0, ClassificationMeasurement_1.ClassificationMeasurementToJSON)(value), { type: 'classification' });
        case 'continuous':
            return Object.assign({}, (0, ContinuousMeasurement_1.ContinuousMeasurementToJSON)(value), { type: 'continuous' });
        case 'unitless':
            return Object.assign({}, (0, UnitlessMeasurement_1.UnitlessMeasurementToJSON)(value), { type: 'unitless' });
        default:
            throw new Error(`No variant of Measurement exists with 'type=${value['type']}'`);
    }
}
