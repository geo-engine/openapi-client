/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { DerivedColor } from './DerivedColor';
import {
    instanceOfDerivedColor,
    DerivedColorFromJSON,
    DerivedColorFromJSONTyped,
    DerivedColorToJSON,
} from './DerivedColor';
import type { StaticColor } from './StaticColor';
import {
    instanceOfStaticColor,
    StaticColorFromJSON,
    StaticColorFromJSONTyped,
    StaticColorToJSON,
} from './StaticColor';

/**
 * @type ColorParam
 * 
 * @export
 */
export type ColorParam = { type: 'derived' } & DerivedColor | { type: 'static' } & StaticColor;

export function ColorParamFromJSON(json: any): ColorParam {
    return ColorParamFromJSONTyped(json, false);
}

export function ColorParamFromJSONTyped(json: any, ignoreDiscriminator: boolean): ColorParam {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'derived':
            return Object.assign({}, DerivedColorFromJSONTyped(json, true), { type: 'derived' } as const);
        case 'static':
            return Object.assign({}, StaticColorFromJSONTyped(json, true), { type: 'static' } as const);
        default:
            throw new Error(`No variant of ColorParam exists with 'type=${json['type']}'`);
    }
}

export function ColorParamToJSON(json: any): any {
    return ColorParamToJSONTyped(json, false);
}

export function ColorParamToJSONTyped(value?: ColorParam | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'derived':
            return Object.assign({}, DerivedColorToJSON(value), { type: 'derived' } as const);
        case 'static':
            return Object.assign({}, StaticColorToJSON(value), { type: 'static' } as const);
        default:
            throw new Error(`No variant of ColorParam exists with 'type=${value['type']}'`);
    }

}

