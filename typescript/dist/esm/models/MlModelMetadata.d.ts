/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { MlModelOutputNoDataHandling } from './MlModelOutputNoDataHandling';
import type { MlModelInputNoDataHandling } from './MlModelInputNoDataHandling';
import type { MlTensorShape3D } from './MlTensorShape3D';
import type { RasterDataType } from './RasterDataType';
/**
 *
 * @export
 * @interface MlModelMetadata
 */
export interface MlModelMetadata {
    /**
     *
     * @type {MlModelInputNoDataHandling}
     * @memberof MlModelMetadata
     */
    inputNoDataHandling: MlModelInputNoDataHandling;
    /**
     *
     * @type {MlTensorShape3D}
     * @memberof MlModelMetadata
     */
    inputShape: MlTensorShape3D;
    /**
     *
     * @type {RasterDataType}
     * @memberof MlModelMetadata
     */
    inputType: RasterDataType;
    /**
     *
     * @type {MlModelOutputNoDataHandling}
     * @memberof MlModelMetadata
     */
    outputNoDataHandling: MlModelOutputNoDataHandling;
    /**
     *
     * @type {MlTensorShape3D}
     * @memberof MlModelMetadata
     */
    outputShape: MlTensorShape3D;
    /**
     *
     * @type {RasterDataType}
     * @memberof MlModelMetadata
     */
    outputType: RasterDataType;
}
/**
 * Check if a given object implements the MlModelMetadata interface.
 */
export declare function instanceOfMlModelMetadata(value: object): value is MlModelMetadata;
export declare function MlModelMetadataFromJSON(json: any): MlModelMetadata;
export declare function MlModelMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): MlModelMetadata;
export declare function MlModelMetadataToJSON(json: any): MlModelMetadata;
export declare function MlModelMetadataToJSONTyped(value?: MlModelMetadata | null, ignoreDiscriminator?: boolean): any;
