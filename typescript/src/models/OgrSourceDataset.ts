/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OgrSourceColumnSpec } from './OgrSourceColumnSpec';
import {
    OgrSourceColumnSpecFromJSON,
    OgrSourceColumnSpecFromJSONTyped,
    OgrSourceColumnSpecToJSON,
} from './OgrSourceColumnSpec';
import type { OgrSourceDatasetTimeType } from './OgrSourceDatasetTimeType';
import {
    OgrSourceDatasetTimeTypeFromJSON,
    OgrSourceDatasetTimeTypeFromJSONTyped,
    OgrSourceDatasetTimeTypeToJSON,
} from './OgrSourceDatasetTimeType';
import type { OgrSourceErrorSpec } from './OgrSourceErrorSpec';
import {
    OgrSourceErrorSpecFromJSON,
    OgrSourceErrorSpecFromJSONTyped,
    OgrSourceErrorSpecToJSON,
} from './OgrSourceErrorSpec';
import type { TypedGeometry } from './TypedGeometry';
import {
    TypedGeometryFromJSON,
    TypedGeometryFromJSONTyped,
    TypedGeometryToJSON,
} from './TypedGeometry';
import type { VectorDataType } from './VectorDataType';
import {
    VectorDataTypeFromJSON,
    VectorDataTypeFromJSONTyped,
    VectorDataTypeToJSON,
} from './VectorDataType';

/**
 * 
 * @export
 * @interface OgrSourceDataset
 */
export interface OgrSourceDataset {
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDataset
     */
    attributeQuery?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OgrSourceDataset
     */
    cacheTtl?: number;
    /**
     * 
     * @type {OgrSourceColumnSpec}
     * @memberof OgrSourceDataset
     */
    columns?: OgrSourceColumnSpec | null;
    /**
     * 
     * @type {VectorDataType}
     * @memberof OgrSourceDataset
     */
    dataType?: VectorDataType | null;
    /**
     * 
     * @type {TypedGeometry}
     * @memberof OgrSourceDataset
     */
    defaultGeometry?: TypedGeometry | null;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDataset
     */
    fileName: string;
    /**
     * 
     * @type {boolean}
     * @memberof OgrSourceDataset
     */
    forceOgrSpatialFilter?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OgrSourceDataset
     */
    forceOgrTimeFilter?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDataset
     */
    layerName: string;
    /**
     * 
     * @type {OgrSourceErrorSpec}
     * @memberof OgrSourceDataset
     */
    onError: OgrSourceErrorSpec;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDataset
     */
    sqlQuery?: string | null;
    /**
     * 
     * @type {OgrSourceDatasetTimeType}
     * @memberof OgrSourceDataset
     */
    time?: OgrSourceDatasetTimeType;
}

/**
 * Check if a given object implements the OgrSourceDataset interface.
 */
export function instanceOfOgrSourceDataset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fileName" in value;
    isInstance = isInstance && "layerName" in value;
    isInstance = isInstance && "onError" in value;

    return isInstance;
}

export function OgrSourceDatasetFromJSON(json: any): OgrSourceDataset {
    return OgrSourceDatasetFromJSONTyped(json, false);
}

export function OgrSourceDatasetFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceDataset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeQuery': !exists(json, 'attributeQuery') ? undefined : json['attributeQuery'],
        'cacheTtl': !exists(json, 'cacheTtl') ? undefined : json['cacheTtl'],
        'columns': !exists(json, 'columns') ? undefined : OgrSourceColumnSpecFromJSON(json['columns']),
        'dataType': !exists(json, 'dataType') ? undefined : VectorDataTypeFromJSON(json['dataType']),
        'defaultGeometry': !exists(json, 'defaultGeometry') ? undefined : TypedGeometryFromJSON(json['defaultGeometry']),
        'fileName': json['fileName'],
        'forceOgrSpatialFilter': !exists(json, 'forceOgrSpatialFilter') ? undefined : json['forceOgrSpatialFilter'],
        'forceOgrTimeFilter': !exists(json, 'forceOgrTimeFilter') ? undefined : json['forceOgrTimeFilter'],
        'layerName': json['layerName'],
        'onError': OgrSourceErrorSpecFromJSON(json['onError']),
        'sqlQuery': !exists(json, 'sqlQuery') ? undefined : json['sqlQuery'],
        'time': !exists(json, 'time') ? undefined : OgrSourceDatasetTimeTypeFromJSON(json['time']),
    };
}

export function OgrSourceDatasetToJSON(value?: OgrSourceDataset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeQuery': value.attributeQuery,
        'cacheTtl': value.cacheTtl,
        'columns': OgrSourceColumnSpecToJSON(value.columns),
        'dataType': VectorDataTypeToJSON(value.dataType),
        'defaultGeometry': TypedGeometryToJSON(value.defaultGeometry),
        'fileName': value.fileName,
        'forceOgrSpatialFilter': value.forceOgrSpatialFilter,
        'forceOgrTimeFilter': value.forceOgrTimeFilter,
        'layerName': value.layerName,
        'onError': OgrSourceErrorSpecToJSON(value.onError),
        'sqlQuery': value.sqlQuery,
        'time': OgrSourceDatasetTimeTypeToJSON(value.time),
    };
}

