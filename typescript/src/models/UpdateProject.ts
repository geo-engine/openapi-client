/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeStep } from './TimeStep';
import {
    TimeStepFromJSON,
    TimeStepFromJSONTyped,
    TimeStepToJSON,
    TimeStepToJSONTyped,
} from './TimeStep';
import type { STRectangle } from './STRectangle';
import {
    STRectangleFromJSON,
    STRectangleFromJSONTyped,
    STRectangleToJSON,
    STRectangleToJSONTyped,
} from './STRectangle';
import type { VecUpdate } from './VecUpdate';
import {
    VecUpdateFromJSON,
    VecUpdateFromJSONTyped,
    VecUpdateToJSON,
    VecUpdateToJSONTyped,
} from './VecUpdate';

/**
 * 
 * @export
 * @interface UpdateProject
 */
export interface UpdateProject {
    /**
     * 
     * @type {STRectangle}
     * @memberof UpdateProject
     */
    bounds?: STRectangle | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    id: string;
    /**
     * 
     * @type {Array<VecUpdate>}
     * @memberof UpdateProject
     */
    layers?: Array<VecUpdate> | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProject
     */
    name?: string | null;
    /**
     * 
     * @type {Array<VecUpdate>}
     * @memberof UpdateProject
     */
    plots?: Array<VecUpdate> | null;
    /**
     * 
     * @type {TimeStep}
     * @memberof UpdateProject
     */
    timeStep?: TimeStep | null;
}

/**
 * Check if a given object implements the UpdateProject interface.
 */
export function instanceOfUpdateProject(value: object): value is UpdateProject {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function UpdateProjectFromJSON(json: any): UpdateProject {
    return UpdateProjectFromJSONTyped(json, false);
}

export function UpdateProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateProject {
    if (json == null) {
        return json;
    }
    return {
        
        'bounds': json['bounds'] == null ? undefined : STRectangleFromJSON(json['bounds']),
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'],
        'layers': json['layers'] == null ? undefined : ((json['layers'] as Array<any>).map(VecUpdateFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'plots': json['plots'] == null ? undefined : ((json['plots'] as Array<any>).map(VecUpdateFromJSON)),
        'timeStep': json['timeStep'] == null ? undefined : TimeStepFromJSON(json['timeStep']),
    };
}

export function UpdateProjectToJSON(json: any): UpdateProject {
    return UpdateProjectToJSONTyped(json, false);
}

export function UpdateProjectToJSONTyped(value?: UpdateProject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bounds': STRectangleToJSON(value['bounds']),
        'description': value['description'],
        'id': value['id'],
        'layers': value['layers'] == null ? undefined : ((value['layers'] as Array<any>).map(VecUpdateToJSON)),
        'name': value['name'],
        'plots': value['plots'] == null ? undefined : ((value['plots'] as Array<any>).map(VecUpdateToJSON)),
        'timeStep': TimeStepToJSON(value['timeStep']),
    };
}

