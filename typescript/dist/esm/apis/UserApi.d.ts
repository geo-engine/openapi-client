/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AddCollection200Response, AddRole, ComputationQuota, DataUsage, DataUsageSummary, OperatorQuota, Quota, RoleDescription, UpdateQuota, UsageSummaryGranularity } from '../models/index';
export interface AddRoleHandlerRequest {
    addRole: AddRole;
}
export interface AssignRoleHandlerRequest {
    user: string;
    role: string;
}
export interface ComputationQuotaHandlerRequest {
    computation: string;
}
export interface ComputationsQuotaHandlerRequest {
    offset: number;
    limit: number;
}
export interface DataUsageHandlerRequest {
    offset: number;
    limit: number;
}
export interface DataUsageSummaryHandlerRequest {
    granularity: UsageSummaryGranularity;
    offset: number;
    limit: number;
    dataset?: string | null;
}
export interface GetRoleByNameHandlerRequest {
    name: string;
}
export interface GetUserQuotaHandlerRequest {
    user: string;
}
export interface RemoveRoleHandlerRequest {
    role: string;
}
export interface RevokeRoleHandlerRequest {
    user: string;
    role: string;
}
export interface UpdateUserQuotaHandlerRequest {
    user: string;
    updateQuota: UpdateQuota;
}
/**
 *
 */
export declare class UserApi extends runtime.BaseAPI {
    /**
     * Add a new role. Requires admin privilige.
     */
    addRoleHandlerRaw(requestParameters: AddRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * Add a new role. Requires admin privilige.
     */
    addRoleHandler(requestParameters: AddRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
    /**
     * Assign a role to a user. Requires admin privilige.
     */
    assignRoleHandlerRaw(requestParameters: AssignRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Assign a role to a user. Requires admin privilige.
     */
    assignRoleHandler(requestParameters: AssignRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieves the quota used by computation with the given computation id
     */
    computationQuotaHandlerRaw(requestParameters: ComputationQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OperatorQuota>>>;
    /**
     * Retrieves the quota used by computation with the given computation id
     */
    computationQuotaHandler(requestParameters: ComputationQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OperatorQuota>>;
    /**
     * Retrieves the quota used by computations
     */
    computationsQuotaHandlerRaw(requestParameters: ComputationsQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComputationQuota>>>;
    /**
     * Retrieves the quota used by computations
     */
    computationsQuotaHandler(requestParameters: ComputationsQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComputationQuota>>;
    /**
     * Retrieves the data usage
     */
    dataUsageHandlerRaw(requestParameters: DataUsageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataUsage>>>;
    /**
     * Retrieves the data usage
     */
    dataUsageHandler(requestParameters: DataUsageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataUsage>>;
    /**
     * Retrieves the data usage summary
     */
    dataUsageSummaryHandlerRaw(requestParameters: DataUsageSummaryHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataUsageSummary>>>;
    /**
     * Retrieves the data usage summary
     */
    dataUsageSummaryHandler(requestParameters: DataUsageSummaryHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataUsageSummary>>;
    /**
     * Get role by name
     */
    getRoleByNameHandlerRaw(requestParameters: GetRoleByNameHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCollection200Response>>;
    /**
     * Get role by name
     */
    getRoleByNameHandler(requestParameters: GetRoleByNameHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCollection200Response>;
    /**
     * Query roles for the current user.
     */
    getRoleDescriptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleDescription>>>;
    /**
     * Query roles for the current user.
     */
    getRoleDescriptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleDescription>>;
    /**
     * Retrieves the available and used quota of a specific user.
     */
    getUserQuotaHandlerRaw(requestParameters: GetUserQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quota>>;
    /**
     * Retrieves the available and used quota of a specific user.
     */
    getUserQuotaHandler(requestParameters: GetUserQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quota>;
    /**
     * Retrieves the available and used quota of the current user.
     */
    quotaHandlerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quota>>;
    /**
     * Retrieves the available and used quota of the current user.
     */
    quotaHandler(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quota>;
    /**
     * Remove a role. Requires admin privilige.
     */
    removeRoleHandlerRaw(requestParameters: RemoveRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a role. Requires admin privilige.
     */
    removeRoleHandler(requestParameters: RemoveRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Revoke a role from a user. Requires admin privilige.
     */
    revokeRoleHandlerRaw(requestParameters: RevokeRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke a role from a user. Requires admin privilige.
     */
    revokeRoleHandler(requestParameters: RevokeRoleHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Update the available quota of a specific user.
     */
    updateUserQuotaHandlerRaw(requestParameters: UpdateUserQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update the available quota of a specific user.
     */
    updateUserQuotaHandler(requestParameters: UpdateUserQuotaHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
