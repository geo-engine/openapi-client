/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ArunaDataProviderDefinitionFromJSONTyped, ArunaDataProviderDefinitionToJSON, } from './ArunaDataProviderDefinition';
import { CopernicusDataspaceDataProviderDefinitionFromJSONTyped, CopernicusDataspaceDataProviderDefinitionToJSON, } from './CopernicusDataspaceDataProviderDefinition';
import { DatasetLayerListingProviderDefinitionFromJSONTyped, DatasetLayerListingProviderDefinitionToJSON, } from './DatasetLayerListingProviderDefinition';
import { EbvPortalDataProviderDefinitionFromJSONTyped, EbvPortalDataProviderDefinitionToJSON, } from './EbvPortalDataProviderDefinition';
import { EdrDataProviderDefinitionFromJSONTyped, EdrDataProviderDefinitionToJSON, } from './EdrDataProviderDefinition';
import { GbifDataProviderDefinitionFromJSONTyped, GbifDataProviderDefinitionToJSON, } from './GbifDataProviderDefinition';
import { GfbioAbcdDataProviderDefinitionFromJSONTyped, GfbioAbcdDataProviderDefinitionToJSON, } from './GfbioAbcdDataProviderDefinition';
import { GfbioCollectionsDataProviderDefinitionFromJSONTyped, GfbioCollectionsDataProviderDefinitionToJSON, } from './GfbioCollectionsDataProviderDefinition';
import { NetCdfCfDataProviderDefinitionFromJSONTyped, NetCdfCfDataProviderDefinitionToJSON, } from './NetCdfCfDataProviderDefinition';
import { PangaeaDataProviderDefinitionFromJSONTyped, PangaeaDataProviderDefinitionToJSON, } from './PangaeaDataProviderDefinition';
import { SentinelS2L2ACogsProviderDefinitionFromJSONTyped, SentinelS2L2ACogsProviderDefinitionToJSON, } from './SentinelS2L2ACogsProviderDefinition';
import { WildliveDataConnectorDefinitionFromJSONTyped, WildliveDataConnectorDefinitionToJSON, } from './WildliveDataConnectorDefinition';
export function TypedDataProviderDefinitionFromJSON(json) {
    return TypedDataProviderDefinitionFromJSONTyped(json, false);
}
export function TypedDataProviderDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'Aruna':
            return Object.assign({}, ArunaDataProviderDefinitionFromJSONTyped(json, true), { type: 'Aruna' });
        case 'CopernicusDataspace':
            return Object.assign({}, CopernicusDataspaceDataProviderDefinitionFromJSONTyped(json, true), { type: 'CopernicusDataspace' });
        case 'DatasetLayerListing':
            return Object.assign({}, DatasetLayerListingProviderDefinitionFromJSONTyped(json, true), { type: 'DatasetLayerListing' });
        case 'EbvPortal':
            return Object.assign({}, EbvPortalDataProviderDefinitionFromJSONTyped(json, true), { type: 'EbvPortal' });
        case 'Edr':
            return Object.assign({}, EdrDataProviderDefinitionFromJSONTyped(json, true), { type: 'Edr' });
        case 'Gbif':
            return Object.assign({}, GbifDataProviderDefinitionFromJSONTyped(json, true), { type: 'Gbif' });
        case 'GfbioAbcd':
            return Object.assign({}, GfbioAbcdDataProviderDefinitionFromJSONTyped(json, true), { type: 'GfbioAbcd' });
        case 'GfbioCollections':
            return Object.assign({}, GfbioCollectionsDataProviderDefinitionFromJSONTyped(json, true), { type: 'GfbioCollections' });
        case 'NetCdfCf':
            return Object.assign({}, NetCdfCfDataProviderDefinitionFromJSONTyped(json, true), { type: 'NetCdfCf' });
        case 'Pangaea':
            return Object.assign({}, PangaeaDataProviderDefinitionFromJSONTyped(json, true), { type: 'Pangaea' });
        case 'SentinelS2L2ACogs':
            return Object.assign({}, SentinelS2L2ACogsProviderDefinitionFromJSONTyped(json, true), { type: 'SentinelS2L2ACogs' });
        case 'WildLIVE!':
            return Object.assign({}, WildliveDataConnectorDefinitionFromJSONTyped(json, true), { type: 'WildLIVE!' });
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${json['type']}'`);
    }
}
export function TypedDataProviderDefinitionToJSON(json) {
    return TypedDataProviderDefinitionToJSONTyped(json, false);
}
export function TypedDataProviderDefinitionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'Aruna':
            return Object.assign({}, ArunaDataProviderDefinitionToJSON(value), { type: 'Aruna' });
        case 'CopernicusDataspace':
            return Object.assign({}, CopernicusDataspaceDataProviderDefinitionToJSON(value), { type: 'CopernicusDataspace' });
        case 'DatasetLayerListing':
            return Object.assign({}, DatasetLayerListingProviderDefinitionToJSON(value), { type: 'DatasetLayerListing' });
        case 'EbvPortal':
            return Object.assign({}, EbvPortalDataProviderDefinitionToJSON(value), { type: 'EbvPortal' });
        case 'Edr':
            return Object.assign({}, EdrDataProviderDefinitionToJSON(value), { type: 'Edr' });
        case 'Gbif':
            return Object.assign({}, GbifDataProviderDefinitionToJSON(value), { type: 'Gbif' });
        case 'GfbioAbcd':
            return Object.assign({}, GfbioAbcdDataProviderDefinitionToJSON(value), { type: 'GfbioAbcd' });
        case 'GfbioCollections':
            return Object.assign({}, GfbioCollectionsDataProviderDefinitionToJSON(value), { type: 'GfbioCollections' });
        case 'NetCdfCf':
            return Object.assign({}, NetCdfCfDataProviderDefinitionToJSON(value), { type: 'NetCdfCf' });
        case 'Pangaea':
            return Object.assign({}, PangaeaDataProviderDefinitionToJSON(value), { type: 'Pangaea' });
        case 'SentinelS2L2ACogs':
            return Object.assign({}, SentinelS2L2ACogsProviderDefinitionToJSON(value), { type: 'SentinelS2L2ACogs' });
        case 'WildLIVE!':
            return Object.assign({}, WildliveDataConnectorDefinitionToJSON(value), { type: 'WildLIVE!' });
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${value['type']}'`);
    }
}
