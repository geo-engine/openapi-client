/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FormatSpecifics } from './FormatSpecifics';
import {
    FormatSpecificsFromJSON,
    FormatSpecificsFromJSONTyped,
    FormatSpecificsToJSON,
} from './FormatSpecifics';

/**
 * 
 * @export
 * @interface OgrSourceColumnSpec
 */
export interface OgrSourceColumnSpec {
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    bool?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    datetime?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    _float?: Array<string>;
    /**
     * 
     * @type {FormatSpecifics}
     * @memberof OgrSourceColumnSpec
     */
    formatSpecifics?: FormatSpecifics | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    _int?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OgrSourceColumnSpec
     */
    rename?: { [key: string]: string; } | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgrSourceColumnSpec
     */
    text?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceColumnSpec
     */
    x: string;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceColumnSpec
     */
    y?: string | null;
}

/**
 * Check if a given object implements the OgrSourceColumnSpec interface.
 */
export function instanceOfOgrSourceColumnSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "x" in value;

    return isInstance;
}

export function OgrSourceColumnSpecFromJSON(json: any): OgrSourceColumnSpec {
    return OgrSourceColumnSpecFromJSONTyped(json, false);
}

export function OgrSourceColumnSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceColumnSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bool': !exists(json, 'bool') ? undefined : json['bool'],
        'datetime': !exists(json, 'datetime') ? undefined : json['datetime'],
        '_float': !exists(json, 'float') ? undefined : json['float'],
        'formatSpecifics': !exists(json, 'formatSpecifics') ? undefined : FormatSpecificsFromJSON(json['formatSpecifics']),
        '_int': !exists(json, 'int') ? undefined : json['int'],
        'rename': !exists(json, 'rename') ? undefined : json['rename'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'x': json['x'],
        'y': !exists(json, 'y') ? undefined : json['y'],
    };
}

export function OgrSourceColumnSpecToJSON(value?: OgrSourceColumnSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bool': value.bool,
        'datetime': value.datetime,
        'float': value._float,
        'formatSpecifics': FormatSpecificsToJSON(value.formatSpecifics),
        'int': value._int,
        'rename': value.rename,
        'text': value.text,
        'x': value.x,
        'y': value.y,
    };
}

