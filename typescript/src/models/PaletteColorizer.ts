/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PaletteColorizer
 */
export interface PaletteColorizer {
    /**
     * A map from value to color
     * 
     * It is assumed that is has at least one and at most 256 entries.
     * @type {{ [key: string]: Array<number>; }}
     * @memberof PaletteColorizer
     */
    colors: { [key: string]: Array<number>; };
    /**
     * 
     * @type {Array<number>}
     * @memberof PaletteColorizer
     */
    defaultColor: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PaletteColorizer
     */
    noDataColor: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PaletteColorizer
     */
    type: PaletteColorizerTypeEnum;
}


/**
 * @export
 */
export const PaletteColorizerTypeEnum = {
    Palette: 'palette'
} as const;
export type PaletteColorizerTypeEnum = typeof PaletteColorizerTypeEnum[keyof typeof PaletteColorizerTypeEnum];


/**
 * Check if a given object implements the PaletteColorizer interface.
 */
export function instanceOfPaletteColorizer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "colors" in value;
    isInstance = isInstance && "defaultColor" in value;
    isInstance = isInstance && "noDataColor" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function PaletteColorizerFromJSON(json: any): PaletteColorizer {
    return PaletteColorizerFromJSONTyped(json, false);
}

export function PaletteColorizerFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaletteColorizer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'colors': json['colors'],
        'defaultColor': json['defaultColor'],
        'noDataColor': json['noDataColor'],
        'type': json['type'],
    };
}

export function PaletteColorizerToJSON(value?: PaletteColorizer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'colors': value.colors,
        'defaultColor': value.defaultColor,
        'noDataColor': value.noDataColor,
        'type': value.type,
    };
}

