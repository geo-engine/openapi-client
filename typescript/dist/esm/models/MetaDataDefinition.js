/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GdalMetaDataListWithTypeFromJSONTyped, GdalMetaDataListWithTypeToJSON, } from './GdalMetaDataListWithType';
import { GdalMetaDataRegularWithTypeFromJSONTyped, GdalMetaDataRegularWithTypeToJSON, } from './GdalMetaDataRegularWithType';
import { GdalMetaDataStaticWithTypeFromJSONTyped, GdalMetaDataStaticWithTypeToJSON, } from './GdalMetaDataStaticWithType';
import { GdalMetadataNetCdfCfWithTypeFromJSONTyped, GdalMetadataNetCdfCfWithTypeToJSON, } from './GdalMetadataNetCdfCfWithType';
import { MockMetaDataWithTypeFromJSONTyped, MockMetaDataWithTypeToJSON, } from './MockMetaDataWithType';
import { OgrMetaDataWithTypeFromJSONTyped, OgrMetaDataWithTypeToJSON, } from './OgrMetaDataWithType';
export function MetaDataDefinitionFromJSON(json) {
    return MetaDataDefinitionFromJSONTyped(json, false);
}
export function MetaDataDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return Object.assign(Object.assign({}, GdalMetaDataListWithTypeFromJSONTyped(json, true)), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataRegular':
            return Object.assign(Object.assign({}, GdalMetaDataRegularWithTypeFromJSONTyped(json, true)), { type: 'GdalMetaDataRegular' });
        case 'GdalMetadataNetCdfCf':
            return Object.assign(Object.assign({}, GdalMetadataNetCdfCfWithTypeFromJSONTyped(json, true)), { type: 'GdalMetadataNetCdfCf' });
        case 'GdalStatic':
            return Object.assign(Object.assign({}, GdalMetaDataStaticWithTypeFromJSONTyped(json, true)), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign(Object.assign({}, MockMetaDataWithTypeFromJSONTyped(json, true)), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign(Object.assign({}, OgrMetaDataWithTypeFromJSONTyped(json, true)), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}
export function MetaDataDefinitionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return GdalMetaDataListWithTypeToJSON(value);
        case 'GdalMetaDataRegular':
            return GdalMetaDataRegularWithTypeToJSON(value);
        case 'GdalMetadataNetCdfCf':
            return GdalMetadataNetCdfCfWithTypeToJSON(value);
        case 'GdalStatic':
            return GdalMetaDataStaticWithTypeToJSON(value);
        case 'MockMetaData':
            return MockMetaDataWithTypeToJSON(value);
        case 'OgrMetaData':
            return OgrMetaDataWithTypeToJSON(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }
}
