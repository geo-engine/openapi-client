/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TextSymbologyFromJSON, TextSymbologyToJSON, } from './TextSymbology';
import { StrokeParamFromJSON, StrokeParamToJSON, } from './StrokeParam';
import { NumberParamFromJSON, NumberParamToJSON, } from './NumberParam';
import { ColorParamFromJSON, ColorParamToJSON, } from './ColorParam';
/**
 * @export
 */
export const PointSymbologyTypeEnum = {
    Point: 'point'
};
/**
 * Check if a given object implements the PointSymbology interface.
 */
export function instanceOfPointSymbology(value) {
    if (!('fillColor' in value) || value['fillColor'] === undefined)
        return false;
    if (!('radius' in value) || value['radius'] === undefined)
        return false;
    if (!('stroke' in value) || value['stroke'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    return true;
}
export function PointSymbologyFromJSON(json) {
    return PointSymbologyFromJSONTyped(json, false);
}
export function PointSymbologyFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'fillColor': ColorParamFromJSON(json['fillColor']),
        'radius': NumberParamFromJSON(json['radius']),
        'stroke': StrokeParamFromJSON(json['stroke']),
        'text': json['text'] == null ? undefined : TextSymbologyFromJSON(json['text']),
        'type': json['type'],
    };
}
export function PointSymbologyToJSON(json) {
    return PointSymbologyToJSONTyped(json, false);
}
export function PointSymbologyToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'fillColor': ColorParamToJSON(value['fillColor']),
        'radius': NumberParamToJSON(value['radius']),
        'stroke': StrokeParamToJSON(value['stroke']),
        'text': TextSymbologyToJSON(value['text']),
        'type': value['type'],
    };
}
