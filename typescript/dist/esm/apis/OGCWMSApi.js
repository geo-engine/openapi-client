/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
/**
 *
 */
export class OGCWMSApi extends runtime.BaseAPI {
    /**
     * Get WMS Capabilities
     * Get WMS Capabilities
     */
    wmsCapabilitiesHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
                throw new runtime.RequiredError('workflow', 'Required parameter requestParameters.workflow was null or undefined when calling wmsCapabilitiesHandler.');
            }
            if (requestParameters.service === null || requestParameters.service === undefined) {
                throw new runtime.RequiredError('service', 'Required parameter requestParameters.service was null or undefined when calling wmsCapabilitiesHandler.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling wmsCapabilitiesHandler.');
            }
            const queryParameters = {};
            if (requestParameters.version !== undefined) {
                queryParameters['version'] = requestParameters.version;
            }
            if (requestParameters.service !== undefined) {
                queryParameters['service'] = requestParameters.service;
            }
            if (requestParameters.request !== undefined) {
                queryParameters['request'] = requestParameters.request;
            }
            if (requestParameters.format !== undefined) {
                queryParameters['format'] = requestParameters.format;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/wms/{workflow}?request=GetCapabilities`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Get WMS Capabilities
     * Get WMS Capabilities
     */
    wmsCapabilitiesHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wmsCapabilitiesHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get WMS Legend Graphic
     * Get WMS Legend Graphic
     */
    wmsLegendGraphicHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
                throw new runtime.RequiredError('workflow', 'Required parameter requestParameters.workflow was null or undefined when calling wmsLegendGraphicHandler.');
            }
            if (requestParameters.version === null || requestParameters.version === undefined) {
                throw new runtime.RequiredError('version', 'Required parameter requestParameters.version was null or undefined when calling wmsLegendGraphicHandler.');
            }
            if (requestParameters.service === null || requestParameters.service === undefined) {
                throw new runtime.RequiredError('service', 'Required parameter requestParameters.service was null or undefined when calling wmsLegendGraphicHandler.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling wmsLegendGraphicHandler.');
            }
            if (requestParameters.layer === null || requestParameters.layer === undefined) {
                throw new runtime.RequiredError('layer', 'Required parameter requestParameters.layer was null or undefined when calling wmsLegendGraphicHandler.');
            }
            const queryParameters = {};
            if (requestParameters.version !== undefined) {
                queryParameters['version'] = requestParameters.version;
            }
            if (requestParameters.service !== undefined) {
                queryParameters['service'] = requestParameters.service;
            }
            if (requestParameters.request !== undefined) {
                queryParameters['request'] = requestParameters.request;
            }
            if (requestParameters.layer !== undefined) {
                queryParameters['layer'] = requestParameters.layer;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/wms/{workflow}?request=GetLegendGraphic`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get WMS Legend Graphic
     * Get WMS Legend Graphic
     */
    wmsLegendGraphicHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.wmsLegendGraphicHandlerRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get WMS Map
     * Get WMS Map
     */
    wmsMapHandlerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.workflow === null || requestParameters.workflow === undefined) {
                throw new runtime.RequiredError('workflow', 'Required parameter requestParameters.workflow was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.version === null || requestParameters.version === undefined) {
                throw new runtime.RequiredError('version', 'Required parameter requestParameters.version was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.service === null || requestParameters.service === undefined) {
                throw new runtime.RequiredError('service', 'Required parameter requestParameters.service was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.width === null || requestParameters.width === undefined) {
                throw new runtime.RequiredError('width', 'Required parameter requestParameters.width was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.height === null || requestParameters.height === undefined) {
                throw new runtime.RequiredError('height', 'Required parameter requestParameters.height was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.bbox === null || requestParameters.bbox === undefined) {
                throw new runtime.RequiredError('bbox', 'Required parameter requestParameters.bbox was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.format === null || requestParameters.format === undefined) {
                throw new runtime.RequiredError('format', 'Required parameter requestParameters.format was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.layers === null || requestParameters.layers === undefined) {
                throw new runtime.RequiredError('layers', 'Required parameter requestParameters.layers was null or undefined when calling wmsMapHandler.');
            }
            if (requestParameters.styles === null || requestParameters.styles === undefined) {
                throw new runtime.RequiredError('styles', 'Required parameter requestParameters.styles was null or undefined when calling wmsMapHandler.');
            }
            const queryParameters = {};
            if (requestParameters.version !== undefined) {
                queryParameters['version'] = requestParameters.version;
            }
            if (requestParameters.service !== undefined) {
                queryParameters['service'] = requestParameters.service;
            }
            if (requestParameters.request !== undefined) {
                queryParameters['request'] = requestParameters.request;
            }
            if (requestParameters.width !== undefined) {
                queryParameters['width'] = requestParameters.width;
            }
            if (requestParameters.height !== undefined) {
                queryParameters['height'] = requestParameters.height;
            }
            if (requestParameters.bbox !== undefined) {
                queryParameters['bbox'] = requestParameters.bbox;
            }
            if (requestParameters.format !== undefined) {
                queryParameters['format'] = requestParameters.format;
            }
            if (requestParameters.layers !== undefined) {
                queryParameters['layers'] = requestParameters.layers;
            }
            if (requestParameters.crs !== undefined) {
                queryParameters['crs'] = requestParameters.crs;
            }
            if (requestParameters.styles !== undefined) {
                queryParameters['styles'] = requestParameters.styles;
            }
            if (requestParameters.time !== undefined) {
                queryParameters['time'] = requestParameters.time;
            }
            if (requestParameters.transparent !== undefined) {
                queryParameters['transparent'] = requestParameters.transparent;
            }
            if (requestParameters.bgcolor !== undefined) {
                queryParameters['bgcolor'] = requestParameters.bgcolor;
            }
            if (requestParameters.sld !== undefined) {
                queryParameters['sld'] = requestParameters.sld;
            }
            if (requestParameters.sldBody !== undefined) {
                queryParameters['sld_body'] = requestParameters.sldBody;
            }
            if (requestParameters.elevation !== undefined) {
                queryParameters['elevation'] = requestParameters.elevation;
            }
            if (requestParameters.exceptions !== undefined) {
                queryParameters['exceptions'] = requestParameters.exceptions;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("session_token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/wms/{workflow}?request=GetMap`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters.workflow))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Get WMS Map
     * Get WMS Map
     */
    wmsMapHandler(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wmsMapHandlerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
