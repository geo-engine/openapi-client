/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataUsage
 */
export interface DataUsage {
    /**
     * 
     * @type {string}
     * @memberof DataUsage
     */
    computationId: string;
    /**
     * 
     * @type {number}
     * @memberof DataUsage
     */
    count: number;
    /**
     * 
     * @type {string}
     * @memberof DataUsage
     */
    data: string;
    /**
     * 
     * @type {Date}
     * @memberof DataUsage
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof DataUsage
     */
    userId: string;
}

/**
 * Check if a given object implements the DataUsage interface.
 */
export function instanceOfDataUsage(value: object): value is DataUsage {
    if (!('computationId' in value) || value['computationId'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function DataUsageFromJSON(json: any): DataUsage {
    return DataUsageFromJSONTyped(json, false);
}

export function DataUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'computationId': json['computationId'],
        'count': json['count'],
        'data': json['data'],
        'timestamp': (new Date(json['timestamp'])),
        'userId': json['userId'],
    };
}

export function DataUsageToJSON(json: any): DataUsage {
    return DataUsageToJSONTyped(json, false);
}

export function DataUsageToJSONTyped(value?: DataUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'computationId': value['computationId'],
        'count': value['count'],
        'data': value['data'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userId': value['userId'],
    };
}

