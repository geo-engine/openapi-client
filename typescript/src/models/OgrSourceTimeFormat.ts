/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { OgrSourceTimeFormatAuto } from './OgrSourceTimeFormatAuto';
import {
    instanceOfOgrSourceTimeFormatAuto,
    OgrSourceTimeFormatAutoFromJSON,
    OgrSourceTimeFormatAutoFromJSONTyped,
    OgrSourceTimeFormatAutoToJSON,
} from './OgrSourceTimeFormatAuto';
import type { OgrSourceTimeFormatCustom } from './OgrSourceTimeFormatCustom';
import {
    instanceOfOgrSourceTimeFormatCustom,
    OgrSourceTimeFormatCustomFromJSON,
    OgrSourceTimeFormatCustomFromJSONTyped,
    OgrSourceTimeFormatCustomToJSON,
} from './OgrSourceTimeFormatCustom';
import type { OgrSourceTimeFormatUnixTimeStamp } from './OgrSourceTimeFormatUnixTimeStamp';
import {
    instanceOfOgrSourceTimeFormatUnixTimeStamp,
    OgrSourceTimeFormatUnixTimeStampFromJSON,
    OgrSourceTimeFormatUnixTimeStampFromJSONTyped,
    OgrSourceTimeFormatUnixTimeStampToJSON,
} from './OgrSourceTimeFormatUnixTimeStamp';

/**
 * @type OgrSourceTimeFormat
 * 
 * @export
 */
export type OgrSourceTimeFormat = { format: 'auto' } & OgrSourceTimeFormatAuto | { format: 'custom' } & OgrSourceTimeFormatCustom | { format: 'unixTimeStamp' } & OgrSourceTimeFormatUnixTimeStamp;

export function OgrSourceTimeFormatFromJSON(json: any): OgrSourceTimeFormat {
    return OgrSourceTimeFormatFromJSONTyped(json, false);
}

export function OgrSourceTimeFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceTimeFormat {
    if (json == null) {
        return json;
    }
    switch (json['format']) {
        case 'auto':
            return Object.assign({}, OgrSourceTimeFormatAutoFromJSONTyped(json, true), { format: 'auto' } as const);
        case 'custom':
            return Object.assign({}, OgrSourceTimeFormatCustomFromJSONTyped(json, true), { format: 'custom' } as const);
        case 'unixTimeStamp':
            return Object.assign({}, OgrSourceTimeFormatUnixTimeStampFromJSONTyped(json, true), { format: 'unixTimeStamp' } as const);
        default:
            throw new Error(`No variant of OgrSourceTimeFormat exists with 'format=${json['format']}'`);
    }
}

export function OgrSourceTimeFormatToJSON(json: any): any {
    return OgrSourceTimeFormatToJSONTyped(json, false);
}

export function OgrSourceTimeFormatToJSONTyped(value?: OgrSourceTimeFormat | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['format']) {
        case 'auto':
            return Object.assign({}, OgrSourceTimeFormatAutoToJSON(value), { format: 'auto' } as const);
        case 'custom':
            return Object.assign({}, OgrSourceTimeFormatCustomToJSON(value), { format: 'custom' } as const);
        case 'unixTimeStamp':
            return Object.assign({}, OgrSourceTimeFormatUnixTimeStampToJSON(value), { format: 'unixTimeStamp' } as const);
        default:
            throw new Error(`No variant of OgrSourceTimeFormat exists with 'format=${value['format']}'`);
    }

}

