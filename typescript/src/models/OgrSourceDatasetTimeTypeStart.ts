/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OgrSourceTimeFormat } from './OgrSourceTimeFormat';
import {
    OgrSourceTimeFormatFromJSON,
    OgrSourceTimeFormatFromJSONTyped,
    OgrSourceTimeFormatToJSON,
    OgrSourceTimeFormatToJSONTyped,
} from './OgrSourceTimeFormat';
import type { OgrSourceDurationSpec } from './OgrSourceDurationSpec';
import {
    OgrSourceDurationSpecFromJSON,
    OgrSourceDurationSpecFromJSONTyped,
    OgrSourceDurationSpecToJSON,
    OgrSourceDurationSpecToJSONTyped,
} from './OgrSourceDurationSpec';

/**
 * 
 * @export
 * @interface OgrSourceDatasetTimeTypeStart
 */
export interface OgrSourceDatasetTimeTypeStart {
    /**
     * 
     * @type {OgrSourceDurationSpec}
     * @memberof OgrSourceDatasetTimeTypeStart
     */
    duration: OgrSourceDurationSpec;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDatasetTimeTypeStart
     */
    startField: string;
    /**
     * 
     * @type {OgrSourceTimeFormat}
     * @memberof OgrSourceDatasetTimeTypeStart
     */
    startFormat: OgrSourceTimeFormat;
    /**
     * 
     * @type {string}
     * @memberof OgrSourceDatasetTimeTypeStart
     */
    type: OgrSourceDatasetTimeTypeStartTypeEnum;
}


/**
 * @export
 */
export const OgrSourceDatasetTimeTypeStartTypeEnum = {
    Start: 'start'
} as const;
export type OgrSourceDatasetTimeTypeStartTypeEnum = typeof OgrSourceDatasetTimeTypeStartTypeEnum[keyof typeof OgrSourceDatasetTimeTypeStartTypeEnum];


/**
 * Check if a given object implements the OgrSourceDatasetTimeTypeStart interface.
 */
export function instanceOfOgrSourceDatasetTimeTypeStart(value: object): value is OgrSourceDatasetTimeTypeStart {
    if (!('duration' in value) || value['duration'] === undefined) return false;
    if (!('startField' in value) || value['startField'] === undefined) return false;
    if (!('startFormat' in value) || value['startFormat'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function OgrSourceDatasetTimeTypeStartFromJSON(json: any): OgrSourceDatasetTimeTypeStart {
    return OgrSourceDatasetTimeTypeStartFromJSONTyped(json, false);
}

export function OgrSourceDatasetTimeTypeStartFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgrSourceDatasetTimeTypeStart {
    if (json == null) {
        return json;
    }
    return {
        
        'duration': OgrSourceDurationSpecFromJSON(json['duration']),
        'startField': json['startField'],
        'startFormat': OgrSourceTimeFormatFromJSON(json['startFormat']),
        'type': json['type'],
    };
}

export function OgrSourceDatasetTimeTypeStartToJSON(json: any): OgrSourceDatasetTimeTypeStart {
    return OgrSourceDatasetTimeTypeStartToJSONTyped(json, false);
}

export function OgrSourceDatasetTimeTypeStartToJSONTyped(value?: OgrSourceDatasetTimeTypeStart | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'duration': OgrSourceDurationSpecToJSON(value['duration']),
        'startField': value['startField'],
        'startFormat': OgrSourceTimeFormatToJSON(value['startFormat']),
        'type': value['type'],
    };
}

