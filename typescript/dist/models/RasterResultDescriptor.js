"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfRasterResultDescriptor = instanceOfRasterResultDescriptor;
exports.RasterResultDescriptorFromJSON = RasterResultDescriptorFromJSON;
exports.RasterResultDescriptorFromJSONTyped = RasterResultDescriptorFromJSONTyped;
exports.RasterResultDescriptorToJSON = RasterResultDescriptorToJSON;
exports.RasterResultDescriptorToJSONTyped = RasterResultDescriptorToJSONTyped;
const TimeInterval_1 = require("./TimeInterval");
const RasterBandDescriptor_1 = require("./RasterBandDescriptor");
const SpatialGridDescriptor_1 = require("./SpatialGridDescriptor");
const RasterDataType_1 = require("./RasterDataType");
/**
 * Check if a given object implements the RasterResultDescriptor interface.
 */
function instanceOfRasterResultDescriptor(value) {
    if (!('bands' in value) || value['bands'] === undefined)
        return false;
    if (!('dataType' in value) || value['dataType'] === undefined)
        return false;
    if (!('spatialGrid' in value) || value['spatialGrid'] === undefined)
        return false;
    if (!('spatialReference' in value) || value['spatialReference'] === undefined)
        return false;
    return true;
}
function RasterResultDescriptorFromJSON(json) {
    return RasterResultDescriptorFromJSONTyped(json, false);
}
function RasterResultDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'bands': (json['bands'].map(RasterBandDescriptor_1.RasterBandDescriptorFromJSON)),
        'dataType': (0, RasterDataType_1.RasterDataTypeFromJSON)(json['dataType']),
        'spatialGrid': (0, SpatialGridDescriptor_1.SpatialGridDescriptorFromJSON)(json['spatialGrid']),
        'spatialReference': json['spatialReference'],
        'time': json['time'] == null ? undefined : (0, TimeInterval_1.TimeIntervalFromJSON)(json['time']),
    };
}
function RasterResultDescriptorToJSON(json) {
    return RasterResultDescriptorToJSONTyped(json, false);
}
function RasterResultDescriptorToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'bands': (value['bands'].map(RasterBandDescriptor_1.RasterBandDescriptorToJSON)),
        'dataType': (0, RasterDataType_1.RasterDataTypeToJSON)(value['dataType']),
        'spatialGrid': (0, SpatialGridDescriptor_1.SpatialGridDescriptorToJSON)(value['spatialGrid']),
        'spatialReference': value['spatialReference'],
        'time': (0, TimeInterval_1.TimeIntervalToJSON)(value['time']),
    };
}
