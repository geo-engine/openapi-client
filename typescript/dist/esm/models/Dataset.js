/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProvenanceFromJSON, ProvenanceToJSON, } from './Provenance';
import { SymbologyFromJSON, SymbologyToJSON, } from './Symbology';
import { TypedResultDescriptorFromJSON, TypedResultDescriptorToJSON, } from './TypedResultDescriptor';
/**
 * Check if a given object implements the Dataset interface.
 */
export function instanceOfDataset(value) {
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('displayName' in value) || value['displayName'] === undefined)
        return false;
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('resultDescriptor' in value) || value['resultDescriptor'] === undefined)
        return false;
    if (!('sourceOperator' in value) || value['sourceOperator'] === undefined)
        return false;
    return true;
}
export function DatasetFromJSON(json) {
    return DatasetFromJSONTyped(json, false);
}
export function DatasetFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'description': json['description'],
        'displayName': json['displayName'],
        'id': json['id'],
        'name': json['name'],
        'provenance': json['provenance'] == null ? undefined : (json['provenance'].map(ProvenanceFromJSON)),
        'resultDescriptor': TypedResultDescriptorFromJSON(json['resultDescriptor']),
        'sourceOperator': json['sourceOperator'],
        'symbology': json['symbology'] == null ? undefined : SymbologyFromJSON(json['symbology']),
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}
export function DatasetToJSON(json) {
    return DatasetToJSONTyped(json, false);
}
export function DatasetToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'description': value['description'],
        'displayName': value['displayName'],
        'id': value['id'],
        'name': value['name'],
        'provenance': value['provenance'] == null ? undefined : (value['provenance'].map(ProvenanceToJSON)),
        'resultDescriptor': TypedResultDescriptorToJSON(value['resultDescriptor']),
        'sourceOperator': value['sourceOperator'],
        'symbology': SymbologyToJSON(value['symbology']),
        'tags': value['tags'],
    };
}
