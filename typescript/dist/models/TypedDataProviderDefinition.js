"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedDataProviderDefinitionFromJSON = TypedDataProviderDefinitionFromJSON;
exports.TypedDataProviderDefinitionFromJSONTyped = TypedDataProviderDefinitionFromJSONTyped;
exports.TypedDataProviderDefinitionToJSON = TypedDataProviderDefinitionToJSON;
exports.TypedDataProviderDefinitionToJSONTyped = TypedDataProviderDefinitionToJSONTyped;
const ArunaDataProviderDefinition_1 = require("./ArunaDataProviderDefinition");
const CopernicusDataspaceDataProviderDefinition_1 = require("./CopernicusDataspaceDataProviderDefinition");
const DatasetLayerListingProviderDefinition_1 = require("./DatasetLayerListingProviderDefinition");
const EbvPortalDataProviderDefinition_1 = require("./EbvPortalDataProviderDefinition");
const EdrDataProviderDefinition_1 = require("./EdrDataProviderDefinition");
const GbifDataProviderDefinition_1 = require("./GbifDataProviderDefinition");
const GfbioAbcdDataProviderDefinition_1 = require("./GfbioAbcdDataProviderDefinition");
const GfbioCollectionsDataProviderDefinition_1 = require("./GfbioCollectionsDataProviderDefinition");
const NetCdfCfDataProviderDefinition_1 = require("./NetCdfCfDataProviderDefinition");
const PangaeaDataProviderDefinition_1 = require("./PangaeaDataProviderDefinition");
const SentinelS2L2ACogsProviderDefinition_1 = require("./SentinelS2L2ACogsProviderDefinition");
const WildliveDataConnectorDefinition_1 = require("./WildliveDataConnectorDefinition");
function TypedDataProviderDefinitionFromJSON(json) {
    return TypedDataProviderDefinitionFromJSONTyped(json, false);
}
function TypedDataProviderDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'Aruna':
            return Object.assign({}, (0, ArunaDataProviderDefinition_1.ArunaDataProviderDefinitionFromJSONTyped)(json, true), { type: 'Aruna' });
        case 'CopernicusDataspace':
            return Object.assign({}, (0, CopernicusDataspaceDataProviderDefinition_1.CopernicusDataspaceDataProviderDefinitionFromJSONTyped)(json, true), { type: 'CopernicusDataspace' });
        case 'DatasetLayerListing':
            return Object.assign({}, (0, DatasetLayerListingProviderDefinition_1.DatasetLayerListingProviderDefinitionFromJSONTyped)(json, true), { type: 'DatasetLayerListing' });
        case 'EbvPortal':
            return Object.assign({}, (0, EbvPortalDataProviderDefinition_1.EbvPortalDataProviderDefinitionFromJSONTyped)(json, true), { type: 'EbvPortal' });
        case 'Edr':
            return Object.assign({}, (0, EdrDataProviderDefinition_1.EdrDataProviderDefinitionFromJSONTyped)(json, true), { type: 'Edr' });
        case 'Gbif':
            return Object.assign({}, (0, GbifDataProviderDefinition_1.GbifDataProviderDefinitionFromJSONTyped)(json, true), { type: 'Gbif' });
        case 'GfbioAbcd':
            return Object.assign({}, (0, GfbioAbcdDataProviderDefinition_1.GfbioAbcdDataProviderDefinitionFromJSONTyped)(json, true), { type: 'GfbioAbcd' });
        case 'GfbioCollections':
            return Object.assign({}, (0, GfbioCollectionsDataProviderDefinition_1.GfbioCollectionsDataProviderDefinitionFromJSONTyped)(json, true), { type: 'GfbioCollections' });
        case 'NetCdfCf':
            return Object.assign({}, (0, NetCdfCfDataProviderDefinition_1.NetCdfCfDataProviderDefinitionFromJSONTyped)(json, true), { type: 'NetCdfCf' });
        case 'Pangaea':
            return Object.assign({}, (0, PangaeaDataProviderDefinition_1.PangaeaDataProviderDefinitionFromJSONTyped)(json, true), { type: 'Pangaea' });
        case 'SentinelS2L2ACogs':
            return Object.assign({}, (0, SentinelS2L2ACogsProviderDefinition_1.SentinelS2L2ACogsProviderDefinitionFromJSONTyped)(json, true), { type: 'SentinelS2L2ACogs' });
        case 'WildLIVE!':
            return Object.assign({}, (0, WildliveDataConnectorDefinition_1.WildliveDataConnectorDefinitionFromJSONTyped)(json, true), { type: 'WildLIVE!' });
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${json['type']}'`);
    }
}
function TypedDataProviderDefinitionToJSON(json) {
    return TypedDataProviderDefinitionToJSONTyped(json, false);
}
function TypedDataProviderDefinitionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'Aruna':
            return Object.assign({}, (0, ArunaDataProviderDefinition_1.ArunaDataProviderDefinitionToJSON)(value), { type: 'Aruna' });
        case 'CopernicusDataspace':
            return Object.assign({}, (0, CopernicusDataspaceDataProviderDefinition_1.CopernicusDataspaceDataProviderDefinitionToJSON)(value), { type: 'CopernicusDataspace' });
        case 'DatasetLayerListing':
            return Object.assign({}, (0, DatasetLayerListingProviderDefinition_1.DatasetLayerListingProviderDefinitionToJSON)(value), { type: 'DatasetLayerListing' });
        case 'EbvPortal':
            return Object.assign({}, (0, EbvPortalDataProviderDefinition_1.EbvPortalDataProviderDefinitionToJSON)(value), { type: 'EbvPortal' });
        case 'Edr':
            return Object.assign({}, (0, EdrDataProviderDefinition_1.EdrDataProviderDefinitionToJSON)(value), { type: 'Edr' });
        case 'Gbif':
            return Object.assign({}, (0, GbifDataProviderDefinition_1.GbifDataProviderDefinitionToJSON)(value), { type: 'Gbif' });
        case 'GfbioAbcd':
            return Object.assign({}, (0, GfbioAbcdDataProviderDefinition_1.GfbioAbcdDataProviderDefinitionToJSON)(value), { type: 'GfbioAbcd' });
        case 'GfbioCollections':
            return Object.assign({}, (0, GfbioCollectionsDataProviderDefinition_1.GfbioCollectionsDataProviderDefinitionToJSON)(value), { type: 'GfbioCollections' });
        case 'NetCdfCf':
            return Object.assign({}, (0, NetCdfCfDataProviderDefinition_1.NetCdfCfDataProviderDefinitionToJSON)(value), { type: 'NetCdfCf' });
        case 'Pangaea':
            return Object.assign({}, (0, PangaeaDataProviderDefinition_1.PangaeaDataProviderDefinitionToJSON)(value), { type: 'Pangaea' });
        case 'SentinelS2L2ACogs':
            return Object.assign({}, (0, SentinelS2L2ACogsProviderDefinition_1.SentinelS2L2ACogsProviderDefinitionToJSON)(value), { type: 'SentinelS2L2ACogs' });
        case 'WildLIVE!':
            return Object.assign({}, (0, WildliveDataConnectorDefinition_1.WildliveDataConnectorDefinitionToJSON)(value), { type: 'WildLIVE!' });
        default:
            throw new Error(`No variant of TypedDataProviderDefinition exists with 'type=${value['type']}'`);
    }
}
