/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbology } from './Symbology';
import {
    SymbologyFromJSON,
    SymbologyFromJSONTyped,
    SymbologyToJSON,
    SymbologyToJSONTyped,
} from './Symbology';
import type { ProviderLayerId } from './ProviderLayerId';
import {
    ProviderLayerIdFromJSON,
    ProviderLayerIdFromJSONTyped,
    ProviderLayerIdToJSON,
    ProviderLayerIdToJSONTyped,
} from './ProviderLayerId';
import type { Workflow } from './Workflow';
import {
    WorkflowFromJSON,
    WorkflowFromJSONTyped,
    WorkflowToJSON,
    WorkflowToJSONTyped,
} from './Workflow';

/**
 * 
 * @export
 * @interface Layer
 */
export interface Layer {
    /**
     * 
     * @type {string}
     * @memberof Layer
     */
    description: string;
    /**
     * 
     * @type {ProviderLayerId}
     * @memberof Layer
     */
    id: ProviderLayerId;
    /**
     * metadata used for loading the data
     * @type {{ [key: string]: string; }}
     * @memberof Layer
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof Layer
     */
    name: string;
    /**
     * properties, for instance, to be rendered in the UI
     * @type {Array<Array<string>>}
     * @memberof Layer
     */
    properties?: Array<Array<string>>;
    /**
     * 
     * @type {Symbology}
     * @memberof Layer
     */
    symbology?: Symbology | null;
    /**
     * 
     * @type {Workflow}
     * @memberof Layer
     */
    workflow: Workflow;
}

/**
 * Check if a given object implements the Layer interface.
 */
export function instanceOfLayer(value: object): value is Layer {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('workflow' in value) || value['workflow'] === undefined) return false;
    return true;
}

export function LayerFromJSON(json: any): Layer {
    return LayerFromJSONTyped(json, false);
}

export function LayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Layer {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'id': ProviderLayerIdFromJSON(json['id']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'properties': json['properties'] == null ? undefined : json['properties'],
        'symbology': json['symbology'] == null ? undefined : SymbologyFromJSON(json['symbology']),
        'workflow': WorkflowFromJSON(json['workflow']),
    };
}

export function LayerToJSON(json: any): Layer {
    return LayerToJSONTyped(json, false);
}

export function LayerToJSONTyped(value?: Layer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'id': ProviderLayerIdToJSON(value['id']),
        'metadata': value['metadata'],
        'name': value['name'],
        'properties': value['properties'],
        'symbology': SymbologyToJSON(value['symbology']),
        'workflow': WorkflowToJSON(value['workflow']),
    };
}

