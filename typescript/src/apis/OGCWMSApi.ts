/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCapabilitiesFormat,
  GetCapabilitiesRequest,
  GetLegendGraphicRequest,
  GetMapExceptionFormat,
  GetMapFormat,
  GetMapRequest,
  WmsService,
  WmsVersion,
} from '../models/index';
import {
    GetCapabilitiesFormatFromJSON,
    GetCapabilitiesFormatToJSON,
    GetCapabilitiesRequestFromJSON,
    GetCapabilitiesRequestToJSON,
    GetLegendGraphicRequestFromJSON,
    GetLegendGraphicRequestToJSON,
    GetMapExceptionFormatFromJSON,
    GetMapExceptionFormatToJSON,
    GetMapFormatFromJSON,
    GetMapFormatToJSON,
    GetMapRequestFromJSON,
    GetMapRequestToJSON,
    WmsServiceFromJSON,
    WmsServiceToJSON,
    WmsVersionFromJSON,
    WmsVersionToJSON,
} from '../models/index';

export interface WmsCapabilitiesHandlerRequest {
    workflow: string;
    version: WmsVersion | null;
    service: WmsService;
    request: GetCapabilitiesRequest;
    format: GetCapabilitiesFormat | null;
}

export interface WmsLegendGraphicHandlerRequest {
    workflow: string;
    version: WmsVersion;
    service: WmsService;
    request: GetLegendGraphicRequest;
    layer: string;
}

export interface WmsMapHandlerRequest {
    workflow: string;
    version: WmsVersion;
    service: WmsService;
    request: GetMapRequest;
    width: number;
    height: number;
    bbox: string;
    format: GetMapFormat;
    layers: string;
    styles: string;
    crs?: string | null;
    time?: string;
    transparent?: boolean | null;
    bgcolor?: string | null;
    sld?: string | null;
    sldBody?: string | null;
    elevation?: string | null;
    exceptions?: GetMapExceptionFormat | null;
}

/**
 * 
 */
export class OGCWMSApi extends runtime.BaseAPI {

    /**
     * Get WMS Capabilities
     */
    async wmsCapabilitiesHandlerRaw(requestParameters: WmsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['workflow'] == null) {
            throw new runtime.RequiredError(
                'workflow',
                'Required parameter "workflow" was null or undefined when calling wmsCapabilitiesHandler().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling wmsCapabilitiesHandler().'
            );
        }

        if (requestParameters['service'] == null) {
            throw new runtime.RequiredError(
                'service',
                'Required parameter "service" was null or undefined when calling wmsCapabilitiesHandler().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling wmsCapabilitiesHandler().'
            );
        }

        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling wmsCapabilitiesHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetCapabilities`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters['workflow']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters['service']))).replace(`{${"request"}}`, encodeURIComponent(String(requestParameters['request']))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get WMS Capabilities
     */
    async wmsCapabilitiesHandler(requestParameters: WmsCapabilitiesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.wmsCapabilitiesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get WMS Legend Graphic
     */
    async wmsLegendGraphicHandlerRaw(requestParameters: WmsLegendGraphicHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflow'] == null) {
            throw new runtime.RequiredError(
                'workflow',
                'Required parameter "workflow" was null or undefined when calling wmsLegendGraphicHandler().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling wmsLegendGraphicHandler().'
            );
        }

        if (requestParameters['service'] == null) {
            throw new runtime.RequiredError(
                'service',
                'Required parameter "service" was null or undefined when calling wmsLegendGraphicHandler().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling wmsLegendGraphicHandler().'
            );
        }

        if (requestParameters['layer'] == null) {
            throw new runtime.RequiredError(
                'layer',
                'Required parameter "layer" was null or undefined when calling wmsLegendGraphicHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetLegendGraphic`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters['workflow']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters['service']))).replace(`{${"request"}}`, encodeURIComponent(String(requestParameters['request']))).replace(`{${"layer"}}`, encodeURIComponent(String(requestParameters['layer']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get WMS Legend Graphic
     */
    async wmsLegendGraphicHandler(requestParameters: WmsLegendGraphicHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.wmsLegendGraphicHandlerRaw(requestParameters, initOverrides);
    }

    /**
     * Get WMS Map
     */
    async wmsMapHandlerRaw(requestParameters: WmsMapHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['workflow'] == null) {
            throw new runtime.RequiredError(
                'workflow',
                'Required parameter "workflow" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['service'] == null) {
            throw new runtime.RequiredError(
                'service',
                'Required parameter "service" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['width'] == null) {
            throw new runtime.RequiredError(
                'width',
                'Required parameter "width" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['height'] == null) {
            throw new runtime.RequiredError(
                'height',
                'Required parameter "height" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['bbox'] == null) {
            throw new runtime.RequiredError(
                'bbox',
                'Required parameter "bbox" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['layers'] == null) {
            throw new runtime.RequiredError(
                'layers',
                'Required parameter "layers" was null or undefined when calling wmsMapHandler().'
            );
        }

        if (requestParameters['styles'] == null) {
            throw new runtime.RequiredError(
                'styles',
                'Required parameter "styles" was null or undefined when calling wmsMapHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        if (requestParameters['service'] != null) {
            queryParameters['service'] = requestParameters['service'];
        }

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['layers'] != null) {
            queryParameters['layers'] = requestParameters['layers'];
        }

        if (requestParameters['crs'] != null) {
            queryParameters['crs'] = requestParameters['crs'];
        }

        if (requestParameters['styles'] != null) {
            queryParameters['styles'] = requestParameters['styles'];
        }

        if (requestParameters['time'] != null) {
            queryParameters['time'] = requestParameters['time'];
        }

        if (requestParameters['transparent'] != null) {
            queryParameters['transparent'] = requestParameters['transparent'];
        }

        if (requestParameters['bgcolor'] != null) {
            queryParameters['bgcolor'] = requestParameters['bgcolor'];
        }

        if (requestParameters['sld'] != null) {
            queryParameters['sld'] = requestParameters['sld'];
        }

        if (requestParameters['sldBody'] != null) {
            queryParameters['sld_body'] = requestParameters['sldBody'];
        }

        if (requestParameters['elevation'] != null) {
            queryParameters['elevation'] = requestParameters['elevation'];
        }

        if (requestParameters['exceptions'] != null) {
            queryParameters['exceptions'] = requestParameters['exceptions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("session_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wms/{workflow}?request=GetMap`.replace(`{${"workflow"}}`, encodeURIComponent(String(requestParameters['workflow']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get WMS Map
     */
    async wmsMapHandler(requestParameters: WmsMapHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.wmsMapHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
