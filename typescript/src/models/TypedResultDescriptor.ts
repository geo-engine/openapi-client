/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    PlotResultDescriptorWithType,
    instanceOfPlotResultDescriptorWithType,
    PlotResultDescriptorWithTypeFromJSON,
    PlotResultDescriptorWithTypeFromJSONTyped,
    PlotResultDescriptorWithTypeToJSON,
} from './PlotResultDescriptorWithType';
import {
    RasterResultDescriptorWithType,
    instanceOfRasterResultDescriptorWithType,
    RasterResultDescriptorWithTypeFromJSON,
    RasterResultDescriptorWithTypeFromJSONTyped,
    RasterResultDescriptorWithTypeToJSON,
} from './RasterResultDescriptorWithType';
import {
    VectorResultDescriptorWithType,
    instanceOfVectorResultDescriptorWithType,
    VectorResultDescriptorWithTypeFromJSON,
    VectorResultDescriptorWithTypeFromJSONTyped,
    VectorResultDescriptorWithTypeToJSON,
} from './VectorResultDescriptorWithType';

/**
 * @type TypedResultDescriptor
 * 
 * @export
 */
export type TypedResultDescriptor = { type: 'plot' } & PlotResultDescriptorWithType | { type: 'raster' } & RasterResultDescriptorWithType | { type: 'vector' } & VectorResultDescriptorWithType;

export function TypedResultDescriptorFromJSON(json: any): TypedResultDescriptor {
    return TypedResultDescriptorFromJSONTyped(json, false);
}

export function TypedResultDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedResultDescriptor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'plot':
            return {...PlotResultDescriptorWithTypeFromJSONTyped(json, true), type: 'plot'};
        case 'raster':
            return {...RasterResultDescriptorWithTypeFromJSONTyped(json, true), type: 'raster'};
        case 'vector':
            return {...VectorResultDescriptorWithTypeFromJSONTyped(json, true), type: 'vector'};
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${json['type']}'`);
    }
}

export function TypedResultDescriptorToJSON(value?: TypedResultDescriptor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'plot':
            return PlotResultDescriptorWithTypeToJSON(value);
        case 'raster':
            return RasterResultDescriptorWithTypeToJSON(value);
        case 'vector':
            return VectorResultDescriptorWithTypeToJSON(value);
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${value['type']}'`);
    }

}

