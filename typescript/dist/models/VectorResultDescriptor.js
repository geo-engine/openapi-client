"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorResultDescriptorToJSON = exports.VectorResultDescriptorFromJSONTyped = exports.VectorResultDescriptorFromJSON = exports.instanceOfVectorResultDescriptor = void 0;
const runtime_1 = require("../runtime");
const BoundingBox2D_1 = require("./BoundingBox2D");
const TimeInterval_1 = require("./TimeInterval");
const VectorColumnInfo_1 = require("./VectorColumnInfo");
const VectorDataType_1 = require("./VectorDataType");
/**
 * Check if a given object implements the VectorResultDescriptor interface.
 */
function instanceOfVectorResultDescriptor(value) {
    let isInstance = true;
    isInstance = isInstance && "columns" in value;
    isInstance = isInstance && "dataType" in value;
    isInstance = isInstance && "spatialReference" in value;
    return isInstance;
}
exports.instanceOfVectorResultDescriptor = instanceOfVectorResultDescriptor;
function VectorResultDescriptorFromJSON(json) {
    return VectorResultDescriptorFromJSONTyped(json, false);
}
exports.VectorResultDescriptorFromJSON = VectorResultDescriptorFromJSON;
function VectorResultDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bbox': !(0, runtime_1.exists)(json, 'bbox') ? undefined : (0, BoundingBox2D_1.BoundingBox2DFromJSON)(json['bbox']),
        'columns': ((0, runtime_1.mapValues)(json['columns'], VectorColumnInfo_1.VectorColumnInfoFromJSON)),
        'dataType': (0, VectorDataType_1.VectorDataTypeFromJSON)(json['dataType']),
        'spatialReference': json['spatialReference'],
        'time': !(0, runtime_1.exists)(json, 'time') ? undefined : (0, TimeInterval_1.TimeIntervalFromJSON)(json['time']),
    };
}
exports.VectorResultDescriptorFromJSONTyped = VectorResultDescriptorFromJSONTyped;
function VectorResultDescriptorToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'bbox': (0, BoundingBox2D_1.BoundingBox2DToJSON)(value.bbox),
        'columns': ((0, runtime_1.mapValues)(value.columns, VectorColumnInfo_1.VectorColumnInfoToJSON)),
        'dataType': (0, VectorDataType_1.VectorDataTypeToJSON)(value.dataType),
        'spatialReference': value.spatialReference,
        'time': (0, TimeInterval_1.TimeIntervalToJSON)(value.time),
    };
}
exports.VectorResultDescriptorToJSON = VectorResultDescriptorToJSON;
