/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    LineSymbologyWithType,
    instanceOfLineSymbologyWithType,
    LineSymbologyWithTypeFromJSON,
    LineSymbologyWithTypeFromJSONTyped,
    LineSymbologyWithTypeToJSON,
} from './LineSymbologyWithType';
import {
    PointSymbologyWithType,
    instanceOfPointSymbologyWithType,
    PointSymbologyWithTypeFromJSON,
    PointSymbologyWithTypeFromJSONTyped,
    PointSymbologyWithTypeToJSON,
} from './PointSymbologyWithType';
import {
    PolygonSymbologyWithType,
    instanceOfPolygonSymbologyWithType,
    PolygonSymbologyWithTypeFromJSON,
    PolygonSymbologyWithTypeFromJSONTyped,
    PolygonSymbologyWithTypeToJSON,
} from './PolygonSymbologyWithType';
import {
    RasterSymbologyWithType,
    instanceOfRasterSymbologyWithType,
    RasterSymbologyWithTypeFromJSON,
    RasterSymbologyWithTypeFromJSONTyped,
    RasterSymbologyWithTypeToJSON,
} from './RasterSymbologyWithType';

/**
 * @type Symbology
 * 
 * @export
 */
export type Symbology = { type: 'line' } & LineSymbologyWithType | { type: 'point' } & PointSymbologyWithType | { type: 'polygon' } & PolygonSymbologyWithType | { type: 'raster' } & RasterSymbologyWithType;

export function SymbologyFromJSON(json: any): Symbology {
    return SymbologyFromJSONTyped(json, false);
}

export function SymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Symbology {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'line':
            return {...LineSymbologyWithTypeFromJSONTyped(json, true), type: 'line'};
        case 'point':
            return {...PointSymbologyWithTypeFromJSONTyped(json, true), type: 'point'};
        case 'polygon':
            return {...PolygonSymbologyWithTypeFromJSONTyped(json, true), type: 'polygon'};
        case 'raster':
            return {...RasterSymbologyWithTypeFromJSONTyped(json, true), type: 'raster'};
        default:
            throw new Error(`No variant of Symbology exists with 'type=${json['type']}'`);
    }
}

export function SymbologyToJSON(value?: Symbology | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'line':
            return LineSymbologyWithTypeToJSON(value);
        case 'point':
            return PointSymbologyWithTypeToJSON(value);
        case 'polygon':
            return PolygonSymbologyWithTypeToJSON(value);
        case 'raster':
            return RasterSymbologyWithTypeToJSON(value);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${value['type']}'`);
    }

}

