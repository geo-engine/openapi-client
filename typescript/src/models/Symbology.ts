/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { LineSymbology } from './LineSymbology';
import {
    instanceOfLineSymbology,
    LineSymbologyFromJSON,
    LineSymbologyFromJSONTyped,
    LineSymbologyToJSON,
} from './LineSymbology';
import type { PointSymbology } from './PointSymbology';
import {
    instanceOfPointSymbology,
    PointSymbologyFromJSON,
    PointSymbologyFromJSONTyped,
    PointSymbologyToJSON,
} from './PointSymbology';
import type { PolygonSymbology } from './PolygonSymbology';
import {
    instanceOfPolygonSymbology,
    PolygonSymbologyFromJSON,
    PolygonSymbologyFromJSONTyped,
    PolygonSymbologyToJSON,
} from './PolygonSymbology';
import type { RasterSymbology } from './RasterSymbology';
import {
    instanceOfRasterSymbology,
    RasterSymbologyFromJSON,
    RasterSymbologyFromJSONTyped,
    RasterSymbologyToJSON,
} from './RasterSymbology';

/**
 * @type Symbology
 * 
 * @export
 */
export type Symbology = { type: 'line' } & LineSymbology | { type: 'point' } & PointSymbology | { type: 'polygon' } & PolygonSymbology | { type: 'raster' } & RasterSymbology;

export function SymbologyFromJSON(json: any): Symbology {
    return SymbologyFromJSONTyped(json, false);
}

export function SymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Symbology {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'line':
            return Object.assign({}, LineSymbologyFromJSONTyped(json, true), { type: 'line' } as const);
        case 'point':
            return Object.assign({}, PointSymbologyFromJSONTyped(json, true), { type: 'point' } as const);
        case 'polygon':
            return Object.assign({}, PolygonSymbologyFromJSONTyped(json, true), { type: 'polygon' } as const);
        case 'raster':
            return Object.assign({}, RasterSymbologyFromJSONTyped(json, true), { type: 'raster' } as const);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${json['type']}'`);
    }
}

export function SymbologyToJSON(json: any): any {
    return SymbologyToJSONTyped(json, false);
}

export function SymbologyToJSONTyped(value?: Symbology | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'line':
            return Object.assign({}, LineSymbologyToJSON(value), { type: 'line' } as const);
        case 'point':
            return Object.assign({}, PointSymbologyToJSON(value), { type: 'point' } as const);
        case 'polygon':
            return Object.assign({}, PolygonSymbologyToJSON(value), { type: 'polygon' } as const);
        case 'raster':
            return Object.assign({}, RasterSymbologyToJSON(value), { type: 'raster' } as const);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${value['type']}'`);
    }

}

