/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { EdrVectorSpec } from './EdrVectorSpec';
import {
    EdrVectorSpecFromJSON,
    EdrVectorSpecFromJSONTyped,
    EdrVectorSpecToJSON,
    EdrVectorSpecToJSONTyped,
} from './EdrVectorSpec';

/**
 * 
 * @export
 * @interface EdrDataProviderDefinition
 */
export interface EdrDataProviderDefinition {
    /**
     * 
     * @type {string}
     * @memberof EdrDataProviderDefinition
     */
    baseUrl: string;
    /**
     * 
     * @type {number}
     * @memberof EdrDataProviderDefinition
     */
    cacheTtl?: number;
    /**
     * 
     * @type {string}
     * @memberof EdrDataProviderDefinition
     */
    description: string;
    /**
     * List of vertical reference systems with a discrete scale
     * @type {Array<string>}
     * @memberof EdrDataProviderDefinition
     */
    discreteVrs?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EdrDataProviderDefinition
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EdrDataProviderDefinition
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof EdrDataProviderDefinition
     */
    priority?: number | null;
    /**
     * 
     * @type {Array<Provenance>}
     * @memberof EdrDataProviderDefinition
     */
    provenance?: Array<Provenance> | null;
    /**
     * 
     * @type {string}
     * @memberof EdrDataProviderDefinition
     */
    type: EdrDataProviderDefinitionTypeEnum;
    /**
     * 
     * @type {EdrVectorSpec}
     * @memberof EdrDataProviderDefinition
     */
    vectorSpec?: EdrVectorSpec | null;
}


/**
 * @export
 */
export const EdrDataProviderDefinitionTypeEnum = {
    Edr: 'Edr'
} as const;
export type EdrDataProviderDefinitionTypeEnum = typeof EdrDataProviderDefinitionTypeEnum[keyof typeof EdrDataProviderDefinitionTypeEnum];


/**
 * Check if a given object implements the EdrDataProviderDefinition interface.
 */
export function instanceOfEdrDataProviderDefinition(value: object): value is EdrDataProviderDefinition {
    if (!('baseUrl' in value) || value['baseUrl'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function EdrDataProviderDefinitionFromJSON(json: any): EdrDataProviderDefinition {
    return EdrDataProviderDefinitionFromJSONTyped(json, false);
}

export function EdrDataProviderDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EdrDataProviderDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'baseUrl': json['baseUrl'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'description': json['description'],
        'discreteVrs': json['discreteVrs'] == null ? undefined : json['discreteVrs'],
        'id': json['id'],
        'name': json['name'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'provenance': json['provenance'] == null ? undefined : ((json['provenance'] as Array<any>).map(ProvenanceFromJSON)),
        'type': json['type'],
        'vectorSpec': json['vectorSpec'] == null ? undefined : EdrVectorSpecFromJSON(json['vectorSpec']),
    };
}

export function EdrDataProviderDefinitionToJSON(json: any): EdrDataProviderDefinition {
    return EdrDataProviderDefinitionToJSONTyped(json, false);
}

export function EdrDataProviderDefinitionToJSONTyped(value?: EdrDataProviderDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'baseUrl': value['baseUrl'],
        'cacheTtl': value['cacheTtl'],
        'description': value['description'],
        'discreteVrs': value['discreteVrs'],
        'id': value['id'],
        'name': value['name'],
        'priority': value['priority'],
        'provenance': value['provenance'] == null ? undefined : ((value['provenance'] as Array<any>).map(ProvenanceToJSON)),
        'type': value['type'],
        'vectorSpec': EdrVectorSpecToJSON(value['vectorSpec']),
    };
}

